
GCC_Practice_001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00802000  00002aac  00002b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  00802026  00802026  00002b66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  00002bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e775  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004e5a  00000000  00000000  000117ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000069da  00000000  00000000  00016607  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000175c  00000000  00000000  0001cfe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d005  00000000  00000000  0001e740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004be0  00000000  00000000  0004b745  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  00050325  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000abf1  00000000  00000000  000506fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	1d c1       	rjmp	.+570    	; 0x240 <__bad_interrupt>
       6:	00 00       	nop
       8:	1b c1       	rjmp	.+566    	; 0x240 <__bad_interrupt>
       a:	00 00       	nop
       c:	19 c1       	rjmp	.+562    	; 0x240 <__bad_interrupt>
       e:	00 00       	nop
      10:	17 c1       	rjmp	.+558    	; 0x240 <__bad_interrupt>
      12:	00 00       	nop
      14:	15 c1       	rjmp	.+554    	; 0x240 <__bad_interrupt>
      16:	00 00       	nop
      18:	13 c1       	rjmp	.+550    	; 0x240 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	11 c1       	rjmp	.+546    	; 0x240 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0f c1       	rjmp	.+542    	; 0x240 <__bad_interrupt>
      22:	00 00       	nop
      24:	0d c1       	rjmp	.+538    	; 0x240 <__bad_interrupt>
      26:	00 00       	nop
      28:	a8 c6       	rjmp	.+3408   	; 0xd7a <__vector_10>
      2a:	00 00       	nop
      2c:	c9 c6       	rjmp	.+3474   	; 0xdc0 <__vector_11>
      2e:	00 00       	nop
      30:	07 c1       	rjmp	.+526    	; 0x240 <__bad_interrupt>
      32:	00 00       	nop
      34:	05 c1       	rjmp	.+522    	; 0x240 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c7       	rjmp	.+3726   	; 0xec8 <__vector_14>
      3a:	00 00       	nop
      3c:	7d c7       	rjmp	.+3834   	; 0xf38 <__vector_15>
      3e:	00 00       	nop
      40:	b3 c7       	rjmp	.+3942   	; 0xfa8 <__vector_16>
      42:	00 00       	nop
      44:	e9 c7       	rjmp	.+4050   	; 0x1018 <__vector_17>
      46:	00 00       	nop
      48:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__vector_18>
      4c:	0c 94 7c 08 	jmp	0x10f8	; 0x10f8 <__vector_19>
      50:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__vector_20>
      54:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__vector_21>
      58:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__vector_22>
      5c:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__vector_23>
      60:	ef c0       	rjmp	.+478    	; 0x240 <__bad_interrupt>
      62:	00 00       	nop
      64:	ed c0       	rjmp	.+474    	; 0x240 <__bad_interrupt>
      66:	00 00       	nop
      68:	eb c0       	rjmp	.+470    	; 0x240 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e9 c0       	rjmp	.+466    	; 0x240 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e7 c0       	rjmp	.+462    	; 0x240 <__bad_interrupt>
      72:	00 00       	nop
      74:	e5 c0       	rjmp	.+458    	; 0x240 <__bad_interrupt>
      76:	00 00       	nop
      78:	e3 c0       	rjmp	.+454    	; 0x240 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e1 c0       	rjmp	.+450    	; 0x240 <__bad_interrupt>
      7e:	00 00       	nop
      80:	df c0       	rjmp	.+446    	; 0x240 <__bad_interrupt>
      82:	00 00       	nop
      84:	dd c0       	rjmp	.+442    	; 0x240 <__bad_interrupt>
      86:	00 00       	nop
      88:	db c0       	rjmp	.+438    	; 0x240 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d9 c0       	rjmp	.+434    	; 0x240 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d7 c0       	rjmp	.+430    	; 0x240 <__bad_interrupt>
      92:	00 00       	nop
      94:	d5 c0       	rjmp	.+426    	; 0x240 <__bad_interrupt>
      96:	00 00       	nop
      98:	d3 c0       	rjmp	.+422    	; 0x240 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	34 c5       	rjmp	.+2664   	; 0xb06 <__vector_39>
      9e:	00 00       	nop
      a0:	6f c5       	rjmp	.+2782   	; 0xb80 <__vector_40>
      a2:	00 00       	nop
      a4:	aa c5       	rjmp	.+2900   	; 0xbfa <__vector_41>
      a6:	00 00       	nop
      a8:	e5 c5       	rjmp	.+3018   	; 0xc74 <__vector_42>
      aa:	00 00       	nop
      ac:	c9 c0       	rjmp	.+402    	; 0x240 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c7 c0       	rjmp	.+398    	; 0x240 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c5 c0       	rjmp	.+394    	; 0x240 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c3 c0       	rjmp	.+390    	; 0x240 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_47>
      c0:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__vector_48>
      c4:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_49>
      c8:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <__vector_50>
      cc:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__vector_51>
      d0:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <__vector_52>
      d4:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__vector_53>
      d8:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__vector_54>
      dc:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__vector_55>
      e0:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__vector_56>
      e4:	ad c0       	rjmp	.+346    	; 0x240 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ab c0       	rjmp	.+342    	; 0x240 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a9 c0       	rjmp	.+338    	; 0x240 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a7 c0       	rjmp	.+334    	; 0x240 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a5 c0       	rjmp	.+330    	; 0x240 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a3 c0       	rjmp	.+326    	; 0x240 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a1 c0       	rjmp	.+322    	; 0x240 <__bad_interrupt>
      fe:	00 00       	nop
     100:	9f c0       	rjmp	.+318    	; 0x240 <__bad_interrupt>
     102:	00 00       	nop
     104:	9d c0       	rjmp	.+314    	; 0x240 <__bad_interrupt>
     106:	00 00       	nop
     108:	9b c0       	rjmp	.+310    	; 0x240 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	99 c0       	rjmp	.+306    	; 0x240 <__bad_interrupt>
     10e:	00 00       	nop
     110:	97 c0       	rjmp	.+302    	; 0x240 <__bad_interrupt>
     112:	00 00       	nop
     114:	95 c0       	rjmp	.+298    	; 0x240 <__bad_interrupt>
     116:	00 00       	nop
     118:	93 c0       	rjmp	.+294    	; 0x240 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	00 c4       	rjmp	.+2048   	; 0x91e <__vector_71>
     11e:	00 00       	nop
     120:	3b c4       	rjmp	.+2166   	; 0x998 <__vector_72>
     122:	00 00       	nop
     124:	76 c4       	rjmp	.+2284   	; 0xa12 <__vector_73>
     126:	00 00       	nop
     128:	b1 c4       	rjmp	.+2402   	; 0xa8c <__vector_74>
     12a:	00 00       	nop
     12c:	89 c0       	rjmp	.+274    	; 0x240 <__bad_interrupt>
     12e:	00 00       	nop
     130:	87 c0       	rjmp	.+270    	; 0x240 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_77>
     138:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_78>
     13c:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__vector_79>
     140:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__vector_80>
     144:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__vector_81>
     148:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_82>
     14c:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_83>
     150:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__vector_84>
     154:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__vector_85>
     158:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__vector_86>
     15c:	71 c0       	rjmp	.+226    	; 0x240 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6f c0       	rjmp	.+222    	; 0x240 <__bad_interrupt>
     162:	00 00       	nop
     164:	6d c0       	rjmp	.+218    	; 0x240 <__bad_interrupt>
     166:	00 00       	nop
     168:	6b c0       	rjmp	.+214    	; 0x240 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	69 c0       	rjmp	.+210    	; 0x240 <__bad_interrupt>
     16e:	00 00       	nop
     170:	67 c0       	rjmp	.+206    	; 0x240 <__bad_interrupt>
     172:	00 00       	nop
     174:	65 c0       	rjmp	.+202    	; 0x240 <__bad_interrupt>
     176:	00 00       	nop
     178:	63 c0       	rjmp	.+198    	; 0x240 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	61 c0       	rjmp	.+194    	; 0x240 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5f c0       	rjmp	.+190    	; 0x240 <__bad_interrupt>
     182:	00 00       	nop
     184:	5d c0       	rjmp	.+186    	; 0x240 <__bad_interrupt>
     186:	00 00       	nop
     188:	5b c0       	rjmp	.+182    	; 0x240 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	59 c0       	rjmp	.+178    	; 0x240 <__bad_interrupt>
     18e:	00 00       	nop
     190:	57 c0       	rjmp	.+174    	; 0x240 <__bad_interrupt>
     192:	00 00       	nop
     194:	55 c0       	rjmp	.+170    	; 0x240 <__bad_interrupt>
     196:	00 00       	nop
     198:	53 c0       	rjmp	.+166    	; 0x240 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	51 c0       	rjmp	.+162    	; 0x240 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4f c0       	rjmp	.+158    	; 0x240 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4d c0       	rjmp	.+154    	; 0x240 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4b c0       	rjmp	.+150    	; 0x240 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	49 c0       	rjmp	.+146    	; 0x240 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 f4 0d 	jmp	0x1be8	; 0x1be8 <__vector_108>
     1b4:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <__vector_109>
     1b8:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__vector_110>
     1bc:	0c 94 9c 0e 	jmp	0x1d38	; 0x1d38 <__vector_111>
     1c0:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__vector_112>
     1c4:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__vector_113>
     1c8:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__vector_114>
     1cc:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__vector_115>
     1d0:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__vector_116>
     1d4:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__vector_117>
     1d8:	33 c0       	rjmp	.+102    	; 0x240 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	31 c0       	rjmp	.+98     	; 0x240 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2f c0       	rjmp	.+94     	; 0x240 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2d c0       	rjmp	.+90     	; 0x240 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2b c0       	rjmp	.+86     	; 0x240 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	29 c0       	rjmp	.+82     	; 0x240 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	27 c0       	rjmp	.+78     	; 0x240 <__bad_interrupt>
	...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df e3       	ldi	r29, 0x3F	; 63
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ec ea       	ldi	r30, 0xAC	; 172
     214:	fa e2       	ldi	r31, 0x2A	; 42
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a6 32       	cpi	r26, 0x26	; 38
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
     228:	20 e2       	ldi	r18, 0x20	; 32
     22a:	a6 e2       	ldi	r26, 0x26	; 38
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
     230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
     232:	a2 39       	cpi	r26, 0x92	; 146
     234:	b2 07       	cpc	r27, r18
     236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
     238:	0e 94 63 11 	call	0x22c6	; 0x22c6 <main>
     23c:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <_exit>

00000240 <__bad_interrupt>:
     240:	df ce       	rjmp	.-578    	; 0x0 <__vectors>

00000242 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	1f 92       	push	r1
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     24c:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <stdio_base>
     250:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <stdio_base+0x1>
     254:	e0 91 76 20 	lds	r30, 0x2076	; 0x802076 <ptr_get>
     258:	f0 91 77 20 	lds	r31, 0x2077	; 0x802077 <ptr_get+0x1>
     25c:	be 01       	movw	r22, r28
     25e:	6f 5f       	subi	r22, 0xFF	; 255
     260:	7f 4f       	sbci	r23, 0xFF	; 255
     262:	19 95       	eicall
	return c;
     264:	89 81       	ldd	r24, Y+1	; 0x01
}
     266:	08 2e       	mov	r0, r24
     268:	00 0c       	add	r0, r0
     26a:	99 0b       	sbc	r25, r25
     26c:	0f 90       	pop	r0
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     274:	fc 01       	movw	r30, r24
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	95 ff       	sbrs	r25, 5
     27a:	fd cf       	rjmp	.-6      	; 0x276 <usart_putchar+0x2>
     27c:	60 83       	st	Z, r22
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	08 95       	ret

00000284 <usart_getchar>:
     284:	fc 01       	movw	r30, r24
     286:	91 81       	ldd	r25, Z+1	; 0x01
     288:	99 23       	and	r25, r25
     28a:	ec f7       	brge	.-6      	; 0x286 <usart_getchar+0x2>
     28c:	80 81       	ld	r24, Z
     28e:	08 95       	ret

00000290 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     290:	2f 92       	push	r2
     292:	3f 92       	push	r3
     294:	4f 92       	push	r4
     296:	5f 92       	push	r5
     298:	6f 92       	push	r6
     29a:	7f 92       	push	r7
     29c:	8f 92       	push	r8
     29e:	9f 92       	push	r9
     2a0:	af 92       	push	r10
     2a2:	bf 92       	push	r11
     2a4:	cf 92       	push	r12
     2a6:	df 92       	push	r13
     2a8:	ef 92       	push	r14
     2aa:	ff 92       	push	r15
     2ac:	0f 93       	push	r16
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	1c 01       	movw	r2, r24
     2b4:	2a 01       	movw	r4, r20
     2b6:	3b 01       	movw	r6, r22
     2b8:	48 01       	movw	r8, r16
     2ba:	59 01       	movw	r10, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     2bc:	d9 01       	movw	r26, r18
     2be:	c8 01       	movw	r24, r16
     2c0:	68 94       	set
     2c2:	12 f8       	bld	r1, 2
     2c4:	b6 95       	lsr	r27
     2c6:	a7 95       	ror	r26
     2c8:	97 95       	ror	r25
     2ca:	87 95       	ror	r24
     2cc:	16 94       	lsr	r1
     2ce:	d1 f7       	brne	.-12     	; 0x2c4 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     2d0:	b9 01       	movw	r22, r18
     2d2:	a8 01       	movw	r20, r16
     2d4:	03 2e       	mov	r0, r19
     2d6:	36 e1       	ldi	r19, 0x16	; 22
     2d8:	76 95       	lsr	r23
     2da:	67 95       	ror	r22
     2dc:	57 95       	ror	r21
     2de:	47 95       	ror	r20
     2e0:	3a 95       	dec	r19
     2e2:	d1 f7       	brne	.-12     	; 0x2d8 <usart_set_baudrate+0x48>
     2e4:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     2e6:	f1 01       	movw	r30, r2
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	22 fd       	sbrc	r18, 2
     2ec:	08 c0       	rjmp	.+16     	; 0x2fe <usart_set_baudrate+0x6e>
		max_rate /= 2;
     2ee:	b6 95       	lsr	r27
     2f0:	a7 95       	ror	r26
     2f2:	97 95       	ror	r25
     2f4:	87 95       	ror	r24
		min_rate /= 2;
     2f6:	76 95       	lsr	r23
     2f8:	67 95       	ror	r22
     2fa:	57 95       	ror	r21
     2fc:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     2fe:	84 15       	cp	r24, r4
     300:	95 05       	cpc	r25, r5
     302:	a6 05       	cpc	r26, r6
     304:	b7 05       	cpc	r27, r7
     306:	08 f4       	brcc	.+2      	; 0x30a <usart_set_baudrate+0x7a>
     308:	ae c0       	rjmp	.+348    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     30a:	44 16       	cp	r4, r20
     30c:	55 06       	cpc	r5, r21
     30e:	66 06       	cpc	r6, r22
     310:	77 06       	cpc	r7, r23
     312:	08 f4       	brcc	.+2      	; 0x316 <usart_set_baudrate+0x86>
     314:	aa c0       	rjmp	.+340    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     316:	f1 01       	movw	r30, r2
     318:	84 81       	ldd	r24, Z+4	; 0x04
     31a:	82 fd       	sbrc	r24, 2
     31c:	04 c0       	rjmp	.+8      	; 0x326 <usart_set_baudrate+0x96>
		baud *= 2;
     31e:	44 0c       	add	r4, r4
     320:	55 1c       	adc	r5, r5
     322:	66 1c       	adc	r6, r6
     324:	77 1c       	adc	r7, r7
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     326:	c5 01       	movw	r24, r10
     328:	b4 01       	movw	r22, r8
     32a:	a3 01       	movw	r20, r6
     32c:	92 01       	movw	r18, r4
     32e:	0e 94 9a 13 	call	0x2734	; 0x2734 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     332:	2f 3f       	cpi	r18, 0xFF	; 255
     334:	31 05       	cpc	r19, r1
     336:	41 05       	cpc	r20, r1
     338:	51 05       	cpc	r21, r1
     33a:	08 f4       	brcc	.+2      	; 0x33e <usart_set_baudrate+0xae>
     33c:	98 c0       	rjmp	.+304    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     33e:	c1 2c       	mov	r12, r1
     340:	d1 2c       	mov	r13, r1
     342:	76 01       	movw	r14, r12
     344:	ca 94       	dec	r12
     346:	c9 ef       	ldi	r28, 0xF9	; 249
     348:	05 c0       	rjmp	.+10     	; 0x354 <usart_set_baudrate+0xc4>
     34a:	2c 15       	cp	r18, r12
     34c:	3d 05       	cpc	r19, r13
     34e:	4e 05       	cpc	r20, r14
     350:	5f 05       	cpc	r21, r15
     352:	68 f0       	brcs	.+26     	; 0x36e <usart_set_baudrate+0xde>
			break;
		}

		limit <<= 1;
     354:	cc 0c       	add	r12, r12
     356:	dd 1c       	adc	r13, r13
     358:	ee 1c       	adc	r14, r14
     35a:	ff 1c       	adc	r15, r15

		if (exp < -3) {
     35c:	cd 3f       	cpi	r28, 0xFD	; 253
     35e:	14 f4       	brge	.+4      	; 0x364 <usart_set_baudrate+0xd4>
			limit |= 1;
     360:	68 94       	set
     362:	c0 f8       	bld	r12, 0
     364:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     366:	c7 30       	cpi	r28, 0x07	; 7
     368:	81 f7       	brne	.-32     	; 0x34a <usart_set_baudrate+0xba>
     36a:	8c 2f       	mov	r24, r28
     36c:	56 c0       	rjmp	.+172    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     36e:	8c 2f       	mov	r24, r28
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     370:	cc 23       	and	r28, r28
     372:	0c f0       	brlt	.+2      	; 0x376 <usart_set_baudrate+0xe6>
     374:	52 c0       	rjmp	.+164    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     376:	d3 01       	movw	r26, r6
     378:	c2 01       	movw	r24, r4
     37a:	88 0f       	add	r24, r24
     37c:	99 1f       	adc	r25, r25
     37e:	aa 1f       	adc	r26, r26
     380:	bb 1f       	adc	r27, r27
     382:	88 0f       	add	r24, r24
     384:	99 1f       	adc	r25, r25
     386:	aa 1f       	adc	r26, r26
     388:	bb 1f       	adc	r27, r27
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	aa 1f       	adc	r26, r26
     390:	bb 1f       	adc	r27, r27
     392:	85 01       	movw	r16, r10
     394:	74 01       	movw	r14, r8
     396:	e8 1a       	sub	r14, r24
     398:	f9 0a       	sbc	r15, r25
     39a:	0a 0b       	sbc	r16, r26
     39c:	1b 0b       	sbc	r17, r27
     39e:	d8 01       	movw	r26, r16
     3a0:	c7 01       	movw	r24, r14
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     3a2:	ce 3f       	cpi	r28, 0xFE	; 254
     3a4:	f4 f4       	brge	.+60     	; 0x3e2 <usart_set_baudrate+0x152>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     3a6:	2d ef       	ldi	r18, 0xFD	; 253
     3a8:	3f ef       	ldi	r19, 0xFF	; 255
     3aa:	2c 1b       	sub	r18, r28
     3ac:	31 09       	sbc	r19, r1
     3ae:	c7 fd       	sbrc	r28, 7
     3b0:	33 95       	inc	r19
     3b2:	04 c0       	rjmp	.+8      	; 0x3bc <usart_set_baudrate+0x12c>
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	aa 1f       	adc	r26, r26
     3ba:	bb 1f       	adc	r27, r27
     3bc:	2a 95       	dec	r18
     3be:	d2 f7       	brpl	.-12     	; 0x3b4 <usart_set_baudrate+0x124>
     3c0:	73 01       	movw	r14, r6
     3c2:	62 01       	movw	r12, r4
     3c4:	f6 94       	lsr	r15
     3c6:	e7 94       	ror	r14
     3c8:	d7 94       	ror	r13
     3ca:	c7 94       	ror	r12
     3cc:	bc 01       	movw	r22, r24
     3ce:	cd 01       	movw	r24, r26
     3d0:	6c 0d       	add	r22, r12
     3d2:	7d 1d       	adc	r23, r13
     3d4:	8e 1d       	adc	r24, r14
     3d6:	9f 1d       	adc	r25, r15
     3d8:	a3 01       	movw	r20, r6
     3da:	92 01       	movw	r18, r4
     3dc:	0e 94 9a 13 	call	0x2734	; 0x2734 <__udivmodsi4>
     3e0:	38 c0       	rjmp	.+112    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		} else {
			baud <<= exp + 3;
     3e2:	23 e0       	ldi	r18, 0x03	; 3
     3e4:	2c 0f       	add	r18, r28
     3e6:	83 01       	movw	r16, r6
     3e8:	72 01       	movw	r14, r4
     3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <usart_set_baudrate+0x164>
     3ec:	ee 0c       	add	r14, r14
     3ee:	ff 1c       	adc	r15, r15
     3f0:	00 1f       	adc	r16, r16
     3f2:	11 1f       	adc	r17, r17
     3f4:	2a 95       	dec	r18
     3f6:	d2 f7       	brpl	.-12     	; 0x3ec <usart_set_baudrate+0x15c>
     3f8:	a8 01       	movw	r20, r16
     3fa:	97 01       	movw	r18, r14
			div = (cpu_hz + baud / 2) / baud;
     3fc:	67 01       	movw	r12, r14
     3fe:	78 01       	movw	r14, r16
     400:	f6 94       	lsr	r15
     402:	e7 94       	ror	r14
     404:	d7 94       	ror	r13
     406:	c7 94       	ror	r12
     408:	bc 01       	movw	r22, r24
     40a:	cd 01       	movw	r24, r26
     40c:	6c 0d       	add	r22, r12
     40e:	7d 1d       	adc	r23, r13
     410:	8e 1d       	adc	r24, r14
     412:	9f 1d       	adc	r25, r15
     414:	0e 94 9a 13 	call	0x2734	; 0x2734 <__udivmodsi4>
     418:	1c c0       	rjmp	.+56     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     41a:	8d 5f       	subi	r24, 0xFD	; 253
     41c:	a3 01       	movw	r20, r6
     41e:	92 01       	movw	r18, r4
     420:	04 c0       	rjmp	.+8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     422:	22 0f       	add	r18, r18
     424:	33 1f       	adc	r19, r19
     426:	44 1f       	adc	r20, r20
     428:	55 1f       	adc	r21, r21
     42a:	8a 95       	dec	r24
     42c:	d2 f7       	brpl	.-12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		div = (cpu_hz + baud / 2) / baud - 1;
     42e:	da 01       	movw	r26, r20
     430:	c9 01       	movw	r24, r18
     432:	b6 95       	lsr	r27
     434:	a7 95       	ror	r26
     436:	97 95       	ror	r25
     438:	87 95       	ror	r24
     43a:	bc 01       	movw	r22, r24
     43c:	cd 01       	movw	r24, r26
     43e:	68 0d       	add	r22, r8
     440:	79 1d       	adc	r23, r9
     442:	8a 1d       	adc	r24, r10
     444:	9b 1d       	adc	r25, r11
     446:	0e 94 9a 13 	call	0x2734	; 0x2734 <__udivmodsi4>
     44a:	21 50       	subi	r18, 0x01	; 1
     44c:	31 09       	sbc	r19, r1
     44e:	41 09       	sbc	r20, r1
     450:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     452:	83 2f       	mov	r24, r19
     454:	8f 70       	andi	r24, 0x0F	; 15
     456:	c2 95       	swap	r28
     458:	c0 7f       	andi	r28, 0xF0	; 240
     45a:	c8 2b       	or	r28, r24
     45c:	f1 01       	movw	r30, r2
     45e:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     460:	26 83       	std	Z+6, r18	; 0x06

	return true;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	1c c0       	rjmp	.+56     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	1a c0       	rjmp	.+52     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	18 c0       	rjmp	.+48     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     46e:	d3 01       	movw	r26, r6
     470:	c2 01       	movw	r24, r4
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	aa 1f       	adc	r26, r26
     478:	bb 1f       	adc	r27, r27
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	aa 1f       	adc	r26, r26
     480:	bb 1f       	adc	r27, r27
     482:	88 0f       	add	r24, r24
     484:	99 1f       	adc	r25, r25
     486:	aa 1f       	adc	r26, r26
     488:	bb 1f       	adc	r27, r27
     48a:	85 01       	movw	r16, r10
     48c:	74 01       	movw	r14, r8
     48e:	e8 1a       	sub	r14, r24
     490:	f9 0a       	sbc	r15, r25
     492:	0a 0b       	sbc	r16, r26
     494:	1b 0b       	sbc	r17, r27
     496:	d8 01       	movw	r26, r16
     498:	c7 01       	movw	r24, r14

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     49a:	c9 ef       	ldi	r28, 0xF9	; 249
     49c:	84 cf       	rjmp	.-248    	; 0x3a6 <usart_set_baudrate+0x116>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     49e:	cf 91       	pop	r28
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	ff 90       	pop	r15
     4a6:	ef 90       	pop	r14
     4a8:	df 90       	pop	r13
     4aa:	cf 90       	pop	r12
     4ac:	bf 90       	pop	r11
     4ae:	af 90       	pop	r10
     4b0:	9f 90       	pop	r9
     4b2:	8f 90       	pop	r8
     4b4:	7f 90       	pop	r7
     4b6:	6f 90       	pop	r6
     4b8:	5f 90       	pop	r5
     4ba:	4f 90       	pop	r4
     4bc:	3f 90       	pop	r3
     4be:	2f 90       	pop	r2
     4c0:	08 95       	ret

000004c2 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	ec 01       	movw	r28, r24
     4cc:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     4ce:	00 97       	sbiw	r24, 0x00	; 0
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <usart_init_rs232+0x12>
     4d2:	36 c1       	rjmp	.+620    	; 0x740 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     4d4:	80 3c       	cpi	r24, 0xC0	; 192
     4d6:	91 05       	cpc	r25, r1
     4d8:	21 f4       	brne	.+8      	; 0x4e2 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     4da:	60 e1       	ldi	r22, 0x10	; 16
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	41 d4       	rcall	.+2178   	; 0xd62 <sysclk_enable_module>
     4e0:	2f c1       	rjmp	.+606    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     4e2:	c0 34       	cpi	r28, 0x40	; 64
     4e4:	84 e0       	ldi	r24, 0x04	; 4
     4e6:	d8 07       	cpc	r29, r24
     4e8:	21 f4       	brne	.+8      	; 0x4f2 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     4ea:	68 e0       	ldi	r22, 0x08	; 8
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	39 d4       	rcall	.+2162   	; 0xd62 <sysclk_enable_module>
     4f0:	27 c1       	rjmp	.+590    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     4f2:	c1 15       	cp	r28, r1
     4f4:	e4 e0       	ldi	r30, 0x04	; 4
     4f6:	de 07       	cpc	r29, r30
     4f8:	21 f4       	brne	.+8      	; 0x502 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     4fa:	64 e0       	ldi	r22, 0x04	; 4
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	31 d4       	rcall	.+2146   	; 0xd62 <sysclk_enable_module>
     500:	1f c1       	rjmp	.+574    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     502:	c0 38       	cpi	r28, 0x80	; 128
     504:	f1 e0       	ldi	r31, 0x01	; 1
     506:	df 07       	cpc	r29, r31
     508:	21 f4       	brne	.+8      	; 0x512 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     50a:	62 e0       	ldi	r22, 0x02	; 2
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	29 d4       	rcall	.+2130   	; 0xd62 <sysclk_enable_module>
     510:	17 c1       	rjmp	.+558    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     512:	c1 15       	cp	r28, r1
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	d8 07       	cpc	r29, r24
     518:	21 f4       	brne	.+8      	; 0x522 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	21 d4       	rcall	.+2114   	; 0xd62 <sysclk_enable_module>
     520:	0f c1       	rjmp	.+542    	; 0x740 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     522:	c0 38       	cpi	r28, 0x80	; 128
     524:	e3 e0       	ldi	r30, 0x03	; 3
     526:	de 07       	cpc	r29, r30
     528:	21 f4       	brne	.+8      	; 0x532 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	19 d4       	rcall	.+2098   	; 0xd62 <sysclk_enable_module>
     530:	07 c1       	rjmp	.+526    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     532:	c0 39       	cpi	r28, 0x90	; 144
     534:	f3 e0       	ldi	r31, 0x03	; 3
     536:	df 07       	cpc	r29, r31
     538:	21 f4       	brne	.+8      	; 0x542 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	82 e0       	ldi	r24, 0x02	; 2
     53e:	11 d4       	rcall	.+2082   	; 0xd62 <sysclk_enable_module>
     540:	ff c0       	rjmp	.+510    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     542:	c1 15       	cp	r28, r1
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	d8 07       	cpc	r29, r24
     548:	21 f4       	brne	.+8      	; 0x552 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     54a:	62 e0       	ldi	r22, 0x02	; 2
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	09 d4       	rcall	.+2066   	; 0xd62 <sysclk_enable_module>
     550:	f7 c0       	rjmp	.+494    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     552:	c0 34       	cpi	r28, 0x40	; 64
     554:	e2 e0       	ldi	r30, 0x02	; 2
     556:	de 07       	cpc	r29, r30
     558:	21 f4       	brne	.+8      	; 0x562 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     55a:	62 e0       	ldi	r22, 0x02	; 2
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	01 d4       	rcall	.+2050   	; 0xd62 <sysclk_enable_module>
     560:	ef c0       	rjmp	.+478    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     562:	c1 15       	cp	r28, r1
     564:	f3 e0       	ldi	r31, 0x03	; 3
     566:	df 07       	cpc	r29, r31
     568:	21 f4       	brne	.+8      	; 0x572 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     56a:	64 e0       	ldi	r22, 0x04	; 4
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	f9 d3       	rcall	.+2034   	; 0xd62 <sysclk_enable_module>
     570:	e7 c0       	rjmp	.+462    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     572:	c0 32       	cpi	r28, 0x20	; 32
     574:	83 e0       	ldi	r24, 0x03	; 3
     576:	d8 07       	cpc	r29, r24
     578:	21 f4       	brne	.+8      	; 0x582 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     57a:	64 e0       	ldi	r22, 0x04	; 4
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	f1 d3       	rcall	.+2018   	; 0xd62 <sysclk_enable_module>
     580:	df c0       	rjmp	.+446    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     582:	c1 15       	cp	r28, r1
     584:	e8 e0       	ldi	r30, 0x08	; 8
     586:	de 07       	cpc	r29, r30
     588:	21 f4       	brne	.+8      	; 0x592 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	e9 d3       	rcall	.+2002   	; 0xd62 <sysclk_enable_module>
     590:	d7 c0       	rjmp	.+430    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     592:	c1 15       	cp	r28, r1
     594:	f9 e0       	ldi	r31, 0x09	; 9
     596:	df 07       	cpc	r29, r31
     598:	21 f4       	brne	.+8      	; 0x5a2 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	84 e0       	ldi	r24, 0x04	; 4
     59e:	e1 d3       	rcall	.+1986   	; 0xd62 <sysclk_enable_module>
     5a0:	cf c0       	rjmp	.+414    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     5a2:	c1 15       	cp	r28, r1
     5a4:	8a e0       	ldi	r24, 0x0A	; 10
     5a6:	d8 07       	cpc	r29, r24
     5a8:	21 f4       	brne	.+8      	; 0x5b2 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     5aa:	61 e0       	ldi	r22, 0x01	; 1
     5ac:	85 e0       	ldi	r24, 0x05	; 5
     5ae:	d9 d3       	rcall	.+1970   	; 0xd62 <sysclk_enable_module>
     5b0:	c7 c0       	rjmp	.+398    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     5b2:	c1 15       	cp	r28, r1
     5b4:	eb e0       	ldi	r30, 0x0B	; 11
     5b6:	de 07       	cpc	r29, r30
     5b8:	21 f4       	brne	.+8      	; 0x5c2 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     5ba:	61 e0       	ldi	r22, 0x01	; 1
     5bc:	86 e0       	ldi	r24, 0x06	; 6
     5be:	d1 d3       	rcall	.+1954   	; 0xd62 <sysclk_enable_module>
     5c0:	bf c0       	rjmp	.+382    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     5c2:	c0 34       	cpi	r28, 0x40	; 64
     5c4:	f8 e0       	ldi	r31, 0x08	; 8
     5c6:	df 07       	cpc	r29, r31
     5c8:	21 f4       	brne	.+8      	; 0x5d2 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     5ca:	62 e0       	ldi	r22, 0x02	; 2
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	c9 d3       	rcall	.+1938   	; 0xd62 <sysclk_enable_module>
     5d0:	b7 c0       	rjmp	.+366    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     5d2:	c0 34       	cpi	r28, 0x40	; 64
     5d4:	89 e0       	ldi	r24, 0x09	; 9
     5d6:	d8 07       	cpc	r29, r24
     5d8:	21 f4       	brne	.+8      	; 0x5e2 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     5da:	62 e0       	ldi	r22, 0x02	; 2
     5dc:	84 e0       	ldi	r24, 0x04	; 4
     5de:	c1 d3       	rcall	.+1922   	; 0xd62 <sysclk_enable_module>
     5e0:	af c0       	rjmp	.+350    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     5e2:	c0 34       	cpi	r28, 0x40	; 64
     5e4:	ea e0       	ldi	r30, 0x0A	; 10
     5e6:	de 07       	cpc	r29, r30
     5e8:	21 f4       	brne	.+8      	; 0x5f2 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     5ea:	62 e0       	ldi	r22, 0x02	; 2
     5ec:	85 e0       	ldi	r24, 0x05	; 5
     5ee:	b9 d3       	rcall	.+1906   	; 0xd62 <sysclk_enable_module>
     5f0:	a7 c0       	rjmp	.+334    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     5f2:	c0 34       	cpi	r28, 0x40	; 64
     5f4:	fb e0       	ldi	r31, 0x0B	; 11
     5f6:	df 07       	cpc	r29, r31
     5f8:	21 f4       	brne	.+8      	; 0x602 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     5fa:	62 e0       	ldi	r22, 0x02	; 2
     5fc:	86 e0       	ldi	r24, 0x06	; 6
     5fe:	b1 d3       	rcall	.+1890   	; 0xd62 <sysclk_enable_module>
     600:	9f c0       	rjmp	.+318    	; 0x740 <usart_init_rs232+0x27e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     602:	c0 39       	cpi	r28, 0x90	; 144
     604:	88 e0       	ldi	r24, 0x08	; 8
     606:	d8 07       	cpc	r29, r24
     608:	21 f4       	brne	.+8      	; 0x612 <usart_init_rs232+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     60a:	64 e0       	ldi	r22, 0x04	; 4
     60c:	83 e0       	ldi	r24, 0x03	; 3
     60e:	a9 d3       	rcall	.+1874   	; 0xd62 <sysclk_enable_module>
     610:	97 c0       	rjmp	.+302    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     612:	c0 39       	cpi	r28, 0x90	; 144
     614:	e9 e0       	ldi	r30, 0x09	; 9
     616:	de 07       	cpc	r29, r30
     618:	21 f4       	brne	.+8      	; 0x622 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     61a:	64 e0       	ldi	r22, 0x04	; 4
     61c:	84 e0       	ldi	r24, 0x04	; 4
     61e:	a1 d3       	rcall	.+1858   	; 0xd62 <sysclk_enable_module>
     620:	8f c0       	rjmp	.+286    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     622:	c0 39       	cpi	r28, 0x90	; 144
     624:	fa e0       	ldi	r31, 0x0A	; 10
     626:	df 07       	cpc	r29, r31
     628:	21 f4       	brne	.+8      	; 0x632 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     62a:	64 e0       	ldi	r22, 0x04	; 4
     62c:	85 e0       	ldi	r24, 0x05	; 5
     62e:	99 d3       	rcall	.+1842   	; 0xd62 <sysclk_enable_module>
     630:	87 c0       	rjmp	.+270    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     632:	c0 39       	cpi	r28, 0x90	; 144
     634:	8b e0       	ldi	r24, 0x0B	; 11
     636:	d8 07       	cpc	r29, r24
     638:	21 f4       	brne	.+8      	; 0x642 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     63a:	64 e0       	ldi	r22, 0x04	; 4
     63c:	86 e0       	ldi	r24, 0x06	; 6
     63e:	91 d3       	rcall	.+1826   	; 0xd62 <sysclk_enable_module>
     640:	7f c0       	rjmp	.+254    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     642:	c0 3c       	cpi	r28, 0xC0	; 192
     644:	e8 e0       	ldi	r30, 0x08	; 8
     646:	de 07       	cpc	r29, r30
     648:	21 f4       	brne	.+8      	; 0x652 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     64a:	68 e0       	ldi	r22, 0x08	; 8
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	89 d3       	rcall	.+1810   	; 0xd62 <sysclk_enable_module>
     650:	77 c0       	rjmp	.+238    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     652:	c0 3c       	cpi	r28, 0xC0	; 192
     654:	f9 e0       	ldi	r31, 0x09	; 9
     656:	df 07       	cpc	r29, r31
     658:	21 f4       	brne	.+8      	; 0x662 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     65a:	68 e0       	ldi	r22, 0x08	; 8
     65c:	84 e0       	ldi	r24, 0x04	; 4
     65e:	81 d3       	rcall	.+1794   	; 0xd62 <sysclk_enable_module>
     660:	6f c0       	rjmp	.+222    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     662:	c0 3c       	cpi	r28, 0xC0	; 192
     664:	8a e0       	ldi	r24, 0x0A	; 10
     666:	d8 07       	cpc	r29, r24
     668:	21 f4       	brne	.+8      	; 0x672 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     66a:	68 e0       	ldi	r22, 0x08	; 8
     66c:	85 e0       	ldi	r24, 0x05	; 5
     66e:	79 d3       	rcall	.+1778   	; 0xd62 <sysclk_enable_module>
     670:	67 c0       	rjmp	.+206    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     672:	c0 3c       	cpi	r28, 0xC0	; 192
     674:	eb e0       	ldi	r30, 0x0B	; 11
     676:	de 07       	cpc	r29, r30
     678:	21 f4       	brne	.+8      	; 0x682 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     67a:	68 e0       	ldi	r22, 0x08	; 8
     67c:	86 e0       	ldi	r24, 0x06	; 6
     67e:	71 d3       	rcall	.+1762   	; 0xd62 <sysclk_enable_module>
     680:	5f c0       	rjmp	.+190    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     682:	c0 3a       	cpi	r28, 0xA0	; 160
     684:	f8 e0       	ldi	r31, 0x08	; 8
     686:	df 07       	cpc	r29, r31
     688:	21 f4       	brne	.+8      	; 0x692 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     68a:	60 e1       	ldi	r22, 0x10	; 16
     68c:	83 e0       	ldi	r24, 0x03	; 3
     68e:	69 d3       	rcall	.+1746   	; 0xd62 <sysclk_enable_module>
     690:	57 c0       	rjmp	.+174    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     692:	c0 3a       	cpi	r28, 0xA0	; 160
     694:	89 e0       	ldi	r24, 0x09	; 9
     696:	d8 07       	cpc	r29, r24
     698:	21 f4       	brne	.+8      	; 0x6a2 <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     69a:	60 e1       	ldi	r22, 0x10	; 16
     69c:	84 e0       	ldi	r24, 0x04	; 4
     69e:	61 d3       	rcall	.+1730   	; 0xd62 <sysclk_enable_module>
     6a0:	4f c0       	rjmp	.+158    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     6a2:	c0 3a       	cpi	r28, 0xA0	; 160
     6a4:	ea e0       	ldi	r30, 0x0A	; 10
     6a6:	de 07       	cpc	r29, r30
     6a8:	21 f4       	brne	.+8      	; 0x6b2 <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     6aa:	60 e1       	ldi	r22, 0x10	; 16
     6ac:	85 e0       	ldi	r24, 0x05	; 5
     6ae:	59 d3       	rcall	.+1714   	; 0xd62 <sysclk_enable_module>
     6b0:	47 c0       	rjmp	.+142    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     6b2:	c0 3a       	cpi	r28, 0xA0	; 160
     6b4:	fb e0       	ldi	r31, 0x0B	; 11
     6b6:	df 07       	cpc	r29, r31
     6b8:	21 f4       	brne	.+8      	; 0x6c2 <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     6ba:	60 e1       	ldi	r22, 0x10	; 16
     6bc:	86 e0       	ldi	r24, 0x06	; 6
     6be:	51 d3       	rcall	.+1698   	; 0xd62 <sysclk_enable_module>
     6c0:	3f c0       	rjmp	.+126    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     6c2:	c0 3b       	cpi	r28, 0xB0	; 176
     6c4:	88 e0       	ldi	r24, 0x08	; 8
     6c6:	d8 07       	cpc	r29, r24
     6c8:	21 f4       	brne	.+8      	; 0x6d2 <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     6ca:	60 e2       	ldi	r22, 0x20	; 32
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	49 d3       	rcall	.+1682   	; 0xd62 <sysclk_enable_module>
     6d0:	37 c0       	rjmp	.+110    	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     6d2:	c0 3b       	cpi	r28, 0xB0	; 176
     6d4:	e9 e0       	ldi	r30, 0x09	; 9
     6d6:	de 07       	cpc	r29, r30
     6d8:	21 f4       	brne	.+8      	; 0x6e2 <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     6da:	60 e2       	ldi	r22, 0x20	; 32
     6dc:	84 e0       	ldi	r24, 0x04	; 4
     6de:	41 d3       	rcall	.+1666   	; 0xd62 <sysclk_enable_module>
     6e0:	2f c0       	rjmp	.+94     	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     6e2:	c0 3b       	cpi	r28, 0xB0	; 176
     6e4:	fa e0       	ldi	r31, 0x0A	; 10
     6e6:	df 07       	cpc	r29, r31
     6e8:	21 f4       	brne	.+8      	; 0x6f2 <usart_init_rs232+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     6ea:	60 e2       	ldi	r22, 0x20	; 32
     6ec:	85 e0       	ldi	r24, 0x05	; 5
     6ee:	39 d3       	rcall	.+1650   	; 0xd62 <sysclk_enable_module>
     6f0:	27 c0       	rjmp	.+78     	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     6f2:	c0 3b       	cpi	r28, 0xB0	; 176
     6f4:	8b e0       	ldi	r24, 0x0B	; 11
     6f6:	d8 07       	cpc	r29, r24
     6f8:	21 f4       	brne	.+8      	; 0x702 <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     6fa:	60 e2       	ldi	r22, 0x20	; 32
     6fc:	86 e0       	ldi	r24, 0x06	; 6
     6fe:	31 d3       	rcall	.+1634   	; 0xd62 <sysclk_enable_module>
     700:	1f c0       	rjmp	.+62     	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     702:	c0 38       	cpi	r28, 0x80	; 128
     704:	e4 e0       	ldi	r30, 0x04	; 4
     706:	de 07       	cpc	r29, r30
     708:	21 f4       	brne	.+8      	; 0x712 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     70a:	60 e4       	ldi	r22, 0x40	; 64
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	29 d3       	rcall	.+1618   	; 0xd62 <sysclk_enable_module>
     710:	17 c0       	rjmp	.+46     	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     712:	c0 39       	cpi	r28, 0x90	; 144
     714:	f4 e0       	ldi	r31, 0x04	; 4
     716:	df 07       	cpc	r29, r31
     718:	21 f4       	brne	.+8      	; 0x722 <usart_init_rs232+0x260>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     71a:	60 e4       	ldi	r22, 0x40	; 64
     71c:	84 e0       	ldi	r24, 0x04	; 4
     71e:	21 d3       	rcall	.+1602   	; 0xd62 <sysclk_enable_module>
     720:	0f c0       	rjmp	.+30     	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     722:	c0 3a       	cpi	r28, 0xA0	; 160
     724:	84 e0       	ldi	r24, 0x04	; 4
     726:	d8 07       	cpc	r29, r24
     728:	21 f4       	brne	.+8      	; 0x732 <usart_init_rs232+0x270>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     72a:	60 e4       	ldi	r22, 0x40	; 64
     72c:	85 e0       	ldi	r24, 0x05	; 5
     72e:	19 d3       	rcall	.+1586   	; 0xd62 <sysclk_enable_module>
     730:	07 c0       	rjmp	.+14     	; 0x740 <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     732:	c0 3b       	cpi	r28, 0xB0	; 176
     734:	e4 e0       	ldi	r30, 0x04	; 4
     736:	de 07       	cpc	r29, r30
     738:	19 f4       	brne	.+6      	; 0x740 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     73a:	60 e4       	ldi	r22, 0x40	; 64
     73c:	86 e0       	ldi	r24, 0x06	; 6
     73e:	11 d3       	rcall	.+1570   	; 0xd62 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     740:	8d 81       	ldd	r24, Y+5	; 0x05
     742:	8f 73       	andi	r24, 0x3F	; 63
     744:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     746:	f8 01       	movw	r30, r16
     748:	94 81       	ldd	r25, Z+4	; 0x04
     74a:	85 81       	ldd	r24, Z+5	; 0x05
     74c:	89 2b       	or	r24, r25
     74e:	96 81       	ldd	r25, Z+6	; 0x06
     750:	91 11       	cpse	r25, r1
     752:	98 e0       	ldi	r25, 0x08	; 8
     754:	89 2b       	or	r24, r25
     756:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     758:	f8 01       	movw	r30, r16
     75a:	40 81       	ld	r20, Z
     75c:	51 81       	ldd	r21, Z+1	; 0x01
     75e:	62 81       	ldd	r22, Z+2	; 0x02
     760:	73 81       	ldd	r23, Z+3	; 0x03
     762:	00 e0       	ldi	r16, 0x00	; 0
     764:	18 e4       	ldi	r17, 0x48	; 72
     766:	28 ee       	ldi	r18, 0xE8	; 232
     768:	31 e0       	ldi	r19, 0x01	; 1
     76a:	ce 01       	movw	r24, r28
     76c:	91 dd       	rcall	.-1246   	; 0x290 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     76e:	9c 81       	ldd	r25, Y+4	; 0x04
     770:	98 60       	ori	r25, 0x08	; 8
     772:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     774:	9c 81       	ldd	r25, Y+4	; 0x04
     776:	90 61       	ori	r25, 0x10	; 16
     778:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	08 95       	ret

00000784 <initLED>:
	TCE0.CCB = TCE0.CCA;
	TCE0.CCC = TCE0.CCA;
	TCE0.CCD = TCE0.CCA;
	
	TCE0.CTRLA = 0b00000111; //prescaler 1024
}
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	85 e0       	ldi	r24, 0x05	; 5
     788:	ec d2       	rcall	.+1496   	; 0xd62 <sysclk_enable_module>
     78a:	64 e0       	ldi	r22, 0x04	; 4
     78c:	85 e0       	ldi	r24, 0x05	; 5
     78e:	e9 d2       	rcall	.+1490   	; 0xd62 <sysclk_enable_module>
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
     796:	e0 e0       	ldi	r30, 0x00	; 0
     798:	fa e0       	ldi	r31, 0x0A	; 10
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	80 83       	st	Z, r24
     79e:	83 ef       	ldi	r24, 0xF3	; 243
     7a0:	81 83       	std	Z+1, r24	; 0x01
     7a2:	08 95       	ret

000007a4 <flashLED>:
     7a4:	4f 92       	push	r4
     7a6:	5f 92       	push	r5
     7a8:	6f 92       	push	r6
     7aa:	7f 92       	push	r7
     7ac:	8f 92       	push	r8
     7ae:	9f 92       	push	r9
     7b0:	af 92       	push	r10
     7b2:	bf 92       	push	r11
     7b4:	cf 92       	push	r12
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	68 97       	sbiw	r28, 0x18	; 24
     7ca:	cd bf       	out	0x3d, r28	; 61
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	7c 01       	movw	r14, r24
     7d0:	00 e0       	ldi	r16, 0x00	; 0
     7d2:	1a e0       	ldi	r17, 0x0A	; 10
     7d4:	f8 01       	movw	r30, r16
     7d6:	10 a2       	std	Z+32, r1	; 0x20
     7d8:	11 a2       	std	Z+33, r1	; 0x21
     7da:	80 e1       	ldi	r24, 0x10	; 16
     7dc:	ed e0       	ldi	r30, 0x0D	; 13
     7de:	f0 e2       	ldi	r31, 0x20	; 32
     7e0:	de 01       	movw	r26, r28
     7e2:	11 96       	adiw	r26, 0x01	; 1
     7e4:	01 90       	ld	r0, Z+
     7e6:	0d 92       	st	X+, r0
     7e8:	8a 95       	dec	r24
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <flashLED+0x40>
     7ec:	88 e0       	ldi	r24, 0x08	; 8
     7ee:	ed e1       	ldi	r30, 0x1D	; 29
     7f0:	f0 e2       	ldi	r31, 0x20	; 32
     7f2:	de 01       	movw	r26, r28
     7f4:	51 96       	adiw	r26, 0x11	; 17
     7f6:	01 90       	ld	r0, Z+
     7f8:	0d 92       	st	X+, r0
     7fa:	8a 95       	dec	r24
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <flashLED+0x52>
     7fe:	f7 01       	movw	r30, r14
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	8c 0f       	add	r24, r28
     80e:	9d 1f       	adc	r25, r29
     810:	e8 0f       	add	r30, r24
     812:	f9 1f       	adc	r31, r25
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	40 e8       	ldi	r20, 0x80	; 128
     81a:	54 e4       	ldi	r21, 0x44	; 68
     81c:	60 81       	ld	r22, Z
     81e:	71 81       	ldd	r23, Z+1	; 0x01
     820:	82 81       	ldd	r24, Z+2	; 0x02
     822:	93 81       	ldd	r25, Z+3	; 0x03
     824:	0e 94 37 13 	call	0x266e	; 0x266e <__mulsf3>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	74 e2       	ldi	r23, 0x24	; 36
     830:	84 ef       	ldi	r24, 0xF4	; 244
     832:	9b e4       	ldi	r25, 0x4B	; 75
     834:	0e 94 15 12 	call	0x242a	; 0x242a <__divsf3>
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e8       	ldi	r20, 0x80	; 128
     83e:	5f e3       	ldi	r21, 0x3F	; 63
     840:	0e 94 b0 11 	call	0x2360	; 0x2360 <__subsf3>
     844:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__fixunssfsi>
     848:	f8 01       	movw	r30, r16
     84a:	66 a3       	std	Z+38, r22	; 0x26
     84c:	77 a3       	std	Z+39, r23	; 0x27
     84e:	66 a1       	ldd	r22, Z+38	; 0x26
     850:	77 a1       	ldd	r23, Z+39	; 0x27
     852:	c6 a0       	ldd	r12, Z+38	; 0x26
     854:	d7 a0       	ldd	r13, Z+39	; 0x27
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 a9 12 	call	0x2552	; 0x2552 <__floatunsisf>
     85e:	4b 01       	movw	r8, r22
     860:	5c 01       	movw	r10, r24
     862:	b6 01       	movw	r22, r12
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 a9 12 	call	0x2552	; 0x2552 <__floatunsisf>
     86c:	2b 01       	movw	r4, r22
     86e:	3c 01       	movw	r6, r24
     870:	ee 0c       	add	r14, r14
     872:	ff 1c       	adc	r15, r15
     874:	e1 e0       	ldi	r30, 0x01	; 1
     876:	f0 e0       	ldi	r31, 0x00	; 0
     878:	ec 0f       	add	r30, r28
     87a:	fd 1f       	adc	r31, r29
     87c:	ee 0d       	add	r30, r14
     87e:	ff 1d       	adc	r31, r15
     880:	60 89       	ldd	r22, Z+16	; 0x10
     882:	71 89       	ldd	r23, Z+17	; 0x11
     884:	07 2e       	mov	r0, r23
     886:	00 0c       	add	r0, r0
     888:	88 0b       	sbc	r24, r24
     88a:	99 0b       	sbc	r25, r25
     88c:	0e 94 ab 12 	call	0x2556	; 0x2556 <__floatsisf>
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	48 ec       	ldi	r20, 0xC8	; 200
     896:	52 e4       	ldi	r21, 0x42	; 66
     898:	0e 94 15 12 	call	0x242a	; 0x242a <__divsf3>
     89c:	9b 01       	movw	r18, r22
     89e:	ac 01       	movw	r20, r24
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	80 e8       	ldi	r24, 0x80	; 128
     8a6:	9f e3       	ldi	r25, 0x3F	; 63
     8a8:	0e 94 15 12 	call	0x242a	; 0x242a <__divsf3>
     8ac:	9b 01       	movw	r18, r22
     8ae:	ac 01       	movw	r20, r24
     8b0:	c3 01       	movw	r24, r6
     8b2:	b2 01       	movw	r22, r4
     8b4:	0e 94 15 12 	call	0x242a	; 0x242a <__divsf3>
     8b8:	9b 01       	movw	r18, r22
     8ba:	ac 01       	movw	r20, r24
     8bc:	c5 01       	movw	r24, r10
     8be:	b4 01       	movw	r22, r8
     8c0:	0e 94 b0 11 	call	0x2360	; 0x2360 <__subsf3>
     8c4:	0e 94 7d 12 	call	0x24fa	; 0x24fa <__fixunssfsi>
     8c8:	f8 01       	movw	r30, r16
     8ca:	60 a7       	std	Z+40, r22	; 0x28
     8cc:	71 a7       	std	Z+41, r23	; 0x29
     8ce:	80 a5       	ldd	r24, Z+40	; 0x28
     8d0:	91 a5       	ldd	r25, Z+41	; 0x29
     8d2:	82 a7       	std	Z+42, r24	; 0x2a
     8d4:	93 a7       	std	Z+43, r25	; 0x2b
     8d6:	80 a5       	ldd	r24, Z+40	; 0x28
     8d8:	91 a5       	ldd	r25, Z+41	; 0x29
     8da:	84 a7       	std	Z+44, r24	; 0x2c
     8dc:	95 a7       	std	Z+45, r25	; 0x2d
     8de:	80 a5       	ldd	r24, Z+40	; 0x28
     8e0:	91 a5       	ldd	r25, Z+41	; 0x29
     8e2:	86 a7       	std	Z+46, r24	; 0x2e
     8e4:	97 a7       	std	Z+47, r25	; 0x2f
     8e6:	87 e0       	ldi	r24, 0x07	; 7
     8e8:	80 83       	st	Z, r24
     8ea:	68 96       	adiw	r28, 0x18	; 24
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	cf 90       	pop	r12
     900:	bf 90       	pop	r11
     902:	af 90       	pop	r10
     904:	9f 90       	pop	r9
     906:	8f 90       	pop	r8
     908:	7f 90       	pop	r7
     90a:	6f 90       	pop	r6
     90c:	5f 90       	pop	r5
     90e:	4f 90       	pop	r4
     910:	08 95       	ret

00000912 <offLED>:

void offLED(void)
{
	TCE0.CTRLA = 0b00000000;
     912:	e0 e0       	ldi	r30, 0x00	; 0
     914:	fa e0       	ldi	r31, 0x0A	; 10
     916:	10 82       	st	Z, r1
	TCE0.CNT = 0;
     918:	10 a2       	std	Z+32, r1	; 0x20
     91a:	11 a2       	std	Z+33, r1	; 0x21
     91c:	08 95       	ret

0000091e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     91e:	1f 92       	push	r1
     920:	0f 92       	push	r0
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	0f 92       	push	r0
     926:	11 24       	eor	r1, r1
     928:	08 b6       	in	r0, 0x38	; 56
     92a:	0f 92       	push	r0
     92c:	18 be       	out	0x38, r1	; 56
     92e:	09 b6       	in	r0, 0x39	; 57
     930:	0f 92       	push	r0
     932:	19 be       	out	0x39, r1	; 57
     934:	0b b6       	in	r0, 0x3b	; 59
     936:	0f 92       	push	r0
     938:	1b be       	out	0x3b, r1	; 59
     93a:	2f 93       	push	r18
     93c:	3f 93       	push	r19
     93e:	4f 93       	push	r20
     940:	5f 93       	push	r21
     942:	6f 93       	push	r22
     944:	7f 93       	push	r23
     946:	8f 93       	push	r24
     948:	9f 93       	push	r25
     94a:	af 93       	push	r26
     94c:	bf 93       	push	r27
     94e:	ef 93       	push	r30
     950:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     952:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     956:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     95a:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <adca_callback>
     95e:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <adca_callback+0x1>
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	19 95       	eicall
}
     96a:	ff 91       	pop	r31
     96c:	ef 91       	pop	r30
     96e:	bf 91       	pop	r27
     970:	af 91       	pop	r26
     972:	9f 91       	pop	r25
     974:	8f 91       	pop	r24
     976:	7f 91       	pop	r23
     978:	6f 91       	pop	r22
     97a:	5f 91       	pop	r21
     97c:	4f 91       	pop	r20
     97e:	3f 91       	pop	r19
     980:	2f 91       	pop	r18
     982:	0f 90       	pop	r0
     984:	0b be       	out	0x3b, r0	; 59
     986:	0f 90       	pop	r0
     988:	09 be       	out	0x39, r0	; 57
     98a:	0f 90       	pop	r0
     98c:	08 be       	out	0x38, r0	; 56
     98e:	0f 90       	pop	r0
     990:	0f be       	out	0x3f, r0	; 63
     992:	0f 90       	pop	r0
     994:	1f 90       	pop	r1
     996:	18 95       	reti

00000998 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     998:	1f 92       	push	r1
     99a:	0f 92       	push	r0
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	0f 92       	push	r0
     9a0:	11 24       	eor	r1, r1
     9a2:	08 b6       	in	r0, 0x38	; 56
     9a4:	0f 92       	push	r0
     9a6:	18 be       	out	0x38, r1	; 56
     9a8:	09 b6       	in	r0, 0x39	; 57
     9aa:	0f 92       	push	r0
     9ac:	19 be       	out	0x39, r1	; 57
     9ae:	0b b6       	in	r0, 0x3b	; 59
     9b0:	0f 92       	push	r0
     9b2:	1b be       	out	0x3b, r1	; 59
     9b4:	2f 93       	push	r18
     9b6:	3f 93       	push	r19
     9b8:	4f 93       	push	r20
     9ba:	5f 93       	push	r21
     9bc:	6f 93       	push	r22
     9be:	7f 93       	push	r23
     9c0:	8f 93       	push	r24
     9c2:	9f 93       	push	r25
     9c4:	af 93       	push	r26
     9c6:	bf 93       	push	r27
     9c8:	ef 93       	push	r30
     9ca:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     9cc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     9d0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     9d4:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <adca_callback>
     9d8:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <adca_callback+0x1>
     9dc:	62 e0       	ldi	r22, 0x02	; 2
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	92 e0       	ldi	r25, 0x02	; 2
     9e2:	19 95       	eicall
}
     9e4:	ff 91       	pop	r31
     9e6:	ef 91       	pop	r30
     9e8:	bf 91       	pop	r27
     9ea:	af 91       	pop	r26
     9ec:	9f 91       	pop	r25
     9ee:	8f 91       	pop	r24
     9f0:	7f 91       	pop	r23
     9f2:	6f 91       	pop	r22
     9f4:	5f 91       	pop	r21
     9f6:	4f 91       	pop	r20
     9f8:	3f 91       	pop	r19
     9fa:	2f 91       	pop	r18
     9fc:	0f 90       	pop	r0
     9fe:	0b be       	out	0x3b, r0	; 59
     a00:	0f 90       	pop	r0
     a02:	09 be       	out	0x39, r0	; 57
     a04:	0f 90       	pop	r0
     a06:	08 be       	out	0x38, r0	; 56
     a08:	0f 90       	pop	r0
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	0f 90       	pop	r0
     a0e:	1f 90       	pop	r1
     a10:	18 95       	reti

00000a12 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     a12:	1f 92       	push	r1
     a14:	0f 92       	push	r0
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	0f 92       	push	r0
     a1a:	11 24       	eor	r1, r1
     a1c:	08 b6       	in	r0, 0x38	; 56
     a1e:	0f 92       	push	r0
     a20:	18 be       	out	0x38, r1	; 56
     a22:	09 b6       	in	r0, 0x39	; 57
     a24:	0f 92       	push	r0
     a26:	19 be       	out	0x39, r1	; 57
     a28:	0b b6       	in	r0, 0x3b	; 59
     a2a:	0f 92       	push	r0
     a2c:	1b be       	out	0x3b, r1	; 59
     a2e:	2f 93       	push	r18
     a30:	3f 93       	push	r19
     a32:	4f 93       	push	r20
     a34:	5f 93       	push	r21
     a36:	6f 93       	push	r22
     a38:	7f 93       	push	r23
     a3a:	8f 93       	push	r24
     a3c:	9f 93       	push	r25
     a3e:	af 93       	push	r26
     a40:	bf 93       	push	r27
     a42:	ef 93       	push	r30
     a44:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     a46:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     a4a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     a4e:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <adca_callback>
     a52:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <adca_callback+0x1>
     a56:	64 e0       	ldi	r22, 0x04	; 4
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	19 95       	eicall
}
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	bf 91       	pop	r27
     a64:	af 91       	pop	r26
     a66:	9f 91       	pop	r25
     a68:	8f 91       	pop	r24
     a6a:	7f 91       	pop	r23
     a6c:	6f 91       	pop	r22
     a6e:	5f 91       	pop	r21
     a70:	4f 91       	pop	r20
     a72:	3f 91       	pop	r19
     a74:	2f 91       	pop	r18
     a76:	0f 90       	pop	r0
     a78:	0b be       	out	0x3b, r0	; 59
     a7a:	0f 90       	pop	r0
     a7c:	09 be       	out	0x39, r0	; 57
     a7e:	0f 90       	pop	r0
     a80:	08 be       	out	0x38, r0	; 56
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	0f 90       	pop	r0
     a88:	1f 90       	pop	r1
     a8a:	18 95       	reti

00000a8c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
     a96:	08 b6       	in	r0, 0x38	; 56
     a98:	0f 92       	push	r0
     a9a:	18 be       	out	0x38, r1	; 56
     a9c:	09 b6       	in	r0, 0x39	; 57
     a9e:	0f 92       	push	r0
     aa0:	19 be       	out	0x39, r1	; 57
     aa2:	0b b6       	in	r0, 0x3b	; 59
     aa4:	0f 92       	push	r0
     aa6:	1b be       	out	0x3b, r1	; 59
     aa8:	2f 93       	push	r18
     aaa:	3f 93       	push	r19
     aac:	4f 93       	push	r20
     aae:	5f 93       	push	r21
     ab0:	6f 93       	push	r22
     ab2:	7f 93       	push	r23
     ab4:	8f 93       	push	r24
     ab6:	9f 93       	push	r25
     ab8:	af 93       	push	r26
     aba:	bf 93       	push	r27
     abc:	ef 93       	push	r30
     abe:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     ac0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     ac4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     ac8:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <adca_callback>
     acc:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <adca_callback+0x1>
     ad0:	68 e0       	ldi	r22, 0x08	; 8
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	19 95       	eicall
}
     ad8:	ff 91       	pop	r31
     ada:	ef 91       	pop	r30
     adc:	bf 91       	pop	r27
     ade:	af 91       	pop	r26
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	7f 91       	pop	r23
     ae6:	6f 91       	pop	r22
     ae8:	5f 91       	pop	r21
     aea:	4f 91       	pop	r20
     aec:	3f 91       	pop	r19
     aee:	2f 91       	pop	r18
     af0:	0f 90       	pop	r0
     af2:	0b be       	out	0x3b, r0	; 59
     af4:	0f 90       	pop	r0
     af6:	09 be       	out	0x39, r0	; 57
     af8:	0f 90       	pop	r0
     afa:	08 be       	out	0x38, r0	; 56
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	08 b6       	in	r0, 0x38	; 56
     b12:	0f 92       	push	r0
     b14:	18 be       	out	0x38, r1	; 56
     b16:	09 b6       	in	r0, 0x39	; 57
     b18:	0f 92       	push	r0
     b1a:	19 be       	out	0x39, r1	; 57
     b1c:	0b b6       	in	r0, 0x3b	; 59
     b1e:	0f 92       	push	r0
     b20:	1b be       	out	0x3b, r1	; 59
     b22:	2f 93       	push	r18
     b24:	3f 93       	push	r19
     b26:	4f 93       	push	r20
     b28:	5f 93       	push	r21
     b2a:	6f 93       	push	r22
     b2c:	7f 93       	push	r23
     b2e:	8f 93       	push	r24
     b30:	9f 93       	push	r25
     b32:	af 93       	push	r26
     b34:	bf 93       	push	r27
     b36:	ef 93       	push	r30
     b38:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     b3a:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     b3e:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     b42:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <adcb_callback>
     b46:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <adcb_callback+0x1>
     b4a:	61 e0       	ldi	r22, 0x01	; 1
     b4c:	80 e4       	ldi	r24, 0x40	; 64
     b4e:	92 e0       	ldi	r25, 0x02	; 2
     b50:	19 95       	eicall
}
     b52:	ff 91       	pop	r31
     b54:	ef 91       	pop	r30
     b56:	bf 91       	pop	r27
     b58:	af 91       	pop	r26
     b5a:	9f 91       	pop	r25
     b5c:	8f 91       	pop	r24
     b5e:	7f 91       	pop	r23
     b60:	6f 91       	pop	r22
     b62:	5f 91       	pop	r21
     b64:	4f 91       	pop	r20
     b66:	3f 91       	pop	r19
     b68:	2f 91       	pop	r18
     b6a:	0f 90       	pop	r0
     b6c:	0b be       	out	0x3b, r0	; 59
     b6e:	0f 90       	pop	r0
     b70:	09 be       	out	0x39, r0	; 57
     b72:	0f 90       	pop	r0
     b74:	08 be       	out	0x38, r0	; 56
     b76:	0f 90       	pop	r0
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	0f 90       	pop	r0
     b7c:	1f 90       	pop	r1
     b7e:	18 95       	reti

00000b80 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     b80:	1f 92       	push	r1
     b82:	0f 92       	push	r0
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	0f 92       	push	r0
     b88:	11 24       	eor	r1, r1
     b8a:	08 b6       	in	r0, 0x38	; 56
     b8c:	0f 92       	push	r0
     b8e:	18 be       	out	0x38, r1	; 56
     b90:	09 b6       	in	r0, 0x39	; 57
     b92:	0f 92       	push	r0
     b94:	19 be       	out	0x39, r1	; 57
     b96:	0b b6       	in	r0, 0x3b	; 59
     b98:	0f 92       	push	r0
     b9a:	1b be       	out	0x3b, r1	; 59
     b9c:	2f 93       	push	r18
     b9e:	3f 93       	push	r19
     ba0:	4f 93       	push	r20
     ba2:	5f 93       	push	r21
     ba4:	6f 93       	push	r22
     ba6:	7f 93       	push	r23
     ba8:	8f 93       	push	r24
     baa:	9f 93       	push	r25
     bac:	af 93       	push	r26
     bae:	bf 93       	push	r27
     bb0:	ef 93       	push	r30
     bb2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     bb4:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     bb8:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     bbc:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <adcb_callback>
     bc0:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <adcb_callback+0x1>
     bc4:	62 e0       	ldi	r22, 0x02	; 2
     bc6:	80 e4       	ldi	r24, 0x40	; 64
     bc8:	92 e0       	ldi	r25, 0x02	; 2
     bca:	19 95       	eicall
}
     bcc:	ff 91       	pop	r31
     bce:	ef 91       	pop	r30
     bd0:	bf 91       	pop	r27
     bd2:	af 91       	pop	r26
     bd4:	9f 91       	pop	r25
     bd6:	8f 91       	pop	r24
     bd8:	7f 91       	pop	r23
     bda:	6f 91       	pop	r22
     bdc:	5f 91       	pop	r21
     bde:	4f 91       	pop	r20
     be0:	3f 91       	pop	r19
     be2:	2f 91       	pop	r18
     be4:	0f 90       	pop	r0
     be6:	0b be       	out	0x3b, r0	; 59
     be8:	0f 90       	pop	r0
     bea:	09 be       	out	0x39, r0	; 57
     bec:	0f 90       	pop	r0
     bee:	08 be       	out	0x38, r0	; 56
     bf0:	0f 90       	pop	r0
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	0f 90       	pop	r0
     bf6:	1f 90       	pop	r1
     bf8:	18 95       	reti

00000bfa <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     bfa:	1f 92       	push	r1
     bfc:	0f 92       	push	r0
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	0f 92       	push	r0
     c02:	11 24       	eor	r1, r1
     c04:	08 b6       	in	r0, 0x38	; 56
     c06:	0f 92       	push	r0
     c08:	18 be       	out	0x38, r1	; 56
     c0a:	09 b6       	in	r0, 0x39	; 57
     c0c:	0f 92       	push	r0
     c0e:	19 be       	out	0x39, r1	; 57
     c10:	0b b6       	in	r0, 0x3b	; 59
     c12:	0f 92       	push	r0
     c14:	1b be       	out	0x3b, r1	; 59
     c16:	2f 93       	push	r18
     c18:	3f 93       	push	r19
     c1a:	4f 93       	push	r20
     c1c:	5f 93       	push	r21
     c1e:	6f 93       	push	r22
     c20:	7f 93       	push	r23
     c22:	8f 93       	push	r24
     c24:	9f 93       	push	r25
     c26:	af 93       	push	r26
     c28:	bf 93       	push	r27
     c2a:	ef 93       	push	r30
     c2c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     c2e:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     c32:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     c36:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <adcb_callback>
     c3a:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <adcb_callback+0x1>
     c3e:	64 e0       	ldi	r22, 0x04	; 4
     c40:	80 e4       	ldi	r24, 0x40	; 64
     c42:	92 e0       	ldi	r25, 0x02	; 2
     c44:	19 95       	eicall
}
     c46:	ff 91       	pop	r31
     c48:	ef 91       	pop	r30
     c4a:	bf 91       	pop	r27
     c4c:	af 91       	pop	r26
     c4e:	9f 91       	pop	r25
     c50:	8f 91       	pop	r24
     c52:	7f 91       	pop	r23
     c54:	6f 91       	pop	r22
     c56:	5f 91       	pop	r21
     c58:	4f 91       	pop	r20
     c5a:	3f 91       	pop	r19
     c5c:	2f 91       	pop	r18
     c5e:	0f 90       	pop	r0
     c60:	0b be       	out	0x3b, r0	; 59
     c62:	0f 90       	pop	r0
     c64:	09 be       	out	0x39, r0	; 57
     c66:	0f 90       	pop	r0
     c68:	08 be       	out	0x38, r0	; 56
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     c74:	1f 92       	push	r1
     c76:	0f 92       	push	r0
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	0f 92       	push	r0
     c7c:	11 24       	eor	r1, r1
     c7e:	08 b6       	in	r0, 0x38	; 56
     c80:	0f 92       	push	r0
     c82:	18 be       	out	0x38, r1	; 56
     c84:	09 b6       	in	r0, 0x39	; 57
     c86:	0f 92       	push	r0
     c88:	19 be       	out	0x39, r1	; 57
     c8a:	0b b6       	in	r0, 0x3b	; 59
     c8c:	0f 92       	push	r0
     c8e:	1b be       	out	0x3b, r1	; 59
     c90:	2f 93       	push	r18
     c92:	3f 93       	push	r19
     c94:	4f 93       	push	r20
     c96:	5f 93       	push	r21
     c98:	6f 93       	push	r22
     c9a:	7f 93       	push	r23
     c9c:	8f 93       	push	r24
     c9e:	9f 93       	push	r25
     ca0:	af 93       	push	r26
     ca2:	bf 93       	push	r27
     ca4:	ef 93       	push	r30
     ca6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     ca8:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     cac:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     cb0:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <adcb_callback>
     cb4:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <adcb_callback+0x1>
     cb8:	68 e0       	ldi	r22, 0x08	; 8
     cba:	80 e4       	ldi	r24, 0x40	; 64
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	19 95       	eicall
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0b be       	out	0x3b, r0	; 59
     cdc:	0f 90       	pop	r0
     cde:	09 be       	out	0x39, r0	; 57
     ce0:	0f 90       	pop	r0
     ce2:	08 be       	out	0x38, r0	; 56
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     cee:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     cf0:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <stdio_base>
     cf4:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <stdio_base+0x1>
     cf8:	e0 91 7c 20 	lds	r30, 0x207C	; 0x80207c <ptr_put>
     cfc:	f0 91 7d 20 	lds	r31, 0x207D	; 0x80207d <ptr_put+0x1>
     d00:	19 95       	eicall
     d02:	99 23       	and	r25, r25
     d04:	1c f0       	brlt	.+6      	; 0xd0c <_write+0x1e>
		return -1;
	}
	return 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     d0c:	8f ef       	ldi	r24, 0xFF	; 255
     d0e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     d10:	08 95       	ret

00000d12 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     d12:	8f ef       	ldi	r24, 0xFF	; 255
     d14:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     d18:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     d1c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     d20:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     d24:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     d28:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     d2c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d30:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     d32:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     d34:	e0 e5       	ldi	r30, 0x50	; 80
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	82 60       	ori	r24, 0x02	; 2
     d3c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d3e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     d40:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     d42:	81 ff       	sbrs	r24, 1
     d44:	fd cf       	rjmp	.-6      	; 0xd40 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	80 e4       	ldi	r24, 0x40	; 64
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 24 10 	call	0x2048	; 0x2048 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d50:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     d52:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     d54:	e0 e5       	ldi	r30, 0x50	; 80
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8e 7f       	andi	r24, 0xFE	; 254
     d5c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d5e:	9f bf       	out	0x3f, r25	; 63
     d60:	08 95       	ret

00000d62 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d62:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     d64:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     d66:	e8 2f       	mov	r30, r24
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	e0 59       	subi	r30, 0x90	; 144
     d6c:	ff 4f       	sbci	r31, 0xFF	; 255
     d6e:	60 95       	com	r22
     d70:	80 81       	ld	r24, Z
     d72:	68 23       	and	r22, r24
     d74:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d76:	9f bf       	out	0x3f, r25	; 63
     d78:	08 95       	ret

00000d7a <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     d7a:	1f 92       	push	r1
     d7c:	0f 92       	push	r0
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	0f 92       	push	r0
     d82:	11 24       	eor	r1, r1
     d84:	08 b6       	in	r0, 0x38	; 56
     d86:	0f 92       	push	r0
     d88:	18 be       	out	0x38, r1	; 56
     d8a:	0b b6       	in	r0, 0x3b	; 59
     d8c:	0f 92       	push	r0
     d8e:	1b be       	out	0x3b, r1	; 59
     d90:	8f 93       	push	r24
     d92:	9f 93       	push	r25
     d94:	ef 93       	push	r30
     d96:	ff 93       	push	r31
	rtc_data.counter_high++;
     d98:	e0 e8       	ldi	r30, 0x80	; 128
     d9a:	f0 e2       	ldi	r31, 0x20	; 32
     d9c:	80 81       	ld	r24, Z
     d9e:	91 81       	ldd	r25, Z+1	; 0x01
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	80 83       	st	Z, r24
     da4:	91 83       	std	Z+1, r25	; 0x01
}
     da6:	ff 91       	pop	r31
     da8:	ef 91       	pop	r30
     daa:	9f 91       	pop	r25
     dac:	8f 91       	pop	r24
     dae:	0f 90       	pop	r0
     db0:	0b be       	out	0x3b, r0	; 59
     db2:	0f 90       	pop	r0
     db4:	08 be       	out	0x38, r0	; 56
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	0f 90       	pop	r0
     dbc:	1f 90       	pop	r1
     dbe:	18 95       	reti

00000dc0 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	08 b6       	in	r0, 0x38	; 56
     dcc:	0f 92       	push	r0
     dce:	18 be       	out	0x38, r1	; 56
     dd0:	09 b6       	in	r0, 0x39	; 57
     dd2:	0f 92       	push	r0
     dd4:	19 be       	out	0x39, r1	; 57
     dd6:	0b b6       	in	r0, 0x3b	; 59
     dd8:	0f 92       	push	r0
     dda:	1b be       	out	0x3b, r1	; 59
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	2f 93       	push	r18
     dea:	3f 93       	push	r19
     dec:	4f 93       	push	r20
     dee:	5f 93       	push	r21
     df0:	6f 93       	push	r22
     df2:	7f 93       	push	r23
     df4:	8f 93       	push	r24
     df6:	9f 93       	push	r25
     df8:	af 93       	push	r26
     dfa:	bf 93       	push	r27
     dfc:	ef 93       	push	r30
     dfe:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     e00:	e0 e8       	ldi	r30, 0x80	; 128
     e02:	f0 e2       	ldi	r31, 0x20	; 32
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	22 81       	ldd	r18, Z+2	; 0x02
     e0a:	33 81       	ldd	r19, Z+3	; 0x03
     e0c:	82 17       	cp	r24, r18
     e0e:	93 07       	cpc	r25, r19
     e10:	f0 f1       	brcs	.+124    	; 0xe8e <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     e18:	e0 91 86 20 	lds	r30, 0x2086	; 0x802086 <rtc_data+0x6>
     e1c:	f0 91 87 20 	lds	r31, 0x2087	; 0x802087 <rtc_data+0x7>
     e20:	30 97       	sbiw	r30, 0x00	; 0
     e22:	a9 f1       	breq	.+106    	; 0xe8e <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     e24:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     e28:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	dc 01       	movw	r26, r24
     e32:	99 27       	eor	r25, r25
     e34:	88 27       	eor	r24, r24
					| RTC.CNT;
     e36:	ab 01       	movw	r20, r22
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     e3c:	8c 01       	movw	r16, r24
     e3e:	9d 01       	movw	r18, r26
     e40:	04 2b       	or	r16, r20
     e42:	15 2b       	or	r17, r21
     e44:	26 2b       	or	r18, r22
     e46:	37 2b       	or	r19, r23
     e48:	c9 01       	movw	r24, r18
     e4a:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     e4c:	a0 e8       	ldi	r26, 0x80	; 128
     e4e:	b0 e2       	ldi	r27, 0x20	; 32
     e50:	12 96       	adiw	r26, 0x02	; 2
     e52:	0d 91       	ld	r16, X+
     e54:	1c 91       	ld	r17, X
     e56:	13 97       	sbiw	r26, 0x03	; 3
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	98 01       	movw	r18, r16
     e5e:	11 27       	eor	r17, r17
     e60:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     e62:	14 96       	adiw	r26, 0x04	; 4
     e64:	cd 90       	ld	r12, X+
     e66:	dc 90       	ld	r13, X
     e68:	15 97       	sbiw	r26, 0x05	; 5
     e6a:	e1 2c       	mov	r14, r1
     e6c:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     e6e:	0c 29       	or	r16, r12
     e70:	1d 29       	or	r17, r13
     e72:	2e 29       	or	r18, r14
     e74:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     e76:	06 17       	cp	r16, r22
     e78:	17 07       	cpc	r17, r23
     e7a:	28 07       	cpc	r18, r24
     e7c:	39 07       	cpc	r19, r25
     e7e:	30 f0       	brcs	.+12     	; 0xe8c <__vector_11+0xcc>
				count = alarm + 1;
     e80:	c9 01       	movw	r24, r18
     e82:	b8 01       	movw	r22, r16
     e84:	6f 5f       	subi	r22, 0xFF	; 255
     e86:	7f 4f       	sbci	r23, 0xFF	; 255
     e88:	8f 4f       	sbci	r24, 0xFF	; 255
     e8a:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     e8c:	19 95       	eicall
		}
	}
}
     e8e:	ff 91       	pop	r31
     e90:	ef 91       	pop	r30
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	7f 91       	pop	r23
     e9c:	6f 91       	pop	r22
     e9e:	5f 91       	pop	r21
     ea0:	4f 91       	pop	r20
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	0f 90       	pop	r0
     eb4:	0b be       	out	0x3b, r0	; 59
     eb6:	0f 90       	pop	r0
     eb8:	09 be       	out	0x39, r0	; 57
     eba:	0f 90       	pop	r0
     ebc:	08 be       	out	0x38, r0	; 56
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	11 24       	eor	r1, r1
     ed2:	08 b6       	in	r0, 0x38	; 56
     ed4:	0f 92       	push	r0
     ed6:	18 be       	out	0x38, r1	; 56
     ed8:	09 b6       	in	r0, 0x39	; 57
     eda:	0f 92       	push	r0
     edc:	19 be       	out	0x39, r1	; 57
     ede:	0b b6       	in	r0, 0x3b	; 59
     ee0:	0f 92       	push	r0
     ee2:	1b be       	out	0x3b, r1	; 59
     ee4:	2f 93       	push	r18
     ee6:	3f 93       	push	r19
     ee8:	4f 93       	push	r20
     eea:	5f 93       	push	r21
     eec:	6f 93       	push	r22
     eee:	7f 93       	push	r23
     ef0:	8f 93       	push	r24
     ef2:	9f 93       	push	r25
     ef4:	af 93       	push	r26
     ef6:	bf 93       	push	r27
     ef8:	ef 93       	push	r30
     efa:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     efc:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <tc_tcc0_ovf_callback>
     f00:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <tc_tcc0_ovf_callback+0x1>
     f04:	30 97       	sbiw	r30, 0x00	; 0
     f06:	09 f0       	breq	.+2      	; 0xf0a <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     f08:	19 95       	eicall
	}
}
     f0a:	ff 91       	pop	r31
     f0c:	ef 91       	pop	r30
     f0e:	bf 91       	pop	r27
     f10:	af 91       	pop	r26
     f12:	9f 91       	pop	r25
     f14:	8f 91       	pop	r24
     f16:	7f 91       	pop	r23
     f18:	6f 91       	pop	r22
     f1a:	5f 91       	pop	r21
     f1c:	4f 91       	pop	r20
     f1e:	3f 91       	pop	r19
     f20:	2f 91       	pop	r18
     f22:	0f 90       	pop	r0
     f24:	0b be       	out	0x3b, r0	; 59
     f26:	0f 90       	pop	r0
     f28:	09 be       	out	0x39, r0	; 57
     f2a:	0f 90       	pop	r0
     f2c:	08 be       	out	0x38, r0	; 56
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	0f 90       	pop	r0
     f34:	1f 90       	pop	r1
     f36:	18 95       	reti

00000f38 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     f38:	1f 92       	push	r1
     f3a:	0f 92       	push	r0
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	0f 92       	push	r0
     f40:	11 24       	eor	r1, r1
     f42:	08 b6       	in	r0, 0x38	; 56
     f44:	0f 92       	push	r0
     f46:	18 be       	out	0x38, r1	; 56
     f48:	09 b6       	in	r0, 0x39	; 57
     f4a:	0f 92       	push	r0
     f4c:	19 be       	out	0x39, r1	; 57
     f4e:	0b b6       	in	r0, 0x3b	; 59
     f50:	0f 92       	push	r0
     f52:	1b be       	out	0x3b, r1	; 59
     f54:	2f 93       	push	r18
     f56:	3f 93       	push	r19
     f58:	4f 93       	push	r20
     f5a:	5f 93       	push	r21
     f5c:	6f 93       	push	r22
     f5e:	7f 93       	push	r23
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
     f64:	af 93       	push	r26
     f66:	bf 93       	push	r27
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     f6c:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <tc_tcc0_err_callback>
     f70:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <tc_tcc0_err_callback+0x1>
     f74:	30 97       	sbiw	r30, 0x00	; 0
     f76:	09 f0       	breq	.+2      	; 0xf7a <__vector_15+0x42>
		tc_tcc0_err_callback();
     f78:	19 95       	eicall
	}
}
     f7a:	ff 91       	pop	r31
     f7c:	ef 91       	pop	r30
     f7e:	bf 91       	pop	r27
     f80:	af 91       	pop	r26
     f82:	9f 91       	pop	r25
     f84:	8f 91       	pop	r24
     f86:	7f 91       	pop	r23
     f88:	6f 91       	pop	r22
     f8a:	5f 91       	pop	r21
     f8c:	4f 91       	pop	r20
     f8e:	3f 91       	pop	r19
     f90:	2f 91       	pop	r18
     f92:	0f 90       	pop	r0
     f94:	0b be       	out	0x3b, r0	; 59
     f96:	0f 90       	pop	r0
     f98:	09 be       	out	0x39, r0	; 57
     f9a:	0f 90       	pop	r0
     f9c:	08 be       	out	0x38, r0	; 56
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	0f 90       	pop	r0
     fa4:	1f 90       	pop	r1
     fa6:	18 95       	reti

00000fa8 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     fa8:	1f 92       	push	r1
     faa:	0f 92       	push	r0
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	0f 92       	push	r0
     fb0:	11 24       	eor	r1, r1
     fb2:	08 b6       	in	r0, 0x38	; 56
     fb4:	0f 92       	push	r0
     fb6:	18 be       	out	0x38, r1	; 56
     fb8:	09 b6       	in	r0, 0x39	; 57
     fba:	0f 92       	push	r0
     fbc:	19 be       	out	0x39, r1	; 57
     fbe:	0b b6       	in	r0, 0x3b	; 59
     fc0:	0f 92       	push	r0
     fc2:	1b be       	out	0x3b, r1	; 59
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     fdc:	e0 91 70 20 	lds	r30, 0x2070	; 0x802070 <tc_tcc0_cca_callback>
     fe0:	f0 91 71 20 	lds	r31, 0x2071	; 0x802071 <tc_tcc0_cca_callback+0x1>
     fe4:	30 97       	sbiw	r30, 0x00	; 0
     fe6:	09 f0       	breq	.+2      	; 0xfea <__vector_16+0x42>
		tc_tcc0_cca_callback();
     fe8:	19 95       	eicall
	}
}
     fea:	ff 91       	pop	r31
     fec:	ef 91       	pop	r30
     fee:	bf 91       	pop	r27
     ff0:	af 91       	pop	r26
     ff2:	9f 91       	pop	r25
     ff4:	8f 91       	pop	r24
     ff6:	7f 91       	pop	r23
     ff8:	6f 91       	pop	r22
     ffa:	5f 91       	pop	r21
     ffc:	4f 91       	pop	r20
     ffe:	3f 91       	pop	r19
    1000:	2f 91       	pop	r18
    1002:	0f 90       	pop	r0
    1004:	0b be       	out	0x3b, r0	; 59
    1006:	0f 90       	pop	r0
    1008:	09 be       	out	0x39, r0	; 57
    100a:	0f 90       	pop	r0
    100c:	08 be       	out	0x38, r0	; 56
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    1018:	1f 92       	push	r1
    101a:	0f 92       	push	r0
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	0f 92       	push	r0
    1020:	11 24       	eor	r1, r1
    1022:	08 b6       	in	r0, 0x38	; 56
    1024:	0f 92       	push	r0
    1026:	18 be       	out	0x38, r1	; 56
    1028:	09 b6       	in	r0, 0x39	; 57
    102a:	0f 92       	push	r0
    102c:	19 be       	out	0x39, r1	; 57
    102e:	0b b6       	in	r0, 0x3b	; 59
    1030:	0f 92       	push	r0
    1032:	1b be       	out	0x3b, r1	; 59
    1034:	2f 93       	push	r18
    1036:	3f 93       	push	r19
    1038:	4f 93       	push	r20
    103a:	5f 93       	push	r21
    103c:	6f 93       	push	r22
    103e:	7f 93       	push	r23
    1040:	8f 93       	push	r24
    1042:	9f 93       	push	r25
    1044:	af 93       	push	r26
    1046:	bf 93       	push	r27
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    104c:	e0 91 6e 20 	lds	r30, 0x206E	; 0x80206e <tc_tcc0_ccb_callback>
    1050:	f0 91 6f 20 	lds	r31, 0x206F	; 0x80206f <tc_tcc0_ccb_callback+0x1>
    1054:	30 97       	sbiw	r30, 0x00	; 0
    1056:	09 f0       	breq	.+2      	; 0x105a <__vector_17+0x42>
		tc_tcc0_ccb_callback();
    1058:	19 95       	eicall
	}
}
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0b be       	out	0x3b, r0	; 59
    1076:	0f 90       	pop	r0
    1078:	09 be       	out	0x39, r0	; 57
    107a:	0f 90       	pop	r0
    107c:	08 be       	out	0x38, r0	; 56
    107e:	0f 90       	pop	r0
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	0f 90       	pop	r0
    1084:	1f 90       	pop	r1
    1086:	18 95       	reti

00001088 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	11 24       	eor	r1, r1
    1092:	08 b6       	in	r0, 0x38	; 56
    1094:	0f 92       	push	r0
    1096:	18 be       	out	0x38, r1	; 56
    1098:	09 b6       	in	r0, 0x39	; 57
    109a:	0f 92       	push	r0
    109c:	19 be       	out	0x39, r1	; 57
    109e:	0b b6       	in	r0, 0x3b	; 59
    10a0:	0f 92       	push	r0
    10a2:	1b be       	out	0x3b, r1	; 59
    10a4:	2f 93       	push	r18
    10a6:	3f 93       	push	r19
    10a8:	4f 93       	push	r20
    10aa:	5f 93       	push	r21
    10ac:	6f 93       	push	r22
    10ae:	7f 93       	push	r23
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    10bc:	e0 91 6c 20 	lds	r30, 0x206C	; 0x80206c <tc_tcc0_ccc_callback>
    10c0:	f0 91 6d 20 	lds	r31, 0x206D	; 0x80206d <tc_tcc0_ccc_callback+0x1>
    10c4:	30 97       	sbiw	r30, 0x00	; 0
    10c6:	09 f0       	breq	.+2      	; 0x10ca <__vector_18+0x42>
		tc_tcc0_ccc_callback();
    10c8:	19 95       	eicall
	}
}
    10ca:	ff 91       	pop	r31
    10cc:	ef 91       	pop	r30
    10ce:	bf 91       	pop	r27
    10d0:	af 91       	pop	r26
    10d2:	9f 91       	pop	r25
    10d4:	8f 91       	pop	r24
    10d6:	7f 91       	pop	r23
    10d8:	6f 91       	pop	r22
    10da:	5f 91       	pop	r21
    10dc:	4f 91       	pop	r20
    10de:	3f 91       	pop	r19
    10e0:	2f 91       	pop	r18
    10e2:	0f 90       	pop	r0
    10e4:	0b be       	out	0x3b, r0	; 59
    10e6:	0f 90       	pop	r0
    10e8:	09 be       	out	0x39, r0	; 57
    10ea:	0f 90       	pop	r0
    10ec:	08 be       	out	0x38, r0	; 56
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    10f8:	1f 92       	push	r1
    10fa:	0f 92       	push	r0
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	08 b6       	in	r0, 0x38	; 56
    1104:	0f 92       	push	r0
    1106:	18 be       	out	0x38, r1	; 56
    1108:	09 b6       	in	r0, 0x39	; 57
    110a:	0f 92       	push	r0
    110c:	19 be       	out	0x39, r1	; 57
    110e:	0b b6       	in	r0, 0x3b	; 59
    1110:	0f 92       	push	r0
    1112:	1b be       	out	0x3b, r1	; 59
    1114:	2f 93       	push	r18
    1116:	3f 93       	push	r19
    1118:	4f 93       	push	r20
    111a:	5f 93       	push	r21
    111c:	6f 93       	push	r22
    111e:	7f 93       	push	r23
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	af 93       	push	r26
    1126:	bf 93       	push	r27
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    112c:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <tc_tcc0_ccd_callback>
    1130:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <tc_tcc0_ccd_callback+0x1>
    1134:	30 97       	sbiw	r30, 0x00	; 0
    1136:	09 f0       	breq	.+2      	; 0x113a <__vector_19+0x42>
		tc_tcc0_ccd_callback();
    1138:	19 95       	eicall
	}
}
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0b be       	out	0x3b, r0	; 59
    1156:	0f 90       	pop	r0
    1158:	09 be       	out	0x39, r0	; 57
    115a:	0f 90       	pop	r0
    115c:	08 be       	out	0x38, r0	; 56
    115e:	0f 90       	pop	r0
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	0f 90       	pop	r0
    1164:	1f 90       	pop	r1
    1166:	18 95       	reti

00001168 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    1168:	1f 92       	push	r1
    116a:	0f 92       	push	r0
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	0f 92       	push	r0
    1170:	11 24       	eor	r1, r1
    1172:	08 b6       	in	r0, 0x38	; 56
    1174:	0f 92       	push	r0
    1176:	18 be       	out	0x38, r1	; 56
    1178:	09 b6       	in	r0, 0x39	; 57
    117a:	0f 92       	push	r0
    117c:	19 be       	out	0x39, r1	; 57
    117e:	0b b6       	in	r0, 0x3b	; 59
    1180:	0f 92       	push	r0
    1182:	1b be       	out	0x3b, r1	; 59
    1184:	2f 93       	push	r18
    1186:	3f 93       	push	r19
    1188:	4f 93       	push	r20
    118a:	5f 93       	push	r21
    118c:	6f 93       	push	r22
    118e:	7f 93       	push	r23
    1190:	8f 93       	push	r24
    1192:	9f 93       	push	r25
    1194:	af 93       	push	r26
    1196:	bf 93       	push	r27
    1198:	ef 93       	push	r30
    119a:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    119c:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <tc_tcc1_ovf_callback>
    11a0:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <tc_tcc1_ovf_callback+0x1>
    11a4:	30 97       	sbiw	r30, 0x00	; 0
    11a6:	09 f0       	breq	.+2      	; 0x11aa <__vector_20+0x42>
		tc_tcc1_ovf_callback();
    11a8:	19 95       	eicall
	}
}
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	bf 91       	pop	r27
    11b0:	af 91       	pop	r26
    11b2:	9f 91       	pop	r25
    11b4:	8f 91       	pop	r24
    11b6:	7f 91       	pop	r23
    11b8:	6f 91       	pop	r22
    11ba:	5f 91       	pop	r21
    11bc:	4f 91       	pop	r20
    11be:	3f 91       	pop	r19
    11c0:	2f 91       	pop	r18
    11c2:	0f 90       	pop	r0
    11c4:	0b be       	out	0x3b, r0	; 59
    11c6:	0f 90       	pop	r0
    11c8:	09 be       	out	0x39, r0	; 57
    11ca:	0f 90       	pop	r0
    11cc:	08 be       	out	0x38, r0	; 56
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    11d8:	1f 92       	push	r1
    11da:	0f 92       	push	r0
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	0f 92       	push	r0
    11e0:	11 24       	eor	r1, r1
    11e2:	08 b6       	in	r0, 0x38	; 56
    11e4:	0f 92       	push	r0
    11e6:	18 be       	out	0x38, r1	; 56
    11e8:	09 b6       	in	r0, 0x39	; 57
    11ea:	0f 92       	push	r0
    11ec:	19 be       	out	0x39, r1	; 57
    11ee:	0b b6       	in	r0, 0x3b	; 59
    11f0:	0f 92       	push	r0
    11f2:	1b be       	out	0x3b, r1	; 59
    11f4:	2f 93       	push	r18
    11f6:	3f 93       	push	r19
    11f8:	4f 93       	push	r20
    11fa:	5f 93       	push	r21
    11fc:	6f 93       	push	r22
    11fe:	7f 93       	push	r23
    1200:	8f 93       	push	r24
    1202:	9f 93       	push	r25
    1204:	af 93       	push	r26
    1206:	bf 93       	push	r27
    1208:	ef 93       	push	r30
    120a:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    120c:	e0 91 66 20 	lds	r30, 0x2066	; 0x802066 <tc_tcc1_err_callback>
    1210:	f0 91 67 20 	lds	r31, 0x2067	; 0x802067 <tc_tcc1_err_callback+0x1>
    1214:	30 97       	sbiw	r30, 0x00	; 0
    1216:	09 f0       	breq	.+2      	; 0x121a <__vector_21+0x42>
		tc_tcc1_err_callback();
    1218:	19 95       	eicall
	}
}
    121a:	ff 91       	pop	r31
    121c:	ef 91       	pop	r30
    121e:	bf 91       	pop	r27
    1220:	af 91       	pop	r26
    1222:	9f 91       	pop	r25
    1224:	8f 91       	pop	r24
    1226:	7f 91       	pop	r23
    1228:	6f 91       	pop	r22
    122a:	5f 91       	pop	r21
    122c:	4f 91       	pop	r20
    122e:	3f 91       	pop	r19
    1230:	2f 91       	pop	r18
    1232:	0f 90       	pop	r0
    1234:	0b be       	out	0x3b, r0	; 59
    1236:	0f 90       	pop	r0
    1238:	09 be       	out	0x39, r0	; 57
    123a:	0f 90       	pop	r0
    123c:	08 be       	out	0x38, r0	; 56
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0f 90       	pop	r0
    1244:	1f 90       	pop	r1
    1246:	18 95       	reti

00001248 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1248:	1f 92       	push	r1
    124a:	0f 92       	push	r0
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	0f 92       	push	r0
    1250:	11 24       	eor	r1, r1
    1252:	08 b6       	in	r0, 0x38	; 56
    1254:	0f 92       	push	r0
    1256:	18 be       	out	0x38, r1	; 56
    1258:	09 b6       	in	r0, 0x39	; 57
    125a:	0f 92       	push	r0
    125c:	19 be       	out	0x39, r1	; 57
    125e:	0b b6       	in	r0, 0x3b	; 59
    1260:	0f 92       	push	r0
    1262:	1b be       	out	0x3b, r1	; 59
    1264:	2f 93       	push	r18
    1266:	3f 93       	push	r19
    1268:	4f 93       	push	r20
    126a:	5f 93       	push	r21
    126c:	6f 93       	push	r22
    126e:	7f 93       	push	r23
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
    1274:	af 93       	push	r26
    1276:	bf 93       	push	r27
    1278:	ef 93       	push	r30
    127a:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    127c:	e0 91 64 20 	lds	r30, 0x2064	; 0x802064 <tc_tcc1_cca_callback>
    1280:	f0 91 65 20 	lds	r31, 0x2065	; 0x802065 <tc_tcc1_cca_callback+0x1>
    1284:	30 97       	sbiw	r30, 0x00	; 0
    1286:	09 f0       	breq	.+2      	; 0x128a <__vector_22+0x42>
		tc_tcc1_cca_callback();
    1288:	19 95       	eicall
	}
}
    128a:	ff 91       	pop	r31
    128c:	ef 91       	pop	r30
    128e:	bf 91       	pop	r27
    1290:	af 91       	pop	r26
    1292:	9f 91       	pop	r25
    1294:	8f 91       	pop	r24
    1296:	7f 91       	pop	r23
    1298:	6f 91       	pop	r22
    129a:	5f 91       	pop	r21
    129c:	4f 91       	pop	r20
    129e:	3f 91       	pop	r19
    12a0:	2f 91       	pop	r18
    12a2:	0f 90       	pop	r0
    12a4:	0b be       	out	0x3b, r0	; 59
    12a6:	0f 90       	pop	r0
    12a8:	09 be       	out	0x39, r0	; 57
    12aa:	0f 90       	pop	r0
    12ac:	08 be       	out	0x38, r0	; 56
    12ae:	0f 90       	pop	r0
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	0f 90       	pop	r0
    12b4:	1f 90       	pop	r1
    12b6:	18 95       	reti

000012b8 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    12b8:	1f 92       	push	r1
    12ba:	0f 92       	push	r0
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	0f 92       	push	r0
    12c0:	11 24       	eor	r1, r1
    12c2:	08 b6       	in	r0, 0x38	; 56
    12c4:	0f 92       	push	r0
    12c6:	18 be       	out	0x38, r1	; 56
    12c8:	09 b6       	in	r0, 0x39	; 57
    12ca:	0f 92       	push	r0
    12cc:	19 be       	out	0x39, r1	; 57
    12ce:	0b b6       	in	r0, 0x3b	; 59
    12d0:	0f 92       	push	r0
    12d2:	1b be       	out	0x3b, r1	; 59
    12d4:	2f 93       	push	r18
    12d6:	3f 93       	push	r19
    12d8:	4f 93       	push	r20
    12da:	5f 93       	push	r21
    12dc:	6f 93       	push	r22
    12de:	7f 93       	push	r23
    12e0:	8f 93       	push	r24
    12e2:	9f 93       	push	r25
    12e4:	af 93       	push	r26
    12e6:	bf 93       	push	r27
    12e8:	ef 93       	push	r30
    12ea:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    12ec:	e0 91 62 20 	lds	r30, 0x2062	; 0x802062 <tc_tcc1_ccb_callback>
    12f0:	f0 91 63 20 	lds	r31, 0x2063	; 0x802063 <tc_tcc1_ccb_callback+0x1>
    12f4:	30 97       	sbiw	r30, 0x00	; 0
    12f6:	09 f0       	breq	.+2      	; 0x12fa <__vector_23+0x42>
		tc_tcc1_ccb_callback();
    12f8:	19 95       	eicall
	}
}
    12fa:	ff 91       	pop	r31
    12fc:	ef 91       	pop	r30
    12fe:	bf 91       	pop	r27
    1300:	af 91       	pop	r26
    1302:	9f 91       	pop	r25
    1304:	8f 91       	pop	r24
    1306:	7f 91       	pop	r23
    1308:	6f 91       	pop	r22
    130a:	5f 91       	pop	r21
    130c:	4f 91       	pop	r20
    130e:	3f 91       	pop	r19
    1310:	2f 91       	pop	r18
    1312:	0f 90       	pop	r0
    1314:	0b be       	out	0x3b, r0	; 59
    1316:	0f 90       	pop	r0
    1318:	09 be       	out	0x39, r0	; 57
    131a:	0f 90       	pop	r0
    131c:	08 be       	out	0x38, r0	; 56
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti

00001328 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	08 b6       	in	r0, 0x38	; 56
    1334:	0f 92       	push	r0
    1336:	18 be       	out	0x38, r1	; 56
    1338:	09 b6       	in	r0, 0x39	; 57
    133a:	0f 92       	push	r0
    133c:	19 be       	out	0x39, r1	; 57
    133e:	0b b6       	in	r0, 0x3b	; 59
    1340:	0f 92       	push	r0
    1342:	1b be       	out	0x3b, r1	; 59
    1344:	2f 93       	push	r18
    1346:	3f 93       	push	r19
    1348:	4f 93       	push	r20
    134a:	5f 93       	push	r21
    134c:	6f 93       	push	r22
    134e:	7f 93       	push	r23
    1350:	8f 93       	push	r24
    1352:	9f 93       	push	r25
    1354:	af 93       	push	r26
    1356:	bf 93       	push	r27
    1358:	ef 93       	push	r30
    135a:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    135c:	e0 91 60 20 	lds	r30, 0x2060	; 0x802060 <tc_tcd0_ovf_callback>
    1360:	f0 91 61 20 	lds	r31, 0x2061	; 0x802061 <tc_tcd0_ovf_callback+0x1>
    1364:	30 97       	sbiw	r30, 0x00	; 0
    1366:	09 f0       	breq	.+2      	; 0x136a <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    1368:	19 95       	eicall
	}
}
    136a:	ff 91       	pop	r31
    136c:	ef 91       	pop	r30
    136e:	bf 91       	pop	r27
    1370:	af 91       	pop	r26
    1372:	9f 91       	pop	r25
    1374:	8f 91       	pop	r24
    1376:	7f 91       	pop	r23
    1378:	6f 91       	pop	r22
    137a:	5f 91       	pop	r21
    137c:	4f 91       	pop	r20
    137e:	3f 91       	pop	r19
    1380:	2f 91       	pop	r18
    1382:	0f 90       	pop	r0
    1384:	0b be       	out	0x3b, r0	; 59
    1386:	0f 90       	pop	r0
    1388:	09 be       	out	0x39, r0	; 57
    138a:	0f 90       	pop	r0
    138c:	08 be       	out	0x38, r0	; 56
    138e:	0f 90       	pop	r0
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	0f 90       	pop	r0
    1394:	1f 90       	pop	r1
    1396:	18 95       	reti

00001398 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	08 b6       	in	r0, 0x38	; 56
    13a4:	0f 92       	push	r0
    13a6:	18 be       	out	0x38, r1	; 56
    13a8:	09 b6       	in	r0, 0x39	; 57
    13aa:	0f 92       	push	r0
    13ac:	19 be       	out	0x39, r1	; 57
    13ae:	0b b6       	in	r0, 0x3b	; 59
    13b0:	0f 92       	push	r0
    13b2:	1b be       	out	0x3b, r1	; 59
    13b4:	2f 93       	push	r18
    13b6:	3f 93       	push	r19
    13b8:	4f 93       	push	r20
    13ba:	5f 93       	push	r21
    13bc:	6f 93       	push	r22
    13be:	7f 93       	push	r23
    13c0:	8f 93       	push	r24
    13c2:	9f 93       	push	r25
    13c4:	af 93       	push	r26
    13c6:	bf 93       	push	r27
    13c8:	ef 93       	push	r30
    13ca:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    13cc:	e0 91 5e 20 	lds	r30, 0x205E	; 0x80205e <tc_tcd0_err_callback>
    13d0:	f0 91 5f 20 	lds	r31, 0x205F	; 0x80205f <tc_tcd0_err_callback+0x1>
    13d4:	30 97       	sbiw	r30, 0x00	; 0
    13d6:	09 f0       	breq	.+2      	; 0x13da <__vector_78+0x42>
		tc_tcd0_err_callback();
    13d8:	19 95       	eicall
	}
}
    13da:	ff 91       	pop	r31
    13dc:	ef 91       	pop	r30
    13de:	bf 91       	pop	r27
    13e0:	af 91       	pop	r26
    13e2:	9f 91       	pop	r25
    13e4:	8f 91       	pop	r24
    13e6:	7f 91       	pop	r23
    13e8:	6f 91       	pop	r22
    13ea:	5f 91       	pop	r21
    13ec:	4f 91       	pop	r20
    13ee:	3f 91       	pop	r19
    13f0:	2f 91       	pop	r18
    13f2:	0f 90       	pop	r0
    13f4:	0b be       	out	0x3b, r0	; 59
    13f6:	0f 90       	pop	r0
    13f8:	09 be       	out	0x39, r0	; 57
    13fa:	0f 90       	pop	r0
    13fc:	08 be       	out	0x38, r0	; 56
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	0f 90       	pop	r0
    1404:	1f 90       	pop	r1
    1406:	18 95       	reti

00001408 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1408:	1f 92       	push	r1
    140a:	0f 92       	push	r0
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	0f 92       	push	r0
    1410:	11 24       	eor	r1, r1
    1412:	08 b6       	in	r0, 0x38	; 56
    1414:	0f 92       	push	r0
    1416:	18 be       	out	0x38, r1	; 56
    1418:	09 b6       	in	r0, 0x39	; 57
    141a:	0f 92       	push	r0
    141c:	19 be       	out	0x39, r1	; 57
    141e:	0b b6       	in	r0, 0x3b	; 59
    1420:	0f 92       	push	r0
    1422:	1b be       	out	0x3b, r1	; 59
    1424:	2f 93       	push	r18
    1426:	3f 93       	push	r19
    1428:	4f 93       	push	r20
    142a:	5f 93       	push	r21
    142c:	6f 93       	push	r22
    142e:	7f 93       	push	r23
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	ef 93       	push	r30
    143a:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    143c:	e0 91 5c 20 	lds	r30, 0x205C	; 0x80205c <tc_tcd0_cca_callback>
    1440:	f0 91 5d 20 	lds	r31, 0x205D	; 0x80205d <tc_tcd0_cca_callback+0x1>
    1444:	30 97       	sbiw	r30, 0x00	; 0
    1446:	09 f0       	breq	.+2      	; 0x144a <__vector_79+0x42>
		tc_tcd0_cca_callback();
    1448:	19 95       	eicall
	}
}
    144a:	ff 91       	pop	r31
    144c:	ef 91       	pop	r30
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	7f 91       	pop	r23
    1458:	6f 91       	pop	r22
    145a:	5f 91       	pop	r21
    145c:	4f 91       	pop	r20
    145e:	3f 91       	pop	r19
    1460:	2f 91       	pop	r18
    1462:	0f 90       	pop	r0
    1464:	0b be       	out	0x3b, r0	; 59
    1466:	0f 90       	pop	r0
    1468:	09 be       	out	0x39, r0	; 57
    146a:	0f 90       	pop	r0
    146c:	08 be       	out	0x38, r0	; 56
    146e:	0f 90       	pop	r0
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	0f 90       	pop	r0
    1474:	1f 90       	pop	r1
    1476:	18 95       	reti

00001478 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1478:	1f 92       	push	r1
    147a:	0f 92       	push	r0
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	0f 92       	push	r0
    1480:	11 24       	eor	r1, r1
    1482:	08 b6       	in	r0, 0x38	; 56
    1484:	0f 92       	push	r0
    1486:	18 be       	out	0x38, r1	; 56
    1488:	09 b6       	in	r0, 0x39	; 57
    148a:	0f 92       	push	r0
    148c:	19 be       	out	0x39, r1	; 57
    148e:	0b b6       	in	r0, 0x3b	; 59
    1490:	0f 92       	push	r0
    1492:	1b be       	out	0x3b, r1	; 59
    1494:	2f 93       	push	r18
    1496:	3f 93       	push	r19
    1498:	4f 93       	push	r20
    149a:	5f 93       	push	r21
    149c:	6f 93       	push	r22
    149e:	7f 93       	push	r23
    14a0:	8f 93       	push	r24
    14a2:	9f 93       	push	r25
    14a4:	af 93       	push	r26
    14a6:	bf 93       	push	r27
    14a8:	ef 93       	push	r30
    14aa:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    14ac:	e0 91 5a 20 	lds	r30, 0x205A	; 0x80205a <tc_tcd0_ccb_callback>
    14b0:	f0 91 5b 20 	lds	r31, 0x205B	; 0x80205b <tc_tcd0_ccb_callback+0x1>
    14b4:	30 97       	sbiw	r30, 0x00	; 0
    14b6:	09 f0       	breq	.+2      	; 0x14ba <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    14b8:	19 95       	eicall
	}
}
    14ba:	ff 91       	pop	r31
    14bc:	ef 91       	pop	r30
    14be:	bf 91       	pop	r27
    14c0:	af 91       	pop	r26
    14c2:	9f 91       	pop	r25
    14c4:	8f 91       	pop	r24
    14c6:	7f 91       	pop	r23
    14c8:	6f 91       	pop	r22
    14ca:	5f 91       	pop	r21
    14cc:	4f 91       	pop	r20
    14ce:	3f 91       	pop	r19
    14d0:	2f 91       	pop	r18
    14d2:	0f 90       	pop	r0
    14d4:	0b be       	out	0x3b, r0	; 59
    14d6:	0f 90       	pop	r0
    14d8:	09 be       	out	0x39, r0	; 57
    14da:	0f 90       	pop	r0
    14dc:	08 be       	out	0x38, r0	; 56
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0
    14f0:	11 24       	eor	r1, r1
    14f2:	08 b6       	in	r0, 0x38	; 56
    14f4:	0f 92       	push	r0
    14f6:	18 be       	out	0x38, r1	; 56
    14f8:	09 b6       	in	r0, 0x39	; 57
    14fa:	0f 92       	push	r0
    14fc:	19 be       	out	0x39, r1	; 57
    14fe:	0b b6       	in	r0, 0x3b	; 59
    1500:	0f 92       	push	r0
    1502:	1b be       	out	0x3b, r1	; 59
    1504:	2f 93       	push	r18
    1506:	3f 93       	push	r19
    1508:	4f 93       	push	r20
    150a:	5f 93       	push	r21
    150c:	6f 93       	push	r22
    150e:	7f 93       	push	r23
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	af 93       	push	r26
    1516:	bf 93       	push	r27
    1518:	ef 93       	push	r30
    151a:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    151c:	e0 91 58 20 	lds	r30, 0x2058	; 0x802058 <tc_tcd0_ccc_callback>
    1520:	f0 91 59 20 	lds	r31, 0x2059	; 0x802059 <tc_tcd0_ccc_callback+0x1>
    1524:	30 97       	sbiw	r30, 0x00	; 0
    1526:	09 f0       	breq	.+2      	; 0x152a <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    1528:	19 95       	eicall
	}
}
    152a:	ff 91       	pop	r31
    152c:	ef 91       	pop	r30
    152e:	bf 91       	pop	r27
    1530:	af 91       	pop	r26
    1532:	9f 91       	pop	r25
    1534:	8f 91       	pop	r24
    1536:	7f 91       	pop	r23
    1538:	6f 91       	pop	r22
    153a:	5f 91       	pop	r21
    153c:	4f 91       	pop	r20
    153e:	3f 91       	pop	r19
    1540:	2f 91       	pop	r18
    1542:	0f 90       	pop	r0
    1544:	0b be       	out	0x3b, r0	; 59
    1546:	0f 90       	pop	r0
    1548:	09 be       	out	0x39, r0	; 57
    154a:	0f 90       	pop	r0
    154c:	08 be       	out	0x38, r0	; 56
    154e:	0f 90       	pop	r0
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	0f 90       	pop	r0
    1554:	1f 90       	pop	r1
    1556:	18 95       	reti

00001558 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	08 b6       	in	r0, 0x38	; 56
    1564:	0f 92       	push	r0
    1566:	18 be       	out	0x38, r1	; 56
    1568:	09 b6       	in	r0, 0x39	; 57
    156a:	0f 92       	push	r0
    156c:	19 be       	out	0x39, r1	; 57
    156e:	0b b6       	in	r0, 0x3b	; 59
    1570:	0f 92       	push	r0
    1572:	1b be       	out	0x3b, r1	; 59
    1574:	2f 93       	push	r18
    1576:	3f 93       	push	r19
    1578:	4f 93       	push	r20
    157a:	5f 93       	push	r21
    157c:	6f 93       	push	r22
    157e:	7f 93       	push	r23
    1580:	8f 93       	push	r24
    1582:	9f 93       	push	r25
    1584:	af 93       	push	r26
    1586:	bf 93       	push	r27
    1588:	ef 93       	push	r30
    158a:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    158c:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <tc_tcd0_ccd_callback>
    1590:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <tc_tcd0_ccd_callback+0x1>
    1594:	30 97       	sbiw	r30, 0x00	; 0
    1596:	09 f0       	breq	.+2      	; 0x159a <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    1598:	19 95       	eicall
	}
}
    159a:	ff 91       	pop	r31
    159c:	ef 91       	pop	r30
    159e:	bf 91       	pop	r27
    15a0:	af 91       	pop	r26
    15a2:	9f 91       	pop	r25
    15a4:	8f 91       	pop	r24
    15a6:	7f 91       	pop	r23
    15a8:	6f 91       	pop	r22
    15aa:	5f 91       	pop	r21
    15ac:	4f 91       	pop	r20
    15ae:	3f 91       	pop	r19
    15b0:	2f 91       	pop	r18
    15b2:	0f 90       	pop	r0
    15b4:	0b be       	out	0x3b, r0	; 59
    15b6:	0f 90       	pop	r0
    15b8:	09 be       	out	0x39, r0	; 57
    15ba:	0f 90       	pop	r0
    15bc:	08 be       	out	0x38, r0	; 56
    15be:	0f 90       	pop	r0
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	0f 90       	pop	r0
    15c4:	1f 90       	pop	r1
    15c6:	18 95       	reti

000015c8 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	08 b6       	in	r0, 0x38	; 56
    15d4:	0f 92       	push	r0
    15d6:	18 be       	out	0x38, r1	; 56
    15d8:	09 b6       	in	r0, 0x39	; 57
    15da:	0f 92       	push	r0
    15dc:	19 be       	out	0x39, r1	; 57
    15de:	0b b6       	in	r0, 0x3b	; 59
    15e0:	0f 92       	push	r0
    15e2:	1b be       	out	0x3b, r1	; 59
    15e4:	2f 93       	push	r18
    15e6:	3f 93       	push	r19
    15e8:	4f 93       	push	r20
    15ea:	5f 93       	push	r21
    15ec:	6f 93       	push	r22
    15ee:	7f 93       	push	r23
    15f0:	8f 93       	push	r24
    15f2:	9f 93       	push	r25
    15f4:	af 93       	push	r26
    15f6:	bf 93       	push	r27
    15f8:	ef 93       	push	r30
    15fa:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    15fc:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <tc_tcd1_ovf_callback>
    1600:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <tc_tcd1_ovf_callback+0x1>
    1604:	30 97       	sbiw	r30, 0x00	; 0
    1606:	09 f0       	breq	.+2      	; 0x160a <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    1608:	19 95       	eicall
	}
}
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	0b be       	out	0x3b, r0	; 59
    1626:	0f 90       	pop	r0
    1628:	09 be       	out	0x39, r0	; 57
    162a:	0f 90       	pop	r0
    162c:	08 be       	out	0x38, r0	; 56
    162e:	0f 90       	pop	r0
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	0f 90       	pop	r0
    1634:	1f 90       	pop	r1
    1636:	18 95       	reti

00001638 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    1638:	1f 92       	push	r1
    163a:	0f 92       	push	r0
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	0f 92       	push	r0
    1640:	11 24       	eor	r1, r1
    1642:	08 b6       	in	r0, 0x38	; 56
    1644:	0f 92       	push	r0
    1646:	18 be       	out	0x38, r1	; 56
    1648:	09 b6       	in	r0, 0x39	; 57
    164a:	0f 92       	push	r0
    164c:	19 be       	out	0x39, r1	; 57
    164e:	0b b6       	in	r0, 0x3b	; 59
    1650:	0f 92       	push	r0
    1652:	1b be       	out	0x3b, r1	; 59
    1654:	2f 93       	push	r18
    1656:	3f 93       	push	r19
    1658:	4f 93       	push	r20
    165a:	5f 93       	push	r21
    165c:	6f 93       	push	r22
    165e:	7f 93       	push	r23
    1660:	8f 93       	push	r24
    1662:	9f 93       	push	r25
    1664:	af 93       	push	r26
    1666:	bf 93       	push	r27
    1668:	ef 93       	push	r30
    166a:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    166c:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <tc_tcd1_err_callback>
    1670:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <tc_tcd1_err_callback+0x1>
    1674:	30 97       	sbiw	r30, 0x00	; 0
    1676:	09 f0       	breq	.+2      	; 0x167a <__vector_84+0x42>
		tc_tcd1_err_callback();
    1678:	19 95       	eicall
	}
}
    167a:	ff 91       	pop	r31
    167c:	ef 91       	pop	r30
    167e:	bf 91       	pop	r27
    1680:	af 91       	pop	r26
    1682:	9f 91       	pop	r25
    1684:	8f 91       	pop	r24
    1686:	7f 91       	pop	r23
    1688:	6f 91       	pop	r22
    168a:	5f 91       	pop	r21
    168c:	4f 91       	pop	r20
    168e:	3f 91       	pop	r19
    1690:	2f 91       	pop	r18
    1692:	0f 90       	pop	r0
    1694:	0b be       	out	0x3b, r0	; 59
    1696:	0f 90       	pop	r0
    1698:	09 be       	out	0x39, r0	; 57
    169a:	0f 90       	pop	r0
    169c:	08 be       	out	0x38, r0	; 56
    169e:	0f 90       	pop	r0
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	0f 90       	pop	r0
    16a4:	1f 90       	pop	r1
    16a6:	18 95       	reti

000016a8 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    16a8:	1f 92       	push	r1
    16aa:	0f 92       	push	r0
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	0f 92       	push	r0
    16b0:	11 24       	eor	r1, r1
    16b2:	08 b6       	in	r0, 0x38	; 56
    16b4:	0f 92       	push	r0
    16b6:	18 be       	out	0x38, r1	; 56
    16b8:	09 b6       	in	r0, 0x39	; 57
    16ba:	0f 92       	push	r0
    16bc:	19 be       	out	0x39, r1	; 57
    16be:	0b b6       	in	r0, 0x3b	; 59
    16c0:	0f 92       	push	r0
    16c2:	1b be       	out	0x3b, r1	; 59
    16c4:	2f 93       	push	r18
    16c6:	3f 93       	push	r19
    16c8:	4f 93       	push	r20
    16ca:	5f 93       	push	r21
    16cc:	6f 93       	push	r22
    16ce:	7f 93       	push	r23
    16d0:	8f 93       	push	r24
    16d2:	9f 93       	push	r25
    16d4:	af 93       	push	r26
    16d6:	bf 93       	push	r27
    16d8:	ef 93       	push	r30
    16da:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    16dc:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <tc_tcd1_cca_callback>
    16e0:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <tc_tcd1_cca_callback+0x1>
    16e4:	30 97       	sbiw	r30, 0x00	; 0
    16e6:	09 f0       	breq	.+2      	; 0x16ea <__vector_85+0x42>
		tc_tcd1_cca_callback();
    16e8:	19 95       	eicall
	}
}
    16ea:	ff 91       	pop	r31
    16ec:	ef 91       	pop	r30
    16ee:	bf 91       	pop	r27
    16f0:	af 91       	pop	r26
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	7f 91       	pop	r23
    16f8:	6f 91       	pop	r22
    16fa:	5f 91       	pop	r21
    16fc:	4f 91       	pop	r20
    16fe:	3f 91       	pop	r19
    1700:	2f 91       	pop	r18
    1702:	0f 90       	pop	r0
    1704:	0b be       	out	0x3b, r0	; 59
    1706:	0f 90       	pop	r0
    1708:	09 be       	out	0x39, r0	; 57
    170a:	0f 90       	pop	r0
    170c:	08 be       	out	0x38, r0	; 56
    170e:	0f 90       	pop	r0
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	0f 90       	pop	r0
    1714:	1f 90       	pop	r1
    1716:	18 95       	reti

00001718 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1718:	1f 92       	push	r1
    171a:	0f 92       	push	r0
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	0f 92       	push	r0
    1720:	11 24       	eor	r1, r1
    1722:	08 b6       	in	r0, 0x38	; 56
    1724:	0f 92       	push	r0
    1726:	18 be       	out	0x38, r1	; 56
    1728:	09 b6       	in	r0, 0x39	; 57
    172a:	0f 92       	push	r0
    172c:	19 be       	out	0x39, r1	; 57
    172e:	0b b6       	in	r0, 0x3b	; 59
    1730:	0f 92       	push	r0
    1732:	1b be       	out	0x3b, r1	; 59
    1734:	2f 93       	push	r18
    1736:	3f 93       	push	r19
    1738:	4f 93       	push	r20
    173a:	5f 93       	push	r21
    173c:	6f 93       	push	r22
    173e:	7f 93       	push	r23
    1740:	8f 93       	push	r24
    1742:	9f 93       	push	r25
    1744:	af 93       	push	r26
    1746:	bf 93       	push	r27
    1748:	ef 93       	push	r30
    174a:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    174c:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <tc_tcd1_ccb_callback>
    1750:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <tc_tcd1_ccb_callback+0x1>
    1754:	30 97       	sbiw	r30, 0x00	; 0
    1756:	09 f0       	breq	.+2      	; 0x175a <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    1758:	19 95       	eicall
	}
}
    175a:	ff 91       	pop	r31
    175c:	ef 91       	pop	r30
    175e:	bf 91       	pop	r27
    1760:	af 91       	pop	r26
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	7f 91       	pop	r23
    1768:	6f 91       	pop	r22
    176a:	5f 91       	pop	r21
    176c:	4f 91       	pop	r20
    176e:	3f 91       	pop	r19
    1770:	2f 91       	pop	r18
    1772:	0f 90       	pop	r0
    1774:	0b be       	out	0x3b, r0	; 59
    1776:	0f 90       	pop	r0
    1778:	09 be       	out	0x39, r0	; 57
    177a:	0f 90       	pop	r0
    177c:	08 be       	out	0x38, r0	; 56
    177e:	0f 90       	pop	r0
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	0f 90       	pop	r0
    1784:	1f 90       	pop	r1
    1786:	18 95       	reti

00001788 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	08 b6       	in	r0, 0x38	; 56
    1794:	0f 92       	push	r0
    1796:	18 be       	out	0x38, r1	; 56
    1798:	09 b6       	in	r0, 0x39	; 57
    179a:	0f 92       	push	r0
    179c:	19 be       	out	0x39, r1	; 57
    179e:	0b b6       	in	r0, 0x3b	; 59
    17a0:	0f 92       	push	r0
    17a2:	1b be       	out	0x3b, r1	; 59
    17a4:	2f 93       	push	r18
    17a6:	3f 93       	push	r19
    17a8:	4f 93       	push	r20
    17aa:	5f 93       	push	r21
    17ac:	6f 93       	push	r22
    17ae:	7f 93       	push	r23
    17b0:	8f 93       	push	r24
    17b2:	9f 93       	push	r25
    17b4:	af 93       	push	r26
    17b6:	bf 93       	push	r27
    17b8:	ef 93       	push	r30
    17ba:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    17bc:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <tc_tce0_ovf_callback>
    17c0:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <tc_tce0_ovf_callback+0x1>
    17c4:	30 97       	sbiw	r30, 0x00	; 0
    17c6:	09 f0       	breq	.+2      	; 0x17ca <__vector_47+0x42>
		tc_tce0_ovf_callback();
    17c8:	19 95       	eicall
	}
}
    17ca:	ff 91       	pop	r31
    17cc:	ef 91       	pop	r30
    17ce:	bf 91       	pop	r27
    17d0:	af 91       	pop	r26
    17d2:	9f 91       	pop	r25
    17d4:	8f 91       	pop	r24
    17d6:	7f 91       	pop	r23
    17d8:	6f 91       	pop	r22
    17da:	5f 91       	pop	r21
    17dc:	4f 91       	pop	r20
    17de:	3f 91       	pop	r19
    17e0:	2f 91       	pop	r18
    17e2:	0f 90       	pop	r0
    17e4:	0b be       	out	0x3b, r0	; 59
    17e6:	0f 90       	pop	r0
    17e8:	09 be       	out	0x39, r0	; 57
    17ea:	0f 90       	pop	r0
    17ec:	08 be       	out	0x38, r0	; 56
    17ee:	0f 90       	pop	r0
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	0f 90       	pop	r0
    17f4:	1f 90       	pop	r1
    17f6:	18 95       	reti

000017f8 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    17f8:	1f 92       	push	r1
    17fa:	0f 92       	push	r0
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	0f 92       	push	r0
    1800:	11 24       	eor	r1, r1
    1802:	08 b6       	in	r0, 0x38	; 56
    1804:	0f 92       	push	r0
    1806:	18 be       	out	0x38, r1	; 56
    1808:	09 b6       	in	r0, 0x39	; 57
    180a:	0f 92       	push	r0
    180c:	19 be       	out	0x39, r1	; 57
    180e:	0b b6       	in	r0, 0x3b	; 59
    1810:	0f 92       	push	r0
    1812:	1b be       	out	0x3b, r1	; 59
    1814:	2f 93       	push	r18
    1816:	3f 93       	push	r19
    1818:	4f 93       	push	r20
    181a:	5f 93       	push	r21
    181c:	6f 93       	push	r22
    181e:	7f 93       	push	r23
    1820:	8f 93       	push	r24
    1822:	9f 93       	push	r25
    1824:	af 93       	push	r26
    1826:	bf 93       	push	r27
    1828:	ef 93       	push	r30
    182a:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    182c:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <tc_tce0_err_callback>
    1830:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <tc_tce0_err_callback+0x1>
    1834:	30 97       	sbiw	r30, 0x00	; 0
    1836:	09 f0       	breq	.+2      	; 0x183a <__vector_48+0x42>
		tc_tce0_err_callback();
    1838:	19 95       	eicall
	}
}
    183a:	ff 91       	pop	r31
    183c:	ef 91       	pop	r30
    183e:	bf 91       	pop	r27
    1840:	af 91       	pop	r26
    1842:	9f 91       	pop	r25
    1844:	8f 91       	pop	r24
    1846:	7f 91       	pop	r23
    1848:	6f 91       	pop	r22
    184a:	5f 91       	pop	r21
    184c:	4f 91       	pop	r20
    184e:	3f 91       	pop	r19
    1850:	2f 91       	pop	r18
    1852:	0f 90       	pop	r0
    1854:	0b be       	out	0x3b, r0	; 59
    1856:	0f 90       	pop	r0
    1858:	09 be       	out	0x39, r0	; 57
    185a:	0f 90       	pop	r0
    185c:	08 be       	out	0x38, r0	; 56
    185e:	0f 90       	pop	r0
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	0f 90       	pop	r0
    1864:	1f 90       	pop	r1
    1866:	18 95       	reti

00001868 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	08 b6       	in	r0, 0x38	; 56
    1874:	0f 92       	push	r0
    1876:	18 be       	out	0x38, r1	; 56
    1878:	09 b6       	in	r0, 0x39	; 57
    187a:	0f 92       	push	r0
    187c:	19 be       	out	0x39, r1	; 57
    187e:	0b b6       	in	r0, 0x3b	; 59
    1880:	0f 92       	push	r0
    1882:	1b be       	out	0x3b, r1	; 59
    1884:	2f 93       	push	r18
    1886:	3f 93       	push	r19
    1888:	4f 93       	push	r20
    188a:	5f 93       	push	r21
    188c:	6f 93       	push	r22
    188e:	7f 93       	push	r23
    1890:	8f 93       	push	r24
    1892:	9f 93       	push	r25
    1894:	af 93       	push	r26
    1896:	bf 93       	push	r27
    1898:	ef 93       	push	r30
    189a:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    189c:	e0 91 48 20 	lds	r30, 0x2048	; 0x802048 <tc_tce0_cca_callback>
    18a0:	f0 91 49 20 	lds	r31, 0x2049	; 0x802049 <tc_tce0_cca_callback+0x1>
    18a4:	30 97       	sbiw	r30, 0x00	; 0
    18a6:	09 f0       	breq	.+2      	; 0x18aa <__vector_49+0x42>
		tc_tce0_cca_callback();
    18a8:	19 95       	eicall
	}
}
    18aa:	ff 91       	pop	r31
    18ac:	ef 91       	pop	r30
    18ae:	bf 91       	pop	r27
    18b0:	af 91       	pop	r26
    18b2:	9f 91       	pop	r25
    18b4:	8f 91       	pop	r24
    18b6:	7f 91       	pop	r23
    18b8:	6f 91       	pop	r22
    18ba:	5f 91       	pop	r21
    18bc:	4f 91       	pop	r20
    18be:	3f 91       	pop	r19
    18c0:	2f 91       	pop	r18
    18c2:	0f 90       	pop	r0
    18c4:	0b be       	out	0x3b, r0	; 59
    18c6:	0f 90       	pop	r0
    18c8:	09 be       	out	0x39, r0	; 57
    18ca:	0f 90       	pop	r0
    18cc:	08 be       	out	0x38, r0	; 56
    18ce:	0f 90       	pop	r0
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	0f 90       	pop	r0
    18d4:	1f 90       	pop	r1
    18d6:	18 95       	reti

000018d8 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    18d8:	1f 92       	push	r1
    18da:	0f 92       	push	r0
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	0f 92       	push	r0
    18e0:	11 24       	eor	r1, r1
    18e2:	08 b6       	in	r0, 0x38	; 56
    18e4:	0f 92       	push	r0
    18e6:	18 be       	out	0x38, r1	; 56
    18e8:	09 b6       	in	r0, 0x39	; 57
    18ea:	0f 92       	push	r0
    18ec:	19 be       	out	0x39, r1	; 57
    18ee:	0b b6       	in	r0, 0x3b	; 59
    18f0:	0f 92       	push	r0
    18f2:	1b be       	out	0x3b, r1	; 59
    18f4:	2f 93       	push	r18
    18f6:	3f 93       	push	r19
    18f8:	4f 93       	push	r20
    18fa:	5f 93       	push	r21
    18fc:	6f 93       	push	r22
    18fe:	7f 93       	push	r23
    1900:	8f 93       	push	r24
    1902:	9f 93       	push	r25
    1904:	af 93       	push	r26
    1906:	bf 93       	push	r27
    1908:	ef 93       	push	r30
    190a:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    190c:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tce0_ccb_callback>
    1910:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tce0_ccb_callback+0x1>
    1914:	30 97       	sbiw	r30, 0x00	; 0
    1916:	09 f0       	breq	.+2      	; 0x191a <__vector_50+0x42>
		tc_tce0_ccb_callback();
    1918:	19 95       	eicall
	}
}
    191a:	ff 91       	pop	r31
    191c:	ef 91       	pop	r30
    191e:	bf 91       	pop	r27
    1920:	af 91       	pop	r26
    1922:	9f 91       	pop	r25
    1924:	8f 91       	pop	r24
    1926:	7f 91       	pop	r23
    1928:	6f 91       	pop	r22
    192a:	5f 91       	pop	r21
    192c:	4f 91       	pop	r20
    192e:	3f 91       	pop	r19
    1930:	2f 91       	pop	r18
    1932:	0f 90       	pop	r0
    1934:	0b be       	out	0x3b, r0	; 59
    1936:	0f 90       	pop	r0
    1938:	09 be       	out	0x39, r0	; 57
    193a:	0f 90       	pop	r0
    193c:	08 be       	out	0x38, r0	; 56
    193e:	0f 90       	pop	r0
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	0f 90       	pop	r0
    1944:	1f 90       	pop	r1
    1946:	18 95       	reti

00001948 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1948:	1f 92       	push	r1
    194a:	0f 92       	push	r0
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	0f 92       	push	r0
    1950:	11 24       	eor	r1, r1
    1952:	08 b6       	in	r0, 0x38	; 56
    1954:	0f 92       	push	r0
    1956:	18 be       	out	0x38, r1	; 56
    1958:	09 b6       	in	r0, 0x39	; 57
    195a:	0f 92       	push	r0
    195c:	19 be       	out	0x39, r1	; 57
    195e:	0b b6       	in	r0, 0x3b	; 59
    1960:	0f 92       	push	r0
    1962:	1b be       	out	0x3b, r1	; 59
    1964:	2f 93       	push	r18
    1966:	3f 93       	push	r19
    1968:	4f 93       	push	r20
    196a:	5f 93       	push	r21
    196c:	6f 93       	push	r22
    196e:	7f 93       	push	r23
    1970:	8f 93       	push	r24
    1972:	9f 93       	push	r25
    1974:	af 93       	push	r26
    1976:	bf 93       	push	r27
    1978:	ef 93       	push	r30
    197a:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    197c:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tce0_ccc_callback>
    1980:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tce0_ccc_callback+0x1>
    1984:	30 97       	sbiw	r30, 0x00	; 0
    1986:	09 f0       	breq	.+2      	; 0x198a <__vector_51+0x42>
		tc_tce0_ccc_callback();
    1988:	19 95       	eicall
	}
}
    198a:	ff 91       	pop	r31
    198c:	ef 91       	pop	r30
    198e:	bf 91       	pop	r27
    1990:	af 91       	pop	r26
    1992:	9f 91       	pop	r25
    1994:	8f 91       	pop	r24
    1996:	7f 91       	pop	r23
    1998:	6f 91       	pop	r22
    199a:	5f 91       	pop	r21
    199c:	4f 91       	pop	r20
    199e:	3f 91       	pop	r19
    19a0:	2f 91       	pop	r18
    19a2:	0f 90       	pop	r0
    19a4:	0b be       	out	0x3b, r0	; 59
    19a6:	0f 90       	pop	r0
    19a8:	09 be       	out	0x39, r0	; 57
    19aa:	0f 90       	pop	r0
    19ac:	08 be       	out	0x38, r0	; 56
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	0f 90       	pop	r0
    19b4:	1f 90       	pop	r1
    19b6:	18 95       	reti

000019b8 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    19b8:	1f 92       	push	r1
    19ba:	0f 92       	push	r0
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	0f 92       	push	r0
    19c0:	11 24       	eor	r1, r1
    19c2:	08 b6       	in	r0, 0x38	; 56
    19c4:	0f 92       	push	r0
    19c6:	18 be       	out	0x38, r1	; 56
    19c8:	09 b6       	in	r0, 0x39	; 57
    19ca:	0f 92       	push	r0
    19cc:	19 be       	out	0x39, r1	; 57
    19ce:	0b b6       	in	r0, 0x3b	; 59
    19d0:	0f 92       	push	r0
    19d2:	1b be       	out	0x3b, r1	; 59
    19d4:	2f 93       	push	r18
    19d6:	3f 93       	push	r19
    19d8:	4f 93       	push	r20
    19da:	5f 93       	push	r21
    19dc:	6f 93       	push	r22
    19de:	7f 93       	push	r23
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	af 93       	push	r26
    19e6:	bf 93       	push	r27
    19e8:	ef 93       	push	r30
    19ea:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    19ec:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tce0_ccd_callback>
    19f0:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tce0_ccd_callback+0x1>
    19f4:	30 97       	sbiw	r30, 0x00	; 0
    19f6:	09 f0       	breq	.+2      	; 0x19fa <__vector_52+0x42>
		tc_tce0_ccd_callback();
    19f8:	19 95       	eicall
	}
}
    19fa:	ff 91       	pop	r31
    19fc:	ef 91       	pop	r30
    19fe:	bf 91       	pop	r27
    1a00:	af 91       	pop	r26
    1a02:	9f 91       	pop	r25
    1a04:	8f 91       	pop	r24
    1a06:	7f 91       	pop	r23
    1a08:	6f 91       	pop	r22
    1a0a:	5f 91       	pop	r21
    1a0c:	4f 91       	pop	r20
    1a0e:	3f 91       	pop	r19
    1a10:	2f 91       	pop	r18
    1a12:	0f 90       	pop	r0
    1a14:	0b be       	out	0x3b, r0	; 59
    1a16:	0f 90       	pop	r0
    1a18:	09 be       	out	0x39, r0	; 57
    1a1a:	0f 90       	pop	r0
    1a1c:	08 be       	out	0x38, r0	; 56
    1a1e:	0f 90       	pop	r0
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	0f 90       	pop	r0
    1a24:	1f 90       	pop	r1
    1a26:	18 95       	reti

00001a28 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1a28:	1f 92       	push	r1
    1a2a:	0f 92       	push	r0
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	0f 92       	push	r0
    1a30:	11 24       	eor	r1, r1
    1a32:	08 b6       	in	r0, 0x38	; 56
    1a34:	0f 92       	push	r0
    1a36:	18 be       	out	0x38, r1	; 56
    1a38:	09 b6       	in	r0, 0x39	; 57
    1a3a:	0f 92       	push	r0
    1a3c:	19 be       	out	0x39, r1	; 57
    1a3e:	0b b6       	in	r0, 0x3b	; 59
    1a40:	0f 92       	push	r0
    1a42:	1b be       	out	0x3b, r1	; 59
    1a44:	2f 93       	push	r18
    1a46:	3f 93       	push	r19
    1a48:	4f 93       	push	r20
    1a4a:	5f 93       	push	r21
    1a4c:	6f 93       	push	r22
    1a4e:	7f 93       	push	r23
    1a50:	8f 93       	push	r24
    1a52:	9f 93       	push	r25
    1a54:	af 93       	push	r26
    1a56:	bf 93       	push	r27
    1a58:	ef 93       	push	r30
    1a5a:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1a5c:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <tc_tce1_ovf_callback>
    1a60:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <tc_tce1_ovf_callback+0x1>
    1a64:	30 97       	sbiw	r30, 0x00	; 0
    1a66:	09 f0       	breq	.+2      	; 0x1a6a <__vector_53+0x42>
		tc_tce1_ovf_callback();
    1a68:	19 95       	eicall
	}
}
    1a6a:	ff 91       	pop	r31
    1a6c:	ef 91       	pop	r30
    1a6e:	bf 91       	pop	r27
    1a70:	af 91       	pop	r26
    1a72:	9f 91       	pop	r25
    1a74:	8f 91       	pop	r24
    1a76:	7f 91       	pop	r23
    1a78:	6f 91       	pop	r22
    1a7a:	5f 91       	pop	r21
    1a7c:	4f 91       	pop	r20
    1a7e:	3f 91       	pop	r19
    1a80:	2f 91       	pop	r18
    1a82:	0f 90       	pop	r0
    1a84:	0b be       	out	0x3b, r0	; 59
    1a86:	0f 90       	pop	r0
    1a88:	09 be       	out	0x39, r0	; 57
    1a8a:	0f 90       	pop	r0
    1a8c:	08 be       	out	0x38, r0	; 56
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	0f 90       	pop	r0
    1a94:	1f 90       	pop	r1
    1a96:	18 95       	reti

00001a98 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1a98:	1f 92       	push	r1
    1a9a:	0f 92       	push	r0
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	0f 92       	push	r0
    1aa0:	11 24       	eor	r1, r1
    1aa2:	08 b6       	in	r0, 0x38	; 56
    1aa4:	0f 92       	push	r0
    1aa6:	18 be       	out	0x38, r1	; 56
    1aa8:	09 b6       	in	r0, 0x39	; 57
    1aaa:	0f 92       	push	r0
    1aac:	19 be       	out	0x39, r1	; 57
    1aae:	0b b6       	in	r0, 0x3b	; 59
    1ab0:	0f 92       	push	r0
    1ab2:	1b be       	out	0x3b, r1	; 59
    1ab4:	2f 93       	push	r18
    1ab6:	3f 93       	push	r19
    1ab8:	4f 93       	push	r20
    1aba:	5f 93       	push	r21
    1abc:	6f 93       	push	r22
    1abe:	7f 93       	push	r23
    1ac0:	8f 93       	push	r24
    1ac2:	9f 93       	push	r25
    1ac4:	af 93       	push	r26
    1ac6:	bf 93       	push	r27
    1ac8:	ef 93       	push	r30
    1aca:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1acc:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <tc_tce1_err_callback>
    1ad0:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <tc_tce1_err_callback+0x1>
    1ad4:	30 97       	sbiw	r30, 0x00	; 0
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <__vector_54+0x42>
		tc_tce1_err_callback();
    1ad8:	19 95       	eicall
	}
}
    1ada:	ff 91       	pop	r31
    1adc:	ef 91       	pop	r30
    1ade:	bf 91       	pop	r27
    1ae0:	af 91       	pop	r26
    1ae2:	9f 91       	pop	r25
    1ae4:	8f 91       	pop	r24
    1ae6:	7f 91       	pop	r23
    1ae8:	6f 91       	pop	r22
    1aea:	5f 91       	pop	r21
    1aec:	4f 91       	pop	r20
    1aee:	3f 91       	pop	r19
    1af0:	2f 91       	pop	r18
    1af2:	0f 90       	pop	r0
    1af4:	0b be       	out	0x3b, r0	; 59
    1af6:	0f 90       	pop	r0
    1af8:	09 be       	out	0x39, r0	; 57
    1afa:	0f 90       	pop	r0
    1afc:	08 be       	out	0x38, r0	; 56
    1afe:	0f 90       	pop	r0
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	0f 90       	pop	r0
    1b04:	1f 90       	pop	r1
    1b06:	18 95       	reti

00001b08 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1b08:	1f 92       	push	r1
    1b0a:	0f 92       	push	r0
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	0f 92       	push	r0
    1b10:	11 24       	eor	r1, r1
    1b12:	08 b6       	in	r0, 0x38	; 56
    1b14:	0f 92       	push	r0
    1b16:	18 be       	out	0x38, r1	; 56
    1b18:	09 b6       	in	r0, 0x39	; 57
    1b1a:	0f 92       	push	r0
    1b1c:	19 be       	out	0x39, r1	; 57
    1b1e:	0b b6       	in	r0, 0x3b	; 59
    1b20:	0f 92       	push	r0
    1b22:	1b be       	out	0x3b, r1	; 59
    1b24:	2f 93       	push	r18
    1b26:	3f 93       	push	r19
    1b28:	4f 93       	push	r20
    1b2a:	5f 93       	push	r21
    1b2c:	6f 93       	push	r22
    1b2e:	7f 93       	push	r23
    1b30:	8f 93       	push	r24
    1b32:	9f 93       	push	r25
    1b34:	af 93       	push	r26
    1b36:	bf 93       	push	r27
    1b38:	ef 93       	push	r30
    1b3a:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1b3c:	e0 91 3c 20 	lds	r30, 0x203C	; 0x80203c <tc_tce1_cca_callback>
    1b40:	f0 91 3d 20 	lds	r31, 0x203D	; 0x80203d <tc_tce1_cca_callback+0x1>
    1b44:	30 97       	sbiw	r30, 0x00	; 0
    1b46:	09 f0       	breq	.+2      	; 0x1b4a <__vector_55+0x42>
		tc_tce1_cca_callback();
    1b48:	19 95       	eicall
	}
}
    1b4a:	ff 91       	pop	r31
    1b4c:	ef 91       	pop	r30
    1b4e:	bf 91       	pop	r27
    1b50:	af 91       	pop	r26
    1b52:	9f 91       	pop	r25
    1b54:	8f 91       	pop	r24
    1b56:	7f 91       	pop	r23
    1b58:	6f 91       	pop	r22
    1b5a:	5f 91       	pop	r21
    1b5c:	4f 91       	pop	r20
    1b5e:	3f 91       	pop	r19
    1b60:	2f 91       	pop	r18
    1b62:	0f 90       	pop	r0
    1b64:	0b be       	out	0x3b, r0	; 59
    1b66:	0f 90       	pop	r0
    1b68:	09 be       	out	0x39, r0	; 57
    1b6a:	0f 90       	pop	r0
    1b6c:	08 be       	out	0x38, r0	; 56
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	0f 90       	pop	r0
    1b74:	1f 90       	pop	r1
    1b76:	18 95       	reti

00001b78 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1b78:	1f 92       	push	r1
    1b7a:	0f 92       	push	r0
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	0f 92       	push	r0
    1b80:	11 24       	eor	r1, r1
    1b82:	08 b6       	in	r0, 0x38	; 56
    1b84:	0f 92       	push	r0
    1b86:	18 be       	out	0x38, r1	; 56
    1b88:	09 b6       	in	r0, 0x39	; 57
    1b8a:	0f 92       	push	r0
    1b8c:	19 be       	out	0x39, r1	; 57
    1b8e:	0b b6       	in	r0, 0x3b	; 59
    1b90:	0f 92       	push	r0
    1b92:	1b be       	out	0x3b, r1	; 59
    1b94:	2f 93       	push	r18
    1b96:	3f 93       	push	r19
    1b98:	4f 93       	push	r20
    1b9a:	5f 93       	push	r21
    1b9c:	6f 93       	push	r22
    1b9e:	7f 93       	push	r23
    1ba0:	8f 93       	push	r24
    1ba2:	9f 93       	push	r25
    1ba4:	af 93       	push	r26
    1ba6:	bf 93       	push	r27
    1ba8:	ef 93       	push	r30
    1baa:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1bac:	e0 91 3a 20 	lds	r30, 0x203A	; 0x80203a <tc_tce1_ccb_callback>
    1bb0:	f0 91 3b 20 	lds	r31, 0x203B	; 0x80203b <tc_tce1_ccb_callback+0x1>
    1bb4:	30 97       	sbiw	r30, 0x00	; 0
    1bb6:	09 f0       	breq	.+2      	; 0x1bba <__vector_56+0x42>
		tc_tce1_ccb_callback();
    1bb8:	19 95       	eicall
	}
}
    1bba:	ff 91       	pop	r31
    1bbc:	ef 91       	pop	r30
    1bbe:	bf 91       	pop	r27
    1bc0:	af 91       	pop	r26
    1bc2:	9f 91       	pop	r25
    1bc4:	8f 91       	pop	r24
    1bc6:	7f 91       	pop	r23
    1bc8:	6f 91       	pop	r22
    1bca:	5f 91       	pop	r21
    1bcc:	4f 91       	pop	r20
    1bce:	3f 91       	pop	r19
    1bd0:	2f 91       	pop	r18
    1bd2:	0f 90       	pop	r0
    1bd4:	0b be       	out	0x3b, r0	; 59
    1bd6:	0f 90       	pop	r0
    1bd8:	09 be       	out	0x39, r0	; 57
    1bda:	0f 90       	pop	r0
    1bdc:	08 be       	out	0x38, r0	; 56
    1bde:	0f 90       	pop	r0
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	0f 90       	pop	r0
    1be4:	1f 90       	pop	r1
    1be6:	18 95       	reti

00001be8 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1be8:	1f 92       	push	r1
    1bea:	0f 92       	push	r0
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	0f 92       	push	r0
    1bf0:	11 24       	eor	r1, r1
    1bf2:	08 b6       	in	r0, 0x38	; 56
    1bf4:	0f 92       	push	r0
    1bf6:	18 be       	out	0x38, r1	; 56
    1bf8:	09 b6       	in	r0, 0x39	; 57
    1bfa:	0f 92       	push	r0
    1bfc:	19 be       	out	0x39, r1	; 57
    1bfe:	0b b6       	in	r0, 0x3b	; 59
    1c00:	0f 92       	push	r0
    1c02:	1b be       	out	0x3b, r1	; 59
    1c04:	2f 93       	push	r18
    1c06:	3f 93       	push	r19
    1c08:	4f 93       	push	r20
    1c0a:	5f 93       	push	r21
    1c0c:	6f 93       	push	r22
    1c0e:	7f 93       	push	r23
    1c10:	8f 93       	push	r24
    1c12:	9f 93       	push	r25
    1c14:	af 93       	push	r26
    1c16:	bf 93       	push	r27
    1c18:	ef 93       	push	r30
    1c1a:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1c1c:	e0 91 38 20 	lds	r30, 0x2038	; 0x802038 <tc_tcf0_ovf_callback>
    1c20:	f0 91 39 20 	lds	r31, 0x2039	; 0x802039 <tc_tcf0_ovf_callback+0x1>
    1c24:	30 97       	sbiw	r30, 0x00	; 0
    1c26:	09 f0       	breq	.+2      	; 0x1c2a <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    1c28:	19 95       	eicall
	}
}
    1c2a:	ff 91       	pop	r31
    1c2c:	ef 91       	pop	r30
    1c2e:	bf 91       	pop	r27
    1c30:	af 91       	pop	r26
    1c32:	9f 91       	pop	r25
    1c34:	8f 91       	pop	r24
    1c36:	7f 91       	pop	r23
    1c38:	6f 91       	pop	r22
    1c3a:	5f 91       	pop	r21
    1c3c:	4f 91       	pop	r20
    1c3e:	3f 91       	pop	r19
    1c40:	2f 91       	pop	r18
    1c42:	0f 90       	pop	r0
    1c44:	0b be       	out	0x3b, r0	; 59
    1c46:	0f 90       	pop	r0
    1c48:	09 be       	out	0x39, r0	; 57
    1c4a:	0f 90       	pop	r0
    1c4c:	08 be       	out	0x38, r0	; 56
    1c4e:	0f 90       	pop	r0
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	0f 90       	pop	r0
    1c54:	1f 90       	pop	r1
    1c56:	18 95       	reti

00001c58 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1c58:	1f 92       	push	r1
    1c5a:	0f 92       	push	r0
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	0f 92       	push	r0
    1c60:	11 24       	eor	r1, r1
    1c62:	08 b6       	in	r0, 0x38	; 56
    1c64:	0f 92       	push	r0
    1c66:	18 be       	out	0x38, r1	; 56
    1c68:	09 b6       	in	r0, 0x39	; 57
    1c6a:	0f 92       	push	r0
    1c6c:	19 be       	out	0x39, r1	; 57
    1c6e:	0b b6       	in	r0, 0x3b	; 59
    1c70:	0f 92       	push	r0
    1c72:	1b be       	out	0x3b, r1	; 59
    1c74:	2f 93       	push	r18
    1c76:	3f 93       	push	r19
    1c78:	4f 93       	push	r20
    1c7a:	5f 93       	push	r21
    1c7c:	6f 93       	push	r22
    1c7e:	7f 93       	push	r23
    1c80:	8f 93       	push	r24
    1c82:	9f 93       	push	r25
    1c84:	af 93       	push	r26
    1c86:	bf 93       	push	r27
    1c88:	ef 93       	push	r30
    1c8a:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1c8c:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <tc_tcf0_err_callback>
    1c90:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <tc_tcf0_err_callback+0x1>
    1c94:	30 97       	sbiw	r30, 0x00	; 0
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <__vector_109+0x42>
		tc_tcf0_err_callback();
    1c98:	19 95       	eicall
	}
}
    1c9a:	ff 91       	pop	r31
    1c9c:	ef 91       	pop	r30
    1c9e:	bf 91       	pop	r27
    1ca0:	af 91       	pop	r26
    1ca2:	9f 91       	pop	r25
    1ca4:	8f 91       	pop	r24
    1ca6:	7f 91       	pop	r23
    1ca8:	6f 91       	pop	r22
    1caa:	5f 91       	pop	r21
    1cac:	4f 91       	pop	r20
    1cae:	3f 91       	pop	r19
    1cb0:	2f 91       	pop	r18
    1cb2:	0f 90       	pop	r0
    1cb4:	0b be       	out	0x3b, r0	; 59
    1cb6:	0f 90       	pop	r0
    1cb8:	09 be       	out	0x39, r0	; 57
    1cba:	0f 90       	pop	r0
    1cbc:	08 be       	out	0x38, r0	; 56
    1cbe:	0f 90       	pop	r0
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	0f 90       	pop	r0
    1cc4:	1f 90       	pop	r1
    1cc6:	18 95       	reti

00001cc8 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1cc8:	1f 92       	push	r1
    1cca:	0f 92       	push	r0
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	0f 92       	push	r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	08 b6       	in	r0, 0x38	; 56
    1cd4:	0f 92       	push	r0
    1cd6:	18 be       	out	0x38, r1	; 56
    1cd8:	09 b6       	in	r0, 0x39	; 57
    1cda:	0f 92       	push	r0
    1cdc:	19 be       	out	0x39, r1	; 57
    1cde:	0b b6       	in	r0, 0x3b	; 59
    1ce0:	0f 92       	push	r0
    1ce2:	1b be       	out	0x3b, r1	; 59
    1ce4:	2f 93       	push	r18
    1ce6:	3f 93       	push	r19
    1ce8:	4f 93       	push	r20
    1cea:	5f 93       	push	r21
    1cec:	6f 93       	push	r22
    1cee:	7f 93       	push	r23
    1cf0:	8f 93       	push	r24
    1cf2:	9f 93       	push	r25
    1cf4:	af 93       	push	r26
    1cf6:	bf 93       	push	r27
    1cf8:	ef 93       	push	r30
    1cfa:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1cfc:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <tc_tcf0_cca_callback>
    1d00:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <tc_tcf0_cca_callback+0x1>
    1d04:	30 97       	sbiw	r30, 0x00	; 0
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <__vector_110+0x42>
		tc_tcf0_cca_callback();
    1d08:	19 95       	eicall
	}
}
    1d0a:	ff 91       	pop	r31
    1d0c:	ef 91       	pop	r30
    1d0e:	bf 91       	pop	r27
    1d10:	af 91       	pop	r26
    1d12:	9f 91       	pop	r25
    1d14:	8f 91       	pop	r24
    1d16:	7f 91       	pop	r23
    1d18:	6f 91       	pop	r22
    1d1a:	5f 91       	pop	r21
    1d1c:	4f 91       	pop	r20
    1d1e:	3f 91       	pop	r19
    1d20:	2f 91       	pop	r18
    1d22:	0f 90       	pop	r0
    1d24:	0b be       	out	0x3b, r0	; 59
    1d26:	0f 90       	pop	r0
    1d28:	09 be       	out	0x39, r0	; 57
    1d2a:	0f 90       	pop	r0
    1d2c:	08 be       	out	0x38, r0	; 56
    1d2e:	0f 90       	pop	r0
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	0f 90       	pop	r0
    1d34:	1f 90       	pop	r1
    1d36:	18 95       	reti

00001d38 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1d38:	1f 92       	push	r1
    1d3a:	0f 92       	push	r0
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	0f 92       	push	r0
    1d40:	11 24       	eor	r1, r1
    1d42:	08 b6       	in	r0, 0x38	; 56
    1d44:	0f 92       	push	r0
    1d46:	18 be       	out	0x38, r1	; 56
    1d48:	09 b6       	in	r0, 0x39	; 57
    1d4a:	0f 92       	push	r0
    1d4c:	19 be       	out	0x39, r1	; 57
    1d4e:	0b b6       	in	r0, 0x3b	; 59
    1d50:	0f 92       	push	r0
    1d52:	1b be       	out	0x3b, r1	; 59
    1d54:	2f 93       	push	r18
    1d56:	3f 93       	push	r19
    1d58:	4f 93       	push	r20
    1d5a:	5f 93       	push	r21
    1d5c:	6f 93       	push	r22
    1d5e:	7f 93       	push	r23
    1d60:	8f 93       	push	r24
    1d62:	9f 93       	push	r25
    1d64:	af 93       	push	r26
    1d66:	bf 93       	push	r27
    1d68:	ef 93       	push	r30
    1d6a:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1d6c:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <tc_tcf0_ccb_callback>
    1d70:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <tc_tcf0_ccb_callback+0x1>
    1d74:	30 97       	sbiw	r30, 0x00	; 0
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1d78:	19 95       	eicall
	}
}
    1d7a:	ff 91       	pop	r31
    1d7c:	ef 91       	pop	r30
    1d7e:	bf 91       	pop	r27
    1d80:	af 91       	pop	r26
    1d82:	9f 91       	pop	r25
    1d84:	8f 91       	pop	r24
    1d86:	7f 91       	pop	r23
    1d88:	6f 91       	pop	r22
    1d8a:	5f 91       	pop	r21
    1d8c:	4f 91       	pop	r20
    1d8e:	3f 91       	pop	r19
    1d90:	2f 91       	pop	r18
    1d92:	0f 90       	pop	r0
    1d94:	0b be       	out	0x3b, r0	; 59
    1d96:	0f 90       	pop	r0
    1d98:	09 be       	out	0x39, r0	; 57
    1d9a:	0f 90       	pop	r0
    1d9c:	08 be       	out	0x38, r0	; 56
    1d9e:	0f 90       	pop	r0
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	0f 90       	pop	r0
    1da4:	1f 90       	pop	r1
    1da6:	18 95       	reti

00001da8 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1da8:	1f 92       	push	r1
    1daa:	0f 92       	push	r0
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	0f 92       	push	r0
    1db0:	11 24       	eor	r1, r1
    1db2:	08 b6       	in	r0, 0x38	; 56
    1db4:	0f 92       	push	r0
    1db6:	18 be       	out	0x38, r1	; 56
    1db8:	09 b6       	in	r0, 0x39	; 57
    1dba:	0f 92       	push	r0
    1dbc:	19 be       	out	0x39, r1	; 57
    1dbe:	0b b6       	in	r0, 0x3b	; 59
    1dc0:	0f 92       	push	r0
    1dc2:	1b be       	out	0x3b, r1	; 59
    1dc4:	2f 93       	push	r18
    1dc6:	3f 93       	push	r19
    1dc8:	4f 93       	push	r20
    1dca:	5f 93       	push	r21
    1dcc:	6f 93       	push	r22
    1dce:	7f 93       	push	r23
    1dd0:	8f 93       	push	r24
    1dd2:	9f 93       	push	r25
    1dd4:	af 93       	push	r26
    1dd6:	bf 93       	push	r27
    1dd8:	ef 93       	push	r30
    1dda:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1ddc:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <tc_tcf0_ccc_callback>
    1de0:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <tc_tcf0_ccc_callback+0x1>
    1de4:	30 97       	sbiw	r30, 0x00	; 0
    1de6:	09 f0       	breq	.+2      	; 0x1dea <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    1de8:	19 95       	eicall
	}
}
    1dea:	ff 91       	pop	r31
    1dec:	ef 91       	pop	r30
    1dee:	bf 91       	pop	r27
    1df0:	af 91       	pop	r26
    1df2:	9f 91       	pop	r25
    1df4:	8f 91       	pop	r24
    1df6:	7f 91       	pop	r23
    1df8:	6f 91       	pop	r22
    1dfa:	5f 91       	pop	r21
    1dfc:	4f 91       	pop	r20
    1dfe:	3f 91       	pop	r19
    1e00:	2f 91       	pop	r18
    1e02:	0f 90       	pop	r0
    1e04:	0b be       	out	0x3b, r0	; 59
    1e06:	0f 90       	pop	r0
    1e08:	09 be       	out	0x39, r0	; 57
    1e0a:	0f 90       	pop	r0
    1e0c:	08 be       	out	0x38, r0	; 56
    1e0e:	0f 90       	pop	r0
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	0f 90       	pop	r0
    1e14:	1f 90       	pop	r1
    1e16:	18 95       	reti

00001e18 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1e18:	1f 92       	push	r1
    1e1a:	0f 92       	push	r0
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	0f 92       	push	r0
    1e20:	11 24       	eor	r1, r1
    1e22:	08 b6       	in	r0, 0x38	; 56
    1e24:	0f 92       	push	r0
    1e26:	18 be       	out	0x38, r1	; 56
    1e28:	09 b6       	in	r0, 0x39	; 57
    1e2a:	0f 92       	push	r0
    1e2c:	19 be       	out	0x39, r1	; 57
    1e2e:	0b b6       	in	r0, 0x3b	; 59
    1e30:	0f 92       	push	r0
    1e32:	1b be       	out	0x3b, r1	; 59
    1e34:	2f 93       	push	r18
    1e36:	3f 93       	push	r19
    1e38:	4f 93       	push	r20
    1e3a:	5f 93       	push	r21
    1e3c:	6f 93       	push	r22
    1e3e:	7f 93       	push	r23
    1e40:	8f 93       	push	r24
    1e42:	9f 93       	push	r25
    1e44:	af 93       	push	r26
    1e46:	bf 93       	push	r27
    1e48:	ef 93       	push	r30
    1e4a:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1e4c:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <tc_tcf0_ccd_callback>
    1e50:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <tc_tcf0_ccd_callback+0x1>
    1e54:	30 97       	sbiw	r30, 0x00	; 0
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1e58:	19 95       	eicall
	}
}
    1e5a:	ff 91       	pop	r31
    1e5c:	ef 91       	pop	r30
    1e5e:	bf 91       	pop	r27
    1e60:	af 91       	pop	r26
    1e62:	9f 91       	pop	r25
    1e64:	8f 91       	pop	r24
    1e66:	7f 91       	pop	r23
    1e68:	6f 91       	pop	r22
    1e6a:	5f 91       	pop	r21
    1e6c:	4f 91       	pop	r20
    1e6e:	3f 91       	pop	r19
    1e70:	2f 91       	pop	r18
    1e72:	0f 90       	pop	r0
    1e74:	0b be       	out	0x3b, r0	; 59
    1e76:	0f 90       	pop	r0
    1e78:	09 be       	out	0x39, r0	; 57
    1e7a:	0f 90       	pop	r0
    1e7c:	08 be       	out	0x38, r0	; 56
    1e7e:	0f 90       	pop	r0
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	0f 90       	pop	r0
    1e84:	1f 90       	pop	r1
    1e86:	18 95       	reti

00001e88 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1e88:	1f 92       	push	r1
    1e8a:	0f 92       	push	r0
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	0f 92       	push	r0
    1e90:	11 24       	eor	r1, r1
    1e92:	08 b6       	in	r0, 0x38	; 56
    1e94:	0f 92       	push	r0
    1e96:	18 be       	out	0x38, r1	; 56
    1e98:	09 b6       	in	r0, 0x39	; 57
    1e9a:	0f 92       	push	r0
    1e9c:	19 be       	out	0x39, r1	; 57
    1e9e:	0b b6       	in	r0, 0x3b	; 59
    1ea0:	0f 92       	push	r0
    1ea2:	1b be       	out	0x3b, r1	; 59
    1ea4:	2f 93       	push	r18
    1ea6:	3f 93       	push	r19
    1ea8:	4f 93       	push	r20
    1eaa:	5f 93       	push	r21
    1eac:	6f 93       	push	r22
    1eae:	7f 93       	push	r23
    1eb0:	8f 93       	push	r24
    1eb2:	9f 93       	push	r25
    1eb4:	af 93       	push	r26
    1eb6:	bf 93       	push	r27
    1eb8:	ef 93       	push	r30
    1eba:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1ebc:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <tc_tcf1_ovf_callback>
    1ec0:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <tc_tcf1_ovf_callback+0x1>
    1ec4:	30 97       	sbiw	r30, 0x00	; 0
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1ec8:	19 95       	eicall
	}
}
    1eca:	ff 91       	pop	r31
    1ecc:	ef 91       	pop	r30
    1ece:	bf 91       	pop	r27
    1ed0:	af 91       	pop	r26
    1ed2:	9f 91       	pop	r25
    1ed4:	8f 91       	pop	r24
    1ed6:	7f 91       	pop	r23
    1ed8:	6f 91       	pop	r22
    1eda:	5f 91       	pop	r21
    1edc:	4f 91       	pop	r20
    1ede:	3f 91       	pop	r19
    1ee0:	2f 91       	pop	r18
    1ee2:	0f 90       	pop	r0
    1ee4:	0b be       	out	0x3b, r0	; 59
    1ee6:	0f 90       	pop	r0
    1ee8:	09 be       	out	0x39, r0	; 57
    1eea:	0f 90       	pop	r0
    1eec:	08 be       	out	0x38, r0	; 56
    1eee:	0f 90       	pop	r0
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	0f 90       	pop	r0
    1ef4:	1f 90       	pop	r1
    1ef6:	18 95       	reti

00001ef8 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    1ef8:	1f 92       	push	r1
    1efa:	0f 92       	push	r0
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	0f 92       	push	r0
    1f00:	11 24       	eor	r1, r1
    1f02:	08 b6       	in	r0, 0x38	; 56
    1f04:	0f 92       	push	r0
    1f06:	18 be       	out	0x38, r1	; 56
    1f08:	09 b6       	in	r0, 0x39	; 57
    1f0a:	0f 92       	push	r0
    1f0c:	19 be       	out	0x39, r1	; 57
    1f0e:	0b b6       	in	r0, 0x3b	; 59
    1f10:	0f 92       	push	r0
    1f12:	1b be       	out	0x3b, r1	; 59
    1f14:	2f 93       	push	r18
    1f16:	3f 93       	push	r19
    1f18:	4f 93       	push	r20
    1f1a:	5f 93       	push	r21
    1f1c:	6f 93       	push	r22
    1f1e:	7f 93       	push	r23
    1f20:	8f 93       	push	r24
    1f22:	9f 93       	push	r25
    1f24:	af 93       	push	r26
    1f26:	bf 93       	push	r27
    1f28:	ef 93       	push	r30
    1f2a:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    1f2c:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <tc_tcf1_err_callback>
    1f30:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <tc_tcf1_err_callback+0x1>
    1f34:	30 97       	sbiw	r30, 0x00	; 0
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <__vector_115+0x42>
		tc_tcf1_err_callback();
    1f38:	19 95       	eicall
	}
}
    1f3a:	ff 91       	pop	r31
    1f3c:	ef 91       	pop	r30
    1f3e:	bf 91       	pop	r27
    1f40:	af 91       	pop	r26
    1f42:	9f 91       	pop	r25
    1f44:	8f 91       	pop	r24
    1f46:	7f 91       	pop	r23
    1f48:	6f 91       	pop	r22
    1f4a:	5f 91       	pop	r21
    1f4c:	4f 91       	pop	r20
    1f4e:	3f 91       	pop	r19
    1f50:	2f 91       	pop	r18
    1f52:	0f 90       	pop	r0
    1f54:	0b be       	out	0x3b, r0	; 59
    1f56:	0f 90       	pop	r0
    1f58:	09 be       	out	0x39, r0	; 57
    1f5a:	0f 90       	pop	r0
    1f5c:	08 be       	out	0x38, r0	; 56
    1f5e:	0f 90       	pop	r0
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	0f 90       	pop	r0
    1f64:	1f 90       	pop	r1
    1f66:	18 95       	reti

00001f68 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1f68:	1f 92       	push	r1
    1f6a:	0f 92       	push	r0
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	0f 92       	push	r0
    1f70:	11 24       	eor	r1, r1
    1f72:	08 b6       	in	r0, 0x38	; 56
    1f74:	0f 92       	push	r0
    1f76:	18 be       	out	0x38, r1	; 56
    1f78:	09 b6       	in	r0, 0x39	; 57
    1f7a:	0f 92       	push	r0
    1f7c:	19 be       	out	0x39, r1	; 57
    1f7e:	0b b6       	in	r0, 0x3b	; 59
    1f80:	0f 92       	push	r0
    1f82:	1b be       	out	0x3b, r1	; 59
    1f84:	2f 93       	push	r18
    1f86:	3f 93       	push	r19
    1f88:	4f 93       	push	r20
    1f8a:	5f 93       	push	r21
    1f8c:	6f 93       	push	r22
    1f8e:	7f 93       	push	r23
    1f90:	8f 93       	push	r24
    1f92:	9f 93       	push	r25
    1f94:	af 93       	push	r26
    1f96:	bf 93       	push	r27
    1f98:	ef 93       	push	r30
    1f9a:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1f9c:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <tc_tcf1_cca_callback>
    1fa0:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <tc_tcf1_cca_callback+0x1>
    1fa4:	30 97       	sbiw	r30, 0x00	; 0
    1fa6:	09 f0       	breq	.+2      	; 0x1faa <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1fa8:	19 95       	eicall
	}
}
    1faa:	ff 91       	pop	r31
    1fac:	ef 91       	pop	r30
    1fae:	bf 91       	pop	r27
    1fb0:	af 91       	pop	r26
    1fb2:	9f 91       	pop	r25
    1fb4:	8f 91       	pop	r24
    1fb6:	7f 91       	pop	r23
    1fb8:	6f 91       	pop	r22
    1fba:	5f 91       	pop	r21
    1fbc:	4f 91       	pop	r20
    1fbe:	3f 91       	pop	r19
    1fc0:	2f 91       	pop	r18
    1fc2:	0f 90       	pop	r0
    1fc4:	0b be       	out	0x3b, r0	; 59
    1fc6:	0f 90       	pop	r0
    1fc8:	09 be       	out	0x39, r0	; 57
    1fca:	0f 90       	pop	r0
    1fcc:	08 be       	out	0x38, r0	; 56
    1fce:	0f 90       	pop	r0
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	0f 90       	pop	r0
    1fd4:	1f 90       	pop	r1
    1fd6:	18 95       	reti

00001fd8 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1fd8:	1f 92       	push	r1
    1fda:	0f 92       	push	r0
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	0f 92       	push	r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	08 b6       	in	r0, 0x38	; 56
    1fe4:	0f 92       	push	r0
    1fe6:	18 be       	out	0x38, r1	; 56
    1fe8:	09 b6       	in	r0, 0x39	; 57
    1fea:	0f 92       	push	r0
    1fec:	19 be       	out	0x39, r1	; 57
    1fee:	0b b6       	in	r0, 0x3b	; 59
    1ff0:	0f 92       	push	r0
    1ff2:	1b be       	out	0x3b, r1	; 59
    1ff4:	2f 93       	push	r18
    1ff6:	3f 93       	push	r19
    1ff8:	4f 93       	push	r20
    1ffa:	5f 93       	push	r21
    1ffc:	6f 93       	push	r22
    1ffe:	7f 93       	push	r23
    2000:	8f 93       	push	r24
    2002:	9f 93       	push	r25
    2004:	af 93       	push	r26
    2006:	bf 93       	push	r27
    2008:	ef 93       	push	r30
    200a:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    200c:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <__data_end>
    2010:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <__data_end+0x1>
    2014:	30 97       	sbiw	r30, 0x00	; 0
    2016:	09 f0       	breq	.+2      	; 0x201a <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    2018:	19 95       	eicall
	}
}
    201a:	ff 91       	pop	r31
    201c:	ef 91       	pop	r30
    201e:	bf 91       	pop	r27
    2020:	af 91       	pop	r26
    2022:	9f 91       	pop	r25
    2024:	8f 91       	pop	r24
    2026:	7f 91       	pop	r23
    2028:	6f 91       	pop	r22
    202a:	5f 91       	pop	r21
    202c:	4f 91       	pop	r20
    202e:	3f 91       	pop	r19
    2030:	2f 91       	pop	r18
    2032:	0f 90       	pop	r0
    2034:	0b be       	out	0x3b, r0	; 59
    2036:	0f 90       	pop	r0
    2038:	09 be       	out	0x39, r0	; 57
    203a:	0f 90       	pop	r0
    203c:	08 be       	out	0x38, r0	; 56
    203e:	0f 90       	pop	r0
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	0f 90       	pop	r0
    2044:	1f 90       	pop	r1
    2046:	18 95       	reti

00002048 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    2048:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    204a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    204c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    204e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2050:	60 83       	st	Z, r22
	ret                             // Return to caller
    2052:	08 95       	ret

00002054 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	fc 01       	movw	r30, r24
    205a:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2060:	c6 2f       	mov	r28, r22
    2062:	d0 e0       	ldi	r29, 0x00	; 0
    2064:	de 01       	movw	r26, r28
    2066:	02 2e       	mov	r0, r18
    2068:	02 c0       	rjmp	.+4      	; 0x206e <ioport_configure_port_pin+0x1a>
    206a:	b5 95       	asr	r27
    206c:	a7 95       	ror	r26
    206e:	0a 94       	dec	r0
    2070:	e2 f7       	brpl	.-8      	; 0x206a <ioport_configure_port_pin+0x16>
    2072:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2074:	50 83       	st	Z, r21
    2076:	2f 5f       	subi	r18, 0xFF	; 255
    2078:	3f 4f       	sbci	r19, 0xFF	; 255
    207a:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    207c:	28 30       	cpi	r18, 0x08	; 8
    207e:	31 05       	cpc	r19, r1
    2080:	89 f7       	brne	.-30     	; 0x2064 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2082:	40 ff       	sbrs	r20, 0
    2084:	0a c0       	rjmp	.+20     	; 0x209a <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    2086:	41 ff       	sbrs	r20, 1
    2088:	03 c0       	rjmp	.+6      	; 0x2090 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    208a:	fc 01       	movw	r30, r24
    208c:	65 83       	std	Z+5, r22	; 0x05
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2090:	fc 01       	movw	r30, r24
    2092:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2094:	fc 01       	movw	r30, r24
    2096:	61 83       	std	Z+1, r22	; 0x01
    2098:	02 c0       	rjmp	.+4      	; 0x209e <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    209a:	fc 01       	movw	r30, r24
    209c:	62 83       	std	Z+2, r22	; 0x02
	}
}
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	08 95       	ret

000020a4 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    20a4:	43 e0       	ldi	r20, 0x03	; 3
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	61 e0       	ldi	r22, 0x01	; 1
    20aa:	80 e8       	ldi	r24, 0x80	; 128
    20ac:	96 e0       	ldi	r25, 0x06	; 6
    20ae:	d2 df       	rcall	.-92     	; 0x2054 <ioport_configure_port_pin>
    20b0:	43 e0       	ldi	r20, 0x03	; 3
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	62 e0       	ldi	r22, 0x02	; 2
    20b6:	80 e8       	ldi	r24, 0x80	; 128
    20b8:	96 e0       	ldi	r25, 0x06	; 6
    20ba:	cc df       	rcall	.-104    	; 0x2054 <ioport_configure_port_pin>
    20bc:	43 e0       	ldi	r20, 0x03	; 3
    20be:	50 e0       	ldi	r21, 0x00	; 0
    20c0:	64 e0       	ldi	r22, 0x04	; 4
    20c2:	80 e8       	ldi	r24, 0x80	; 128
    20c4:	96 e0       	ldi	r25, 0x06	; 6
    20c6:	c6 df       	rcall	.-116    	; 0x2054 <ioport_configure_port_pin>
    20c8:	43 e0       	ldi	r20, 0x03	; 3
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	68 e0       	ldi	r22, 0x08	; 8
    20ce:	80 e8       	ldi	r24, 0x80	; 128
    20d0:	96 e0       	ldi	r25, 0x06	; 6
    20d2:	c0 df       	rcall	.-128    	; 0x2054 <ioport_configure_port_pin>
    20d4:	43 e0       	ldi	r20, 0x03	; 3
    20d6:	50 e0       	ldi	r21, 0x00	; 0
    20d8:	60 e1       	ldi	r22, 0x10	; 16
    20da:	80 e8       	ldi	r24, 0x80	; 128
    20dc:	96 e0       	ldi	r25, 0x06	; 6
    20de:	ba df       	rcall	.-140    	; 0x2054 <ioport_configure_port_pin>
    20e0:	43 e0       	ldi	r20, 0x03	; 3
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	60 e2       	ldi	r22, 0x20	; 32
    20e6:	80 e8       	ldi	r24, 0x80	; 128
    20e8:	96 e0       	ldi	r25, 0x06	; 6
    20ea:	b4 df       	rcall	.-152    	; 0x2054 <ioport_configure_port_pin>
    20ec:	43 e0       	ldi	r20, 0x03	; 3
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	60 e4       	ldi	r22, 0x40	; 64
    20f2:	80 e8       	ldi	r24, 0x80	; 128
    20f4:	96 e0       	ldi	r25, 0x06	; 6
    20f6:	ae df       	rcall	.-164    	; 0x2054 <ioport_configure_port_pin>
    20f8:	43 e0       	ldi	r20, 0x03	; 3
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	60 e8       	ldi	r22, 0x80	; 128
    20fe:	80 e8       	ldi	r24, 0x80	; 128
    2100:	96 e0       	ldi	r25, 0x06	; 6
    2102:	a8 df       	rcall	.-176    	; 0x2054 <ioport_configure_port_pin>
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	58 e1       	ldi	r21, 0x18	; 24
    2108:	61 e0       	ldi	r22, 0x01	; 1
    210a:	80 e6       	ldi	r24, 0x60	; 96
    210c:	96 e0       	ldi	r25, 0x06	; 6
    210e:	a2 df       	rcall	.-188    	; 0x2054 <ioport_configure_port_pin>
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	58 e1       	ldi	r21, 0x18	; 24
    2114:	62 e0       	ldi	r22, 0x02	; 2
    2116:	80 e6       	ldi	r24, 0x60	; 96
    2118:	96 e0       	ldi	r25, 0x06	; 6
    211a:	9c df       	rcall	.-200    	; 0x2054 <ioport_configure_port_pin>
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	58 e1       	ldi	r21, 0x18	; 24
    2120:	64 e0       	ldi	r22, 0x04	; 4
    2122:	80 e6       	ldi	r24, 0x60	; 96
    2124:	96 e0       	ldi	r25, 0x06	; 6
    2126:	96 df       	rcall	.-212    	; 0x2054 <ioport_configure_port_pin>
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	58 e1       	ldi	r21, 0x18	; 24
    212c:	68 e0       	ldi	r22, 0x08	; 8
    212e:	80 e6       	ldi	r24, 0x60	; 96
    2130:	96 e0       	ldi	r25, 0x06	; 6
    2132:	90 df       	rcall	.-224    	; 0x2054 <ioport_configure_port_pin>
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	58 e1       	ldi	r21, 0x18	; 24
    2138:	60 e1       	ldi	r22, 0x10	; 16
    213a:	80 e6       	ldi	r24, 0x60	; 96
    213c:	96 e0       	ldi	r25, 0x06	; 6
    213e:	8a df       	rcall	.-236    	; 0x2054 <ioport_configure_port_pin>
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	58 e1       	ldi	r21, 0x18	; 24
    2144:	60 e2       	ldi	r22, 0x20	; 32
    2146:	80 e6       	ldi	r24, 0x60	; 96
    2148:	96 e0       	ldi	r25, 0x06	; 6
    214a:	84 df       	rcall	.-248    	; 0x2054 <ioport_configure_port_pin>
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	58 e1       	ldi	r21, 0x18	; 24
    2150:	61 e0       	ldi	r22, 0x01	; 1
    2152:	80 ee       	ldi	r24, 0xE0	; 224
    2154:	97 e0       	ldi	r25, 0x07	; 7
    2156:	7e df       	rcall	.-260    	; 0x2054 <ioport_configure_port_pin>
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	58 e1       	ldi	r21, 0x18	; 24
    215c:	62 e0       	ldi	r22, 0x02	; 2
    215e:	80 ee       	ldi	r24, 0xE0	; 224
    2160:	97 e0       	ldi	r25, 0x07	; 7
    2162:	78 df       	rcall	.-272    	; 0x2054 <ioport_configure_port_pin>
    2164:	43 e0       	ldi	r20, 0x03	; 3
    2166:	50 e0       	ldi	r21, 0x00	; 0
    2168:	60 e8       	ldi	r22, 0x80	; 128
    216a:	80 e4       	ldi	r24, 0x40	; 64
    216c:	96 e0       	ldi	r25, 0x06	; 6
    216e:	72 df       	rcall	.-284    	; 0x2054 <ioport_configure_port_pin>
    2170:	43 e0       	ldi	r20, 0x03	; 3
    2172:	50 e0       	ldi	r21, 0x00	; 0
    2174:	60 e2       	ldi	r22, 0x20	; 32
    2176:	80 e4       	ldi	r24, 0x40	; 64
    2178:	96 e0       	ldi	r25, 0x06	; 6
    217a:	6c df       	rcall	.-296    	; 0x2054 <ioport_configure_port_pin>
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	60 e4       	ldi	r22, 0x40	; 64
    2182:	80 e4       	ldi	r24, 0x40	; 64
    2184:	96 e0       	ldi	r25, 0x06	; 6
    2186:	66 df       	rcall	.-308    	; 0x2054 <ioport_configure_port_pin>
    2188:	43 e0       	ldi	r20, 0x03	; 3
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	68 e0       	ldi	r22, 0x08	; 8
    218e:	80 ec       	ldi	r24, 0xC0	; 192
    2190:	97 e0       	ldi	r25, 0x07	; 7
    2192:	60 df       	rcall	.-320    	; 0x2054 <ioport_configure_port_pin>
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	96 e0       	ldi	r25, 0x06	; 6
    219e:	5a df       	rcall	.-332    	; 0x2054 <ioport_configure_port_pin>
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	64 e0       	ldi	r22, 0x04	; 4
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	96 e0       	ldi	r25, 0x06	; 6
    21aa:	54 df       	rcall	.-344    	; 0x2054 <ioport_configure_port_pin>
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	62 e0       	ldi	r22, 0x02	; 2
    21b2:	80 e2       	ldi	r24, 0x20	; 32
    21b4:	96 e0       	ldi	r25, 0x06	; 6
    21b6:	4e df       	rcall	.-356    	; 0x2054 <ioport_configure_port_pin>
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	57 e0       	ldi	r21, 0x07	; 7
    21bc:	62 e0       	ldi	r22, 0x02	; 2
    21be:	80 e2       	ldi	r24, 0x20	; 32
    21c0:	96 e0       	ldi	r25, 0x06	; 6
    21c2:	48 df       	rcall	.-368    	; 0x2054 <ioport_configure_port_pin>
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	57 e0       	ldi	r21, 0x07	; 7
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	80 e2       	ldi	r24, 0x20	; 32
    21cc:	96 e0       	ldi	r25, 0x06	; 6
    21ce:	42 df       	rcall	.-380    	; 0x2054 <ioport_configure_port_pin>
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	68 e0       	ldi	r22, 0x08	; 8
    21d6:	80 e2       	ldi	r24, 0x20	; 32
    21d8:	96 e0       	ldi	r25, 0x06	; 6
    21da:	3c df       	rcall	.-392    	; 0x2054 <ioport_configure_port_pin>
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	57 e0       	ldi	r21, 0x07	; 7
    21e0:	64 e0       	ldi	r22, 0x04	; 4
    21e2:	80 e2       	ldi	r24, 0x20	; 32
    21e4:	96 e0       	ldi	r25, 0x06	; 6
    21e6:	36 df       	rcall	.-404    	; 0x2054 <ioport_configure_port_pin>
    21e8:	43 e0       	ldi	r20, 0x03	; 3
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	68 e0       	ldi	r22, 0x08	; 8
    21ee:	80 ec       	ldi	r24, 0xC0	; 192
    21f0:	97 e0       	ldi	r25, 0x07	; 7
    21f2:	30 df       	rcall	.-416    	; 0x2054 <ioport_configure_port_pin>
    21f4:	43 e0       	ldi	r20, 0x03	; 3
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	68 e0       	ldi	r22, 0x08	; 8
    21fa:	80 e4       	ldi	r24, 0x40	; 64
    21fc:	96 e0       	ldi	r25, 0x06	; 6
    21fe:	2a df       	rcall	.-428    	; 0x2054 <ioport_configure_port_pin>
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	64 e0       	ldi	r22, 0x04	; 4
    2206:	80 e4       	ldi	r24, 0x40	; 64
    2208:	96 e0       	ldi	r25, 0x06	; 6
    220a:	24 df       	rcall	.-440    	; 0x2054 <ioport_configure_port_pin>
    220c:	43 e0       	ldi	r20, 0x03	; 3
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	68 e0       	ldi	r22, 0x08	; 8
    2212:	80 e6       	ldi	r24, 0x60	; 96
    2214:	96 e0       	ldi	r25, 0x06	; 6
    2216:	1e df       	rcall	.-452    	; 0x2054 <ioport_configure_port_pin>
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	64 e0       	ldi	r22, 0x04	; 4
    221e:	80 e6       	ldi	r24, 0x60	; 96
    2220:	96 e0       	ldi	r25, 0x06	; 6
    2222:	18 cf       	rjmp	.-464    	; 0x2054 <ioport_configure_port_pin>
    2224:	08 95       	ret

00002226 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    222c:	0e 94 42 01 	call	0x284	; 0x284 <usart_getchar>
    2230:	88 83       	st	Y, r24
}
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	08 95       	ret

00002238 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    2238:	0c 94 3a 01 	jmp	0x274	; 0x274 <usart_putchar>
}
    223c:	08 95       	ret

0000223e <init_USART>:
 */ 

#include "Usart.h"

void init_USART(void)
{
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	27 97       	sbiw	r28, 0x07	; 7
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	de bf       	out	0x3e, r29	; 62
		.baudrate = 9600,
		.charlength = USART_CHSIZE_8BIT_gc,
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits = true
	};
	PORTC.DIRSET = 0b00001000;
    224c:	e0 e4       	ldi	r30, 0x40	; 64
    224e:	f6 e0       	ldi	r31, 0x06	; 6
    2250:	88 e0       	ldi	r24, 0x08	; 8
    2252:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET = 0b00001000;
    2254:	85 83       	std	Z+5, r24	; 0x05
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    2256:	80 ea       	ldi	r24, 0xA0	; 160
    2258:	98 e0       	ldi	r25, 0x08	; 8
    225a:	80 93 7e 20 	sts	0x207E, r24	; 0x80207e <stdio_base>
    225e:	90 93 7f 20 	sts	0x207F, r25	; 0x80207f <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2262:	8c e1       	ldi	r24, 0x1C	; 28
    2264:	91 e1       	ldi	r25, 0x11	; 17
    2266:	80 93 7c 20 	sts	0x207C, r24	; 0x80207c <ptr_put>
    226a:	90 93 7d 20 	sts	0x207D, r25	; 0x80207d <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    226e:	83 e1       	ldi	r24, 0x13	; 19
    2270:	91 e1       	ldi	r25, 0x11	; 17
    2272:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <ptr_get>
    2276:	90 93 77 20 	sts	0x2077, r25	; 0x802077 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    227a:	e6 e0       	ldi	r30, 0x06	; 6
    227c:	f0 e2       	ldi	r31, 0x20	; 32
    227e:	84 81       	ldd	r24, Z+4	; 0x04
    2280:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    2282:	85 81       	ldd	r24, Z+5	; 0x05
    2284:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2286:	86 81       	ldd	r24, Z+6	; 0x06
    2288:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    228a:	80 81       	ld	r24, Z
    228c:	91 81       	ldd	r25, Z+1	; 0x01
    228e:	a2 81       	ldd	r26, Z+2	; 0x02
    2290:	b3 81       	ldd	r27, Z+3	; 0x03
    2292:	89 83       	std	Y+1, r24	; 0x01
    2294:	9a 83       	std	Y+2, r25	; 0x02
    2296:	ab 83       	std	Y+3, r26	; 0x03
    2298:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    229a:	60 e1       	ldi	r22, 0x10	; 16
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	0e 94 b1 06 	call	0xd62	; 0xd62 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    22a2:	be 01       	movw	r22, r28
    22a4:	6f 5f       	subi	r22, 0xFF	; 255
    22a6:	7f 4f       	sbci	r23, 0xFF	; 255
    22a8:	80 ea       	ldi	r24, 0xA0	; 160
    22aa:	98 e0       	ldi	r25, 0x08	; 8
    22ac:	0e 94 61 02 	call	0x4c2	; 0x4c2 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    22b0:	61 e2       	ldi	r22, 0x21	; 33
    22b2:	71 e0       	ldi	r23, 0x01	; 1
    22b4:	87 e7       	ldi	r24, 0x77	; 119
    22b6:	96 e0       	ldi	r25, 0x06	; 6
    22b8:	5f d2       	rcall	.+1214   	; 0x2778 <fdevopen>
	stdio_serial_init(&USARTC0, &usart_options);
    22ba:	27 96       	adiw	r28, 0x07	; 7
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	08 95       	ret

000022c6 <main>:
#define DEBUG_LED
//#define DEBUG_USART

int main (void)
{
	sysclk_init();
    22c6:	0e 94 89 06 	call	0xd12	; 0xd12 <sysclk_init>
	board_init();
    22ca:	ec de       	rcall	.-552    	; 0x20a4 <board_init>
	
	initLED();
    22cc:	0e 94 c2 03 	call	0x784	; 0x784 <initLED>

	init_USART();
    22d0:	b6 df       	rcall	.-148    	; 0x223e <init_USART>
	#ifdef DEBUG_LED
	while (1)
	{
		for(int i=0;i<4;i++)
		{
			PORTE.OUT = ~i<<4;
    22d2:	c0 e8       	ldi	r28, 0x80	; 128
    22d4:	d6 e0       	ldi	r29, 0x06	; 6
			flashLED(i);
			for(int j=0;j<10;j++)
			{
				PORTE.OUT ^= 1<<7;
    22d6:	0f 2e       	mov	r0, r31
    22d8:	f5 e5       	ldi	r31, 0x55	; 85
    22da:	cf 2e       	mov	r12, r31
    22dc:	f0 2d       	mov	r31, r0
    22de:	0f 2e       	mov	r0, r31
    22e0:	f1 e6       	ldi	r31, 0x61	; 97
    22e2:	df 2e       	mov	r13, r31
    22e4:	f0 2d       	mov	r31, r0
    22e6:	01 e5       	ldi	r16, 0x51	; 81
    22e8:	10 e0       	ldi	r17, 0x00	; 0
				delay_s(1);
			}
		}
		offLED();
    22ea:	0f 2e       	mov	r0, r31
    22ec:	fa ea       	ldi	r31, 0xAA	; 170
    22ee:	8f 2e       	mov	r8, r31
    22f0:	f0 2d       	mov	r31, r0
    22f2:	0f 2e       	mov	r0, r31
    22f4:	f6 ee       	ldi	r31, 0xE6	; 230
    22f6:	9f 2e       	mov	r9, r31
    22f8:	f0 2d       	mov	r31, r0
    22fa:	0f 2e       	mov	r0, r31
    22fc:	f6 e9       	ldi	r31, 0x96	; 150
    22fe:	af 2e       	mov	r10, r31
    2300:	f0 2d       	mov	r31, r0
    2302:	bb 24       	eor	r11, r11
    2304:	b3 94       	inc	r11
	

	#ifdef DEBUG_LED
	while (1)
	{
		for(int i=0;i<4;i++)
    2306:	e1 2c       	mov	r14, r1
    2308:	f1 2c       	mov	r15, r1
    230a:	8e 2d       	mov	r24, r14
    230c:	80 95       	com	r24
		{
			PORTE.OUT = ~i<<4;
    230e:	82 95       	swap	r24
    2310:	80 7f       	andi	r24, 0xF0	; 240
    2312:	8c 83       	std	Y+4, r24	; 0x04
			flashLED(i);
    2314:	c7 01       	movw	r24, r14
    2316:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <flashLED>
    231a:	2a e0       	ldi	r18, 0x0A	; 10
    231c:	30 e0       	ldi	r19, 0x00	; 0
			for(int j=0;j<10;j++)
			{
				PORTE.OUT ^= 1<<7;
    231e:	8c 81       	ldd	r24, Y+4	; 0x04
    2320:	80 58       	subi	r24, 0x80	; 128
    2322:	8c 83       	std	Y+4, r24	; 0x04
    2324:	4c 2d       	mov	r20, r12
    2326:	5d 2d       	mov	r21, r13
    2328:	60 2f       	mov	r22, r16
    232a:	71 2f       	mov	r23, r17
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    232c:	41 50       	subi	r20, 0x01	; 1
    232e:	51 09       	sbc	r21, r1
    2330:	61 09       	sbc	r22, r1
    2332:	71 09       	sbc	r23, r1
    2334:	d9 f7       	brne	.-10     	; 0x232c <main+0x66>
    2336:	21 50       	subi	r18, 0x01	; 1
    2338:	31 09       	sbc	r19, r1
	{
		for(int i=0;i<4;i++)
		{
			PORTE.OUT = ~i<<4;
			flashLED(i);
			for(int j=0;j<10;j++)
    233a:	89 f7       	brne	.-30     	; 0x231e <main+0x58>
	

	#ifdef DEBUG_LED
	while (1)
	{
		for(int i=0;i<4;i++)
    233c:	8f ef       	ldi	r24, 0xFF	; 255
    233e:	e8 1a       	sub	r14, r24
    2340:	f8 0a       	sbc	r15, r24
    2342:	84 e0       	ldi	r24, 0x04	; 4
    2344:	e8 16       	cp	r14, r24
    2346:	f1 04       	cpc	r15, r1
    2348:	01 f7       	brne	.-64     	; 0x230a <main+0x44>
			{
				PORTE.OUT ^= 1<<7;
				delay_s(1);
			}
		}
		offLED();
    234a:	0e 94 89 04 	call	0x912	; 0x912 <offLED>
    234e:	88 2d       	mov	r24, r8
    2350:	99 2d       	mov	r25, r9
    2352:	aa 2d       	mov	r26, r10
    2354:	bb 2d       	mov	r27, r11
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	a1 09       	sbc	r26, r1
    235a:	b1 09       	sbc	r27, r1
    235c:	e1 f7       	brne	.-8      	; 0x2356 <main+0x90>
    235e:	d3 cf       	rjmp	.-90     	; 0x2306 <main+0x40>

00002360 <__subsf3>:
    2360:	50 58       	subi	r21, 0x80	; 128

00002362 <__addsf3>:
    2362:	bb 27       	eor	r27, r27
    2364:	aa 27       	eor	r26, r26
    2366:	0e d0       	rcall	.+28     	; 0x2384 <__addsf3x>
    2368:	48 c1       	rjmp	.+656    	; 0x25fa <__fp_round>
    236a:	39 d1       	rcall	.+626    	; 0x25de <__fp_pscA>
    236c:	30 f0       	brcs	.+12     	; 0x237a <__addsf3+0x18>
    236e:	3e d1       	rcall	.+636    	; 0x25ec <__fp_pscB>
    2370:	20 f0       	brcs	.+8      	; 0x237a <__addsf3+0x18>
    2372:	31 f4       	brne	.+12     	; 0x2380 <__addsf3+0x1e>
    2374:	9f 3f       	cpi	r25, 0xFF	; 255
    2376:	11 f4       	brne	.+4      	; 0x237c <__addsf3+0x1a>
    2378:	1e f4       	brtc	.+6      	; 0x2380 <__addsf3+0x1e>
    237a:	2e c1       	rjmp	.+604    	; 0x25d8 <__fp_nan>
    237c:	0e f4       	brtc	.+2      	; 0x2380 <__addsf3+0x1e>
    237e:	e0 95       	com	r30
    2380:	e7 fb       	bst	r30, 7
    2382:	24 c1       	rjmp	.+584    	; 0x25cc <__fp_inf>

00002384 <__addsf3x>:
    2384:	e9 2f       	mov	r30, r25
    2386:	4a d1       	rcall	.+660    	; 0x261c <__fp_split3>
    2388:	80 f3       	brcs	.-32     	; 0x236a <__addsf3+0x8>
    238a:	ba 17       	cp	r27, r26
    238c:	62 07       	cpc	r22, r18
    238e:	73 07       	cpc	r23, r19
    2390:	84 07       	cpc	r24, r20
    2392:	95 07       	cpc	r25, r21
    2394:	18 f0       	brcs	.+6      	; 0x239c <__addsf3x+0x18>
    2396:	71 f4       	brne	.+28     	; 0x23b4 <__addsf3x+0x30>
    2398:	9e f5       	brtc	.+102    	; 0x2400 <__addsf3x+0x7c>
    239a:	62 c1       	rjmp	.+708    	; 0x2660 <__fp_zero>
    239c:	0e f4       	brtc	.+2      	; 0x23a0 <__addsf3x+0x1c>
    239e:	e0 95       	com	r30
    23a0:	0b 2e       	mov	r0, r27
    23a2:	ba 2f       	mov	r27, r26
    23a4:	a0 2d       	mov	r26, r0
    23a6:	0b 01       	movw	r0, r22
    23a8:	b9 01       	movw	r22, r18
    23aa:	90 01       	movw	r18, r0
    23ac:	0c 01       	movw	r0, r24
    23ae:	ca 01       	movw	r24, r20
    23b0:	a0 01       	movw	r20, r0
    23b2:	11 24       	eor	r1, r1
    23b4:	ff 27       	eor	r31, r31
    23b6:	59 1b       	sub	r21, r25
    23b8:	99 f0       	breq	.+38     	; 0x23e0 <__addsf3x+0x5c>
    23ba:	59 3f       	cpi	r21, 0xF9	; 249
    23bc:	50 f4       	brcc	.+20     	; 0x23d2 <__addsf3x+0x4e>
    23be:	50 3e       	cpi	r21, 0xE0	; 224
    23c0:	68 f1       	brcs	.+90     	; 0x241c <__addsf3x+0x98>
    23c2:	1a 16       	cp	r1, r26
    23c4:	f0 40       	sbci	r31, 0x00	; 0
    23c6:	a2 2f       	mov	r26, r18
    23c8:	23 2f       	mov	r18, r19
    23ca:	34 2f       	mov	r19, r20
    23cc:	44 27       	eor	r20, r20
    23ce:	58 5f       	subi	r21, 0xF8	; 248
    23d0:	f3 cf       	rjmp	.-26     	; 0x23b8 <__addsf3x+0x34>
    23d2:	46 95       	lsr	r20
    23d4:	37 95       	ror	r19
    23d6:	27 95       	ror	r18
    23d8:	a7 95       	ror	r26
    23da:	f0 40       	sbci	r31, 0x00	; 0
    23dc:	53 95       	inc	r21
    23de:	c9 f7       	brne	.-14     	; 0x23d2 <__addsf3x+0x4e>
    23e0:	7e f4       	brtc	.+30     	; 0x2400 <__addsf3x+0x7c>
    23e2:	1f 16       	cp	r1, r31
    23e4:	ba 0b       	sbc	r27, r26
    23e6:	62 0b       	sbc	r22, r18
    23e8:	73 0b       	sbc	r23, r19
    23ea:	84 0b       	sbc	r24, r20
    23ec:	ba f0       	brmi	.+46     	; 0x241c <__addsf3x+0x98>
    23ee:	91 50       	subi	r25, 0x01	; 1
    23f0:	a1 f0       	breq	.+40     	; 0x241a <__addsf3x+0x96>
    23f2:	ff 0f       	add	r31, r31
    23f4:	bb 1f       	adc	r27, r27
    23f6:	66 1f       	adc	r22, r22
    23f8:	77 1f       	adc	r23, r23
    23fa:	88 1f       	adc	r24, r24
    23fc:	c2 f7       	brpl	.-16     	; 0x23ee <__addsf3x+0x6a>
    23fe:	0e c0       	rjmp	.+28     	; 0x241c <__addsf3x+0x98>
    2400:	ba 0f       	add	r27, r26
    2402:	62 1f       	adc	r22, r18
    2404:	73 1f       	adc	r23, r19
    2406:	84 1f       	adc	r24, r20
    2408:	48 f4       	brcc	.+18     	; 0x241c <__addsf3x+0x98>
    240a:	87 95       	ror	r24
    240c:	77 95       	ror	r23
    240e:	67 95       	ror	r22
    2410:	b7 95       	ror	r27
    2412:	f7 95       	ror	r31
    2414:	9e 3f       	cpi	r25, 0xFE	; 254
    2416:	08 f0       	brcs	.+2      	; 0x241a <__addsf3x+0x96>
    2418:	b3 cf       	rjmp	.-154    	; 0x2380 <__addsf3+0x1e>
    241a:	93 95       	inc	r25
    241c:	88 0f       	add	r24, r24
    241e:	08 f0       	brcs	.+2      	; 0x2422 <__addsf3x+0x9e>
    2420:	99 27       	eor	r25, r25
    2422:	ee 0f       	add	r30, r30
    2424:	97 95       	ror	r25
    2426:	87 95       	ror	r24
    2428:	08 95       	ret

0000242a <__divsf3>:
    242a:	0c d0       	rcall	.+24     	; 0x2444 <__divsf3x>
    242c:	e6 c0       	rjmp	.+460    	; 0x25fa <__fp_round>
    242e:	de d0       	rcall	.+444    	; 0x25ec <__fp_pscB>
    2430:	40 f0       	brcs	.+16     	; 0x2442 <__divsf3+0x18>
    2432:	d5 d0       	rcall	.+426    	; 0x25de <__fp_pscA>
    2434:	30 f0       	brcs	.+12     	; 0x2442 <__divsf3+0x18>
    2436:	21 f4       	brne	.+8      	; 0x2440 <__divsf3+0x16>
    2438:	5f 3f       	cpi	r21, 0xFF	; 255
    243a:	19 f0       	breq	.+6      	; 0x2442 <__divsf3+0x18>
    243c:	c7 c0       	rjmp	.+398    	; 0x25cc <__fp_inf>
    243e:	51 11       	cpse	r21, r1
    2440:	10 c1       	rjmp	.+544    	; 0x2662 <__fp_szero>
    2442:	ca c0       	rjmp	.+404    	; 0x25d8 <__fp_nan>

00002444 <__divsf3x>:
    2444:	eb d0       	rcall	.+470    	; 0x261c <__fp_split3>
    2446:	98 f3       	brcs	.-26     	; 0x242e <__divsf3+0x4>

00002448 <__divsf3_pse>:
    2448:	99 23       	and	r25, r25
    244a:	c9 f3       	breq	.-14     	; 0x243e <__divsf3+0x14>
    244c:	55 23       	and	r21, r21
    244e:	b1 f3       	breq	.-20     	; 0x243c <__divsf3+0x12>
    2450:	95 1b       	sub	r25, r21
    2452:	55 0b       	sbc	r21, r21
    2454:	bb 27       	eor	r27, r27
    2456:	aa 27       	eor	r26, r26
    2458:	62 17       	cp	r22, r18
    245a:	73 07       	cpc	r23, r19
    245c:	84 07       	cpc	r24, r20
    245e:	38 f0       	brcs	.+14     	; 0x246e <__divsf3_pse+0x26>
    2460:	9f 5f       	subi	r25, 0xFF	; 255
    2462:	5f 4f       	sbci	r21, 0xFF	; 255
    2464:	22 0f       	add	r18, r18
    2466:	33 1f       	adc	r19, r19
    2468:	44 1f       	adc	r20, r20
    246a:	aa 1f       	adc	r26, r26
    246c:	a9 f3       	breq	.-22     	; 0x2458 <__divsf3_pse+0x10>
    246e:	33 d0       	rcall	.+102    	; 0x24d6 <__divsf3_pse+0x8e>
    2470:	0e 2e       	mov	r0, r30
    2472:	3a f0       	brmi	.+14     	; 0x2482 <__divsf3_pse+0x3a>
    2474:	e0 e8       	ldi	r30, 0x80	; 128
    2476:	30 d0       	rcall	.+96     	; 0x24d8 <__divsf3_pse+0x90>
    2478:	91 50       	subi	r25, 0x01	; 1
    247a:	50 40       	sbci	r21, 0x00	; 0
    247c:	e6 95       	lsr	r30
    247e:	00 1c       	adc	r0, r0
    2480:	ca f7       	brpl	.-14     	; 0x2474 <__divsf3_pse+0x2c>
    2482:	29 d0       	rcall	.+82     	; 0x24d6 <__divsf3_pse+0x8e>
    2484:	fe 2f       	mov	r31, r30
    2486:	27 d0       	rcall	.+78     	; 0x24d6 <__divsf3_pse+0x8e>
    2488:	66 0f       	add	r22, r22
    248a:	77 1f       	adc	r23, r23
    248c:	88 1f       	adc	r24, r24
    248e:	bb 1f       	adc	r27, r27
    2490:	26 17       	cp	r18, r22
    2492:	37 07       	cpc	r19, r23
    2494:	48 07       	cpc	r20, r24
    2496:	ab 07       	cpc	r26, r27
    2498:	b0 e8       	ldi	r27, 0x80	; 128
    249a:	09 f0       	breq	.+2      	; 0x249e <__divsf3_pse+0x56>
    249c:	bb 0b       	sbc	r27, r27
    249e:	80 2d       	mov	r24, r0
    24a0:	bf 01       	movw	r22, r30
    24a2:	ff 27       	eor	r31, r31
    24a4:	93 58       	subi	r25, 0x83	; 131
    24a6:	5f 4f       	sbci	r21, 0xFF	; 255
    24a8:	2a f0       	brmi	.+10     	; 0x24b4 <__divsf3_pse+0x6c>
    24aa:	9e 3f       	cpi	r25, 0xFE	; 254
    24ac:	51 05       	cpc	r21, r1
    24ae:	68 f0       	brcs	.+26     	; 0x24ca <__divsf3_pse+0x82>
    24b0:	8d c0       	rjmp	.+282    	; 0x25cc <__fp_inf>
    24b2:	d7 c0       	rjmp	.+430    	; 0x2662 <__fp_szero>
    24b4:	5f 3f       	cpi	r21, 0xFF	; 255
    24b6:	ec f3       	brlt	.-6      	; 0x24b2 <__divsf3_pse+0x6a>
    24b8:	98 3e       	cpi	r25, 0xE8	; 232
    24ba:	dc f3       	brlt	.-10     	; 0x24b2 <__divsf3_pse+0x6a>
    24bc:	86 95       	lsr	r24
    24be:	77 95       	ror	r23
    24c0:	67 95       	ror	r22
    24c2:	b7 95       	ror	r27
    24c4:	f7 95       	ror	r31
    24c6:	9f 5f       	subi	r25, 0xFF	; 255
    24c8:	c9 f7       	brne	.-14     	; 0x24bc <__divsf3_pse+0x74>
    24ca:	88 0f       	add	r24, r24
    24cc:	91 1d       	adc	r25, r1
    24ce:	96 95       	lsr	r25
    24d0:	87 95       	ror	r24
    24d2:	97 f9       	bld	r25, 7
    24d4:	08 95       	ret
    24d6:	e1 e0       	ldi	r30, 0x01	; 1
    24d8:	66 0f       	add	r22, r22
    24da:	77 1f       	adc	r23, r23
    24dc:	88 1f       	adc	r24, r24
    24de:	bb 1f       	adc	r27, r27
    24e0:	62 17       	cp	r22, r18
    24e2:	73 07       	cpc	r23, r19
    24e4:	84 07       	cpc	r24, r20
    24e6:	ba 07       	cpc	r27, r26
    24e8:	20 f0       	brcs	.+8      	; 0x24f2 <__divsf3_pse+0xaa>
    24ea:	62 1b       	sub	r22, r18
    24ec:	73 0b       	sbc	r23, r19
    24ee:	84 0b       	sbc	r24, r20
    24f0:	ba 0b       	sbc	r27, r26
    24f2:	ee 1f       	adc	r30, r30
    24f4:	88 f7       	brcc	.-30     	; 0x24d8 <__divsf3_pse+0x90>
    24f6:	e0 95       	com	r30
    24f8:	08 95       	ret

000024fa <__fixunssfsi>:
    24fa:	98 d0       	rcall	.+304    	; 0x262c <__fp_splitA>
    24fc:	88 f0       	brcs	.+34     	; 0x2520 <__fixunssfsi+0x26>
    24fe:	9f 57       	subi	r25, 0x7F	; 127
    2500:	90 f0       	brcs	.+36     	; 0x2526 <__fixunssfsi+0x2c>
    2502:	b9 2f       	mov	r27, r25
    2504:	99 27       	eor	r25, r25
    2506:	b7 51       	subi	r27, 0x17	; 23
    2508:	a0 f0       	brcs	.+40     	; 0x2532 <__fixunssfsi+0x38>
    250a:	d1 f0       	breq	.+52     	; 0x2540 <__fixunssfsi+0x46>
    250c:	66 0f       	add	r22, r22
    250e:	77 1f       	adc	r23, r23
    2510:	88 1f       	adc	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	1a f0       	brmi	.+6      	; 0x251c <__fixunssfsi+0x22>
    2516:	ba 95       	dec	r27
    2518:	c9 f7       	brne	.-14     	; 0x250c <__fixunssfsi+0x12>
    251a:	12 c0       	rjmp	.+36     	; 0x2540 <__fixunssfsi+0x46>
    251c:	b1 30       	cpi	r27, 0x01	; 1
    251e:	81 f0       	breq	.+32     	; 0x2540 <__fixunssfsi+0x46>
    2520:	9f d0       	rcall	.+318    	; 0x2660 <__fp_zero>
    2522:	b1 e0       	ldi	r27, 0x01	; 1
    2524:	08 95       	ret
    2526:	9c c0       	rjmp	.+312    	; 0x2660 <__fp_zero>
    2528:	67 2f       	mov	r22, r23
    252a:	78 2f       	mov	r23, r24
    252c:	88 27       	eor	r24, r24
    252e:	b8 5f       	subi	r27, 0xF8	; 248
    2530:	39 f0       	breq	.+14     	; 0x2540 <__fixunssfsi+0x46>
    2532:	b9 3f       	cpi	r27, 0xF9	; 249
    2534:	cc f3       	brlt	.-14     	; 0x2528 <__fixunssfsi+0x2e>
    2536:	86 95       	lsr	r24
    2538:	77 95       	ror	r23
    253a:	67 95       	ror	r22
    253c:	b3 95       	inc	r27
    253e:	d9 f7       	brne	.-10     	; 0x2536 <__fixunssfsi+0x3c>
    2540:	3e f4       	brtc	.+14     	; 0x2550 <__fixunssfsi+0x56>
    2542:	90 95       	com	r25
    2544:	80 95       	com	r24
    2546:	70 95       	com	r23
    2548:	61 95       	neg	r22
    254a:	7f 4f       	sbci	r23, 0xFF	; 255
    254c:	8f 4f       	sbci	r24, 0xFF	; 255
    254e:	9f 4f       	sbci	r25, 0xFF	; 255
    2550:	08 95       	ret

00002552 <__floatunsisf>:
    2552:	e8 94       	clt
    2554:	09 c0       	rjmp	.+18     	; 0x2568 <__floatsisf+0x12>

00002556 <__floatsisf>:
    2556:	97 fb       	bst	r25, 7
    2558:	3e f4       	brtc	.+14     	; 0x2568 <__floatsisf+0x12>
    255a:	90 95       	com	r25
    255c:	80 95       	com	r24
    255e:	70 95       	com	r23
    2560:	61 95       	neg	r22
    2562:	7f 4f       	sbci	r23, 0xFF	; 255
    2564:	8f 4f       	sbci	r24, 0xFF	; 255
    2566:	9f 4f       	sbci	r25, 0xFF	; 255
    2568:	99 23       	and	r25, r25
    256a:	a9 f0       	breq	.+42     	; 0x2596 <__floatsisf+0x40>
    256c:	f9 2f       	mov	r31, r25
    256e:	96 e9       	ldi	r25, 0x96	; 150
    2570:	bb 27       	eor	r27, r27
    2572:	93 95       	inc	r25
    2574:	f6 95       	lsr	r31
    2576:	87 95       	ror	r24
    2578:	77 95       	ror	r23
    257a:	67 95       	ror	r22
    257c:	b7 95       	ror	r27
    257e:	f1 11       	cpse	r31, r1
    2580:	f8 cf       	rjmp	.-16     	; 0x2572 <__floatsisf+0x1c>
    2582:	fa f4       	brpl	.+62     	; 0x25c2 <__floatsisf+0x6c>
    2584:	bb 0f       	add	r27, r27
    2586:	11 f4       	brne	.+4      	; 0x258c <__floatsisf+0x36>
    2588:	60 ff       	sbrs	r22, 0
    258a:	1b c0       	rjmp	.+54     	; 0x25c2 <__floatsisf+0x6c>
    258c:	6f 5f       	subi	r22, 0xFF	; 255
    258e:	7f 4f       	sbci	r23, 0xFF	; 255
    2590:	8f 4f       	sbci	r24, 0xFF	; 255
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	16 c0       	rjmp	.+44     	; 0x25c2 <__floatsisf+0x6c>
    2596:	88 23       	and	r24, r24
    2598:	11 f0       	breq	.+4      	; 0x259e <__floatsisf+0x48>
    259a:	96 e9       	ldi	r25, 0x96	; 150
    259c:	11 c0       	rjmp	.+34     	; 0x25c0 <__floatsisf+0x6a>
    259e:	77 23       	and	r23, r23
    25a0:	21 f0       	breq	.+8      	; 0x25aa <__floatsisf+0x54>
    25a2:	9e e8       	ldi	r25, 0x8E	; 142
    25a4:	87 2f       	mov	r24, r23
    25a6:	76 2f       	mov	r23, r22
    25a8:	05 c0       	rjmp	.+10     	; 0x25b4 <__floatsisf+0x5e>
    25aa:	66 23       	and	r22, r22
    25ac:	71 f0       	breq	.+28     	; 0x25ca <__floatsisf+0x74>
    25ae:	96 e8       	ldi	r25, 0x86	; 134
    25b0:	86 2f       	mov	r24, r22
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	60 e0       	ldi	r22, 0x00	; 0
    25b6:	2a f0       	brmi	.+10     	; 0x25c2 <__floatsisf+0x6c>
    25b8:	9a 95       	dec	r25
    25ba:	66 0f       	add	r22, r22
    25bc:	77 1f       	adc	r23, r23
    25be:	88 1f       	adc	r24, r24
    25c0:	da f7       	brpl	.-10     	; 0x25b8 <__floatsisf+0x62>
    25c2:	88 0f       	add	r24, r24
    25c4:	96 95       	lsr	r25
    25c6:	87 95       	ror	r24
    25c8:	97 f9       	bld	r25, 7
    25ca:	08 95       	ret

000025cc <__fp_inf>:
    25cc:	97 f9       	bld	r25, 7
    25ce:	9f 67       	ori	r25, 0x7F	; 127
    25d0:	80 e8       	ldi	r24, 0x80	; 128
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	08 95       	ret

000025d8 <__fp_nan>:
    25d8:	9f ef       	ldi	r25, 0xFF	; 255
    25da:	80 ec       	ldi	r24, 0xC0	; 192
    25dc:	08 95       	ret

000025de <__fp_pscA>:
    25de:	00 24       	eor	r0, r0
    25e0:	0a 94       	dec	r0
    25e2:	16 16       	cp	r1, r22
    25e4:	17 06       	cpc	r1, r23
    25e6:	18 06       	cpc	r1, r24
    25e8:	09 06       	cpc	r0, r25
    25ea:	08 95       	ret

000025ec <__fp_pscB>:
    25ec:	00 24       	eor	r0, r0
    25ee:	0a 94       	dec	r0
    25f0:	12 16       	cp	r1, r18
    25f2:	13 06       	cpc	r1, r19
    25f4:	14 06       	cpc	r1, r20
    25f6:	05 06       	cpc	r0, r21
    25f8:	08 95       	ret

000025fa <__fp_round>:
    25fa:	09 2e       	mov	r0, r25
    25fc:	03 94       	inc	r0
    25fe:	00 0c       	add	r0, r0
    2600:	11 f4       	brne	.+4      	; 0x2606 <__fp_round+0xc>
    2602:	88 23       	and	r24, r24
    2604:	52 f0       	brmi	.+20     	; 0x261a <__fp_round+0x20>
    2606:	bb 0f       	add	r27, r27
    2608:	40 f4       	brcc	.+16     	; 0x261a <__fp_round+0x20>
    260a:	bf 2b       	or	r27, r31
    260c:	11 f4       	brne	.+4      	; 0x2612 <__fp_round+0x18>
    260e:	60 ff       	sbrs	r22, 0
    2610:	04 c0       	rjmp	.+8      	; 0x261a <__fp_round+0x20>
    2612:	6f 5f       	subi	r22, 0xFF	; 255
    2614:	7f 4f       	sbci	r23, 0xFF	; 255
    2616:	8f 4f       	sbci	r24, 0xFF	; 255
    2618:	9f 4f       	sbci	r25, 0xFF	; 255
    261a:	08 95       	ret

0000261c <__fp_split3>:
    261c:	57 fd       	sbrc	r21, 7
    261e:	90 58       	subi	r25, 0x80	; 128
    2620:	44 0f       	add	r20, r20
    2622:	55 1f       	adc	r21, r21
    2624:	59 f0       	breq	.+22     	; 0x263c <__fp_splitA+0x10>
    2626:	5f 3f       	cpi	r21, 0xFF	; 255
    2628:	71 f0       	breq	.+28     	; 0x2646 <__fp_splitA+0x1a>
    262a:	47 95       	ror	r20

0000262c <__fp_splitA>:
    262c:	88 0f       	add	r24, r24
    262e:	97 fb       	bst	r25, 7
    2630:	99 1f       	adc	r25, r25
    2632:	61 f0       	breq	.+24     	; 0x264c <__fp_splitA+0x20>
    2634:	9f 3f       	cpi	r25, 0xFF	; 255
    2636:	79 f0       	breq	.+30     	; 0x2656 <__fp_splitA+0x2a>
    2638:	87 95       	ror	r24
    263a:	08 95       	ret
    263c:	12 16       	cp	r1, r18
    263e:	13 06       	cpc	r1, r19
    2640:	14 06       	cpc	r1, r20
    2642:	55 1f       	adc	r21, r21
    2644:	f2 cf       	rjmp	.-28     	; 0x262a <__fp_split3+0xe>
    2646:	46 95       	lsr	r20
    2648:	f1 df       	rcall	.-30     	; 0x262c <__fp_splitA>
    264a:	08 c0       	rjmp	.+16     	; 0x265c <__fp_splitA+0x30>
    264c:	16 16       	cp	r1, r22
    264e:	17 06       	cpc	r1, r23
    2650:	18 06       	cpc	r1, r24
    2652:	99 1f       	adc	r25, r25
    2654:	f1 cf       	rjmp	.-30     	; 0x2638 <__fp_splitA+0xc>
    2656:	86 95       	lsr	r24
    2658:	71 05       	cpc	r23, r1
    265a:	61 05       	cpc	r22, r1
    265c:	08 94       	sec
    265e:	08 95       	ret

00002660 <__fp_zero>:
    2660:	e8 94       	clt

00002662 <__fp_szero>:
    2662:	bb 27       	eor	r27, r27
    2664:	66 27       	eor	r22, r22
    2666:	77 27       	eor	r23, r23
    2668:	cb 01       	movw	r24, r22
    266a:	97 f9       	bld	r25, 7
    266c:	08 95       	ret

0000266e <__mulsf3>:
    266e:	0b d0       	rcall	.+22     	; 0x2686 <__mulsf3x>
    2670:	c4 cf       	rjmp	.-120    	; 0x25fa <__fp_round>
    2672:	b5 df       	rcall	.-150    	; 0x25de <__fp_pscA>
    2674:	28 f0       	brcs	.+10     	; 0x2680 <__mulsf3+0x12>
    2676:	ba df       	rcall	.-140    	; 0x25ec <__fp_pscB>
    2678:	18 f0       	brcs	.+6      	; 0x2680 <__mulsf3+0x12>
    267a:	95 23       	and	r25, r21
    267c:	09 f0       	breq	.+2      	; 0x2680 <__mulsf3+0x12>
    267e:	a6 cf       	rjmp	.-180    	; 0x25cc <__fp_inf>
    2680:	ab cf       	rjmp	.-170    	; 0x25d8 <__fp_nan>
    2682:	11 24       	eor	r1, r1
    2684:	ee cf       	rjmp	.-36     	; 0x2662 <__fp_szero>

00002686 <__mulsf3x>:
    2686:	ca df       	rcall	.-108    	; 0x261c <__fp_split3>
    2688:	a0 f3       	brcs	.-24     	; 0x2672 <__mulsf3+0x4>

0000268a <__mulsf3_pse>:
    268a:	95 9f       	mul	r25, r21
    268c:	d1 f3       	breq	.-12     	; 0x2682 <__mulsf3+0x14>
    268e:	95 0f       	add	r25, r21
    2690:	50 e0       	ldi	r21, 0x00	; 0
    2692:	55 1f       	adc	r21, r21
    2694:	62 9f       	mul	r22, r18
    2696:	f0 01       	movw	r30, r0
    2698:	72 9f       	mul	r23, r18
    269a:	bb 27       	eor	r27, r27
    269c:	f0 0d       	add	r31, r0
    269e:	b1 1d       	adc	r27, r1
    26a0:	63 9f       	mul	r22, r19
    26a2:	aa 27       	eor	r26, r26
    26a4:	f0 0d       	add	r31, r0
    26a6:	b1 1d       	adc	r27, r1
    26a8:	aa 1f       	adc	r26, r26
    26aa:	64 9f       	mul	r22, r20
    26ac:	66 27       	eor	r22, r22
    26ae:	b0 0d       	add	r27, r0
    26b0:	a1 1d       	adc	r26, r1
    26b2:	66 1f       	adc	r22, r22
    26b4:	82 9f       	mul	r24, r18
    26b6:	22 27       	eor	r18, r18
    26b8:	b0 0d       	add	r27, r0
    26ba:	a1 1d       	adc	r26, r1
    26bc:	62 1f       	adc	r22, r18
    26be:	73 9f       	mul	r23, r19
    26c0:	b0 0d       	add	r27, r0
    26c2:	a1 1d       	adc	r26, r1
    26c4:	62 1f       	adc	r22, r18
    26c6:	83 9f       	mul	r24, r19
    26c8:	a0 0d       	add	r26, r0
    26ca:	61 1d       	adc	r22, r1
    26cc:	22 1f       	adc	r18, r18
    26ce:	74 9f       	mul	r23, r20
    26d0:	33 27       	eor	r19, r19
    26d2:	a0 0d       	add	r26, r0
    26d4:	61 1d       	adc	r22, r1
    26d6:	23 1f       	adc	r18, r19
    26d8:	84 9f       	mul	r24, r20
    26da:	60 0d       	add	r22, r0
    26dc:	21 1d       	adc	r18, r1
    26de:	82 2f       	mov	r24, r18
    26e0:	76 2f       	mov	r23, r22
    26e2:	6a 2f       	mov	r22, r26
    26e4:	11 24       	eor	r1, r1
    26e6:	9f 57       	subi	r25, 0x7F	; 127
    26e8:	50 40       	sbci	r21, 0x00	; 0
    26ea:	8a f0       	brmi	.+34     	; 0x270e <__mulsf3_pse+0x84>
    26ec:	e1 f0       	breq	.+56     	; 0x2726 <__mulsf3_pse+0x9c>
    26ee:	88 23       	and	r24, r24
    26f0:	4a f0       	brmi	.+18     	; 0x2704 <__mulsf3_pse+0x7a>
    26f2:	ee 0f       	add	r30, r30
    26f4:	ff 1f       	adc	r31, r31
    26f6:	bb 1f       	adc	r27, r27
    26f8:	66 1f       	adc	r22, r22
    26fa:	77 1f       	adc	r23, r23
    26fc:	88 1f       	adc	r24, r24
    26fe:	91 50       	subi	r25, 0x01	; 1
    2700:	50 40       	sbci	r21, 0x00	; 0
    2702:	a9 f7       	brne	.-22     	; 0x26ee <__mulsf3_pse+0x64>
    2704:	9e 3f       	cpi	r25, 0xFE	; 254
    2706:	51 05       	cpc	r21, r1
    2708:	70 f0       	brcs	.+28     	; 0x2726 <__mulsf3_pse+0x9c>
    270a:	60 cf       	rjmp	.-320    	; 0x25cc <__fp_inf>
    270c:	aa cf       	rjmp	.-172    	; 0x2662 <__fp_szero>
    270e:	5f 3f       	cpi	r21, 0xFF	; 255
    2710:	ec f3       	brlt	.-6      	; 0x270c <__mulsf3_pse+0x82>
    2712:	98 3e       	cpi	r25, 0xE8	; 232
    2714:	dc f3       	brlt	.-10     	; 0x270c <__mulsf3_pse+0x82>
    2716:	86 95       	lsr	r24
    2718:	77 95       	ror	r23
    271a:	67 95       	ror	r22
    271c:	b7 95       	ror	r27
    271e:	f7 95       	ror	r31
    2720:	e7 95       	ror	r30
    2722:	9f 5f       	subi	r25, 0xFF	; 255
    2724:	c1 f7       	brne	.-16     	; 0x2716 <__mulsf3_pse+0x8c>
    2726:	fe 2b       	or	r31, r30
    2728:	88 0f       	add	r24, r24
    272a:	91 1d       	adc	r25, r1
    272c:	96 95       	lsr	r25
    272e:	87 95       	ror	r24
    2730:	97 f9       	bld	r25, 7
    2732:	08 95       	ret

00002734 <__udivmodsi4>:
    2734:	a1 e2       	ldi	r26, 0x21	; 33
    2736:	1a 2e       	mov	r1, r26
    2738:	aa 1b       	sub	r26, r26
    273a:	bb 1b       	sub	r27, r27
    273c:	fd 01       	movw	r30, r26
    273e:	0d c0       	rjmp	.+26     	; 0x275a <__udivmodsi4_ep>

00002740 <__udivmodsi4_loop>:
    2740:	aa 1f       	adc	r26, r26
    2742:	bb 1f       	adc	r27, r27
    2744:	ee 1f       	adc	r30, r30
    2746:	ff 1f       	adc	r31, r31
    2748:	a2 17       	cp	r26, r18
    274a:	b3 07       	cpc	r27, r19
    274c:	e4 07       	cpc	r30, r20
    274e:	f5 07       	cpc	r31, r21
    2750:	20 f0       	brcs	.+8      	; 0x275a <__udivmodsi4_ep>
    2752:	a2 1b       	sub	r26, r18
    2754:	b3 0b       	sbc	r27, r19
    2756:	e4 0b       	sbc	r30, r20
    2758:	f5 0b       	sbc	r31, r21

0000275a <__udivmodsi4_ep>:
    275a:	66 1f       	adc	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	88 1f       	adc	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	1a 94       	dec	r1
    2764:	69 f7       	brne	.-38     	; 0x2740 <__udivmodsi4_loop>
    2766:	60 95       	com	r22
    2768:	70 95       	com	r23
    276a:	80 95       	com	r24
    276c:	90 95       	com	r25
    276e:	9b 01       	movw	r18, r22
    2770:	ac 01       	movw	r20, r24
    2772:	bd 01       	movw	r22, r26
    2774:	cf 01       	movw	r24, r30
    2776:	08 95       	ret

00002778 <fdevopen>:
    2778:	0f 93       	push	r16
    277a:	1f 93       	push	r17
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	31 f4       	brne	.+12     	; 0x2790 <fdevopen+0x18>
    2784:	61 15       	cp	r22, r1
    2786:	71 05       	cpc	r23, r1
    2788:	19 f4       	brne	.+6      	; 0x2790 <fdevopen+0x18>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	39 c0       	rjmp	.+114    	; 0x2802 <fdevopen+0x8a>
    2790:	8b 01       	movw	r16, r22
    2792:	ec 01       	movw	r28, r24
    2794:	6e e0       	ldi	r22, 0x0E	; 14
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	37 d0       	rcall	.+110    	; 0x280c <calloc>
    279e:	fc 01       	movw	r30, r24
    27a0:	89 2b       	or	r24, r25
    27a2:	99 f3       	breq	.-26     	; 0x278a <fdevopen+0x12>
    27a4:	80 e8       	ldi	r24, 0x80	; 128
    27a6:	83 83       	std	Z+3, r24	; 0x03
    27a8:	01 15       	cp	r16, r1
    27aa:	11 05       	cpc	r17, r1
    27ac:	71 f0       	breq	.+28     	; 0x27ca <fdevopen+0x52>
    27ae:	02 87       	std	Z+10, r16	; 0x0a
    27b0:	13 87       	std	Z+11, r17	; 0x0b
    27b2:	81 e8       	ldi	r24, 0x81	; 129
    27b4:	83 83       	std	Z+3, r24	; 0x03
    27b6:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <__iob>
    27ba:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <__iob+0x1>
    27be:	89 2b       	or	r24, r25
    27c0:	21 f4       	brne	.+8      	; 0x27ca <fdevopen+0x52>
    27c2:	e0 93 88 20 	sts	0x2088, r30	; 0x802088 <__iob>
    27c6:	f0 93 89 20 	sts	0x2089, r31	; 0x802089 <__iob+0x1>
    27ca:	20 97       	sbiw	r28, 0x00	; 0
    27cc:	c9 f0       	breq	.+50     	; 0x2800 <fdevopen+0x88>
    27ce:	c0 87       	std	Z+8, r28	; 0x08
    27d0:	d1 87       	std	Z+9, r29	; 0x09
    27d2:	83 81       	ldd	r24, Z+3	; 0x03
    27d4:	82 60       	ori	r24, 0x02	; 2
    27d6:	83 83       	std	Z+3, r24	; 0x03
    27d8:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <__iob+0x2>
    27dc:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <__iob+0x3>
    27e0:	89 2b       	or	r24, r25
    27e2:	71 f4       	brne	.+28     	; 0x2800 <fdevopen+0x88>
    27e4:	e0 93 8a 20 	sts	0x208A, r30	; 0x80208a <__iob+0x2>
    27e8:	f0 93 8b 20 	sts	0x208B, r31	; 0x80208b <__iob+0x3>
    27ec:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <__iob+0x4>
    27f0:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <__iob+0x5>
    27f4:	89 2b       	or	r24, r25
    27f6:	21 f4       	brne	.+8      	; 0x2800 <fdevopen+0x88>
    27f8:	e0 93 8c 20 	sts	0x208C, r30	; 0x80208c <__iob+0x4>
    27fc:	f0 93 8d 20 	sts	0x208D, r31	; 0x80208d <__iob+0x5>
    2800:	cf 01       	movw	r24, r30
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	08 95       	ret

0000280c <calloc>:
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	86 9f       	mul	r24, r22
    2816:	80 01       	movw	r16, r0
    2818:	87 9f       	mul	r24, r23
    281a:	10 0d       	add	r17, r0
    281c:	96 9f       	mul	r25, r22
    281e:	10 0d       	add	r17, r0
    2820:	11 24       	eor	r1, r1
    2822:	c8 01       	movw	r24, r16
    2824:	0d d0       	rcall	.+26     	; 0x2840 <malloc>
    2826:	ec 01       	movw	r28, r24
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	21 f0       	breq	.+8      	; 0x2834 <calloc+0x28>
    282c:	a8 01       	movw	r20, r16
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	70 e0       	ldi	r23, 0x00	; 0
    2832:	33 d1       	rcall	.+614    	; 0x2a9a <memset>
    2834:	ce 01       	movw	r24, r28
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	08 95       	ret

00002840 <malloc>:
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	82 30       	cpi	r24, 0x02	; 2
    2846:	91 05       	cpc	r25, r1
    2848:	10 f4       	brcc	.+4      	; 0x284e <malloc+0xe>
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	e0 91 90 20 	lds	r30, 0x2090	; 0x802090 <__flp>
    2852:	f0 91 91 20 	lds	r31, 0x2091	; 0x802091 <__flp+0x1>
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	c0 e0       	ldi	r28, 0x00	; 0
    285c:	d0 e0       	ldi	r29, 0x00	; 0
    285e:	30 97       	sbiw	r30, 0x00	; 0
    2860:	11 f1       	breq	.+68     	; 0x28a6 <malloc+0x66>
    2862:	40 81       	ld	r20, Z
    2864:	51 81       	ldd	r21, Z+1	; 0x01
    2866:	48 17       	cp	r20, r24
    2868:	59 07       	cpc	r21, r25
    286a:	c0 f0       	brcs	.+48     	; 0x289c <malloc+0x5c>
    286c:	48 17       	cp	r20, r24
    286e:	59 07       	cpc	r21, r25
    2870:	61 f4       	brne	.+24     	; 0x288a <malloc+0x4a>
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	20 97       	sbiw	r28, 0x00	; 0
    2878:	19 f0       	breq	.+6      	; 0x2880 <malloc+0x40>
    287a:	8a 83       	std	Y+2, r24	; 0x02
    287c:	9b 83       	std	Y+3, r25	; 0x03
    287e:	2b c0       	rjmp	.+86     	; 0x28d6 <malloc+0x96>
    2880:	80 93 90 20 	sts	0x2090, r24	; 0x802090 <__flp>
    2884:	90 93 91 20 	sts	0x2091, r25	; 0x802091 <__flp+0x1>
    2888:	26 c0       	rjmp	.+76     	; 0x28d6 <malloc+0x96>
    288a:	21 15       	cp	r18, r1
    288c:	31 05       	cpc	r19, r1
    288e:	19 f0       	breq	.+6      	; 0x2896 <malloc+0x56>
    2890:	42 17       	cp	r20, r18
    2892:	53 07       	cpc	r21, r19
    2894:	18 f4       	brcc	.+6      	; 0x289c <malloc+0x5c>
    2896:	9a 01       	movw	r18, r20
    2898:	be 01       	movw	r22, r28
    289a:	df 01       	movw	r26, r30
    289c:	ef 01       	movw	r28, r30
    289e:	02 80       	ldd	r0, Z+2	; 0x02
    28a0:	f3 81       	ldd	r31, Z+3	; 0x03
    28a2:	e0 2d       	mov	r30, r0
    28a4:	dc cf       	rjmp	.-72     	; 0x285e <malloc+0x1e>
    28a6:	21 15       	cp	r18, r1
    28a8:	31 05       	cpc	r19, r1
    28aa:	09 f1       	breq	.+66     	; 0x28ee <malloc+0xae>
    28ac:	28 1b       	sub	r18, r24
    28ae:	39 0b       	sbc	r19, r25
    28b0:	24 30       	cpi	r18, 0x04	; 4
    28b2:	31 05       	cpc	r19, r1
    28b4:	90 f4       	brcc	.+36     	; 0x28da <malloc+0x9a>
    28b6:	12 96       	adiw	r26, 0x02	; 2
    28b8:	8d 91       	ld	r24, X+
    28ba:	9c 91       	ld	r25, X
    28bc:	13 97       	sbiw	r26, 0x03	; 3
    28be:	61 15       	cp	r22, r1
    28c0:	71 05       	cpc	r23, r1
    28c2:	21 f0       	breq	.+8      	; 0x28cc <malloc+0x8c>
    28c4:	fb 01       	movw	r30, r22
    28c6:	82 83       	std	Z+2, r24	; 0x02
    28c8:	93 83       	std	Z+3, r25	; 0x03
    28ca:	04 c0       	rjmp	.+8      	; 0x28d4 <malloc+0x94>
    28cc:	80 93 90 20 	sts	0x2090, r24	; 0x802090 <__flp>
    28d0:	90 93 91 20 	sts	0x2091, r25	; 0x802091 <__flp+0x1>
    28d4:	fd 01       	movw	r30, r26
    28d6:	32 96       	adiw	r30, 0x02	; 2
    28d8:	44 c0       	rjmp	.+136    	; 0x2962 <malloc+0x122>
    28da:	fd 01       	movw	r30, r26
    28dc:	e2 0f       	add	r30, r18
    28de:	f3 1f       	adc	r31, r19
    28e0:	81 93       	st	Z+, r24
    28e2:	91 93       	st	Z+, r25
    28e4:	22 50       	subi	r18, 0x02	; 2
    28e6:	31 09       	sbc	r19, r1
    28e8:	2d 93       	st	X+, r18
    28ea:	3c 93       	st	X, r19
    28ec:	3a c0       	rjmp	.+116    	; 0x2962 <malloc+0x122>
    28ee:	20 91 8e 20 	lds	r18, 0x208E	; 0x80208e <__brkval>
    28f2:	30 91 8f 20 	lds	r19, 0x208F	; 0x80208f <__brkval+0x1>
    28f6:	23 2b       	or	r18, r19
    28f8:	41 f4       	brne	.+16     	; 0x290a <malloc+0xca>
    28fa:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    28fe:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    2902:	20 93 8e 20 	sts	0x208E, r18	; 0x80208e <__brkval>
    2906:	30 93 8f 20 	sts	0x208F, r19	; 0x80208f <__brkval+0x1>
    290a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    290e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    2912:	21 15       	cp	r18, r1
    2914:	31 05       	cpc	r19, r1
    2916:	41 f4       	brne	.+16     	; 0x2928 <malloc+0xe8>
    2918:	2d b7       	in	r18, 0x3d	; 61
    291a:	3e b7       	in	r19, 0x3e	; 62
    291c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    2920:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2924:	24 1b       	sub	r18, r20
    2926:	35 0b       	sbc	r19, r21
    2928:	e0 91 8e 20 	lds	r30, 0x208E	; 0x80208e <__brkval>
    292c:	f0 91 8f 20 	lds	r31, 0x208F	; 0x80208f <__brkval+0x1>
    2930:	e2 17       	cp	r30, r18
    2932:	f3 07       	cpc	r31, r19
    2934:	a0 f4       	brcc	.+40     	; 0x295e <malloc+0x11e>
    2936:	2e 1b       	sub	r18, r30
    2938:	3f 0b       	sbc	r19, r31
    293a:	28 17       	cp	r18, r24
    293c:	39 07       	cpc	r19, r25
    293e:	78 f0       	brcs	.+30     	; 0x295e <malloc+0x11e>
    2940:	ac 01       	movw	r20, r24
    2942:	4e 5f       	subi	r20, 0xFE	; 254
    2944:	5f 4f       	sbci	r21, 0xFF	; 255
    2946:	24 17       	cp	r18, r20
    2948:	35 07       	cpc	r19, r21
    294a:	48 f0       	brcs	.+18     	; 0x295e <malloc+0x11e>
    294c:	4e 0f       	add	r20, r30
    294e:	5f 1f       	adc	r21, r31
    2950:	40 93 8e 20 	sts	0x208E, r20	; 0x80208e <__brkval>
    2954:	50 93 8f 20 	sts	0x208F, r21	; 0x80208f <__brkval+0x1>
    2958:	81 93       	st	Z+, r24
    295a:	91 93       	st	Z+, r25
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <malloc+0x122>
    295e:	e0 e0       	ldi	r30, 0x00	; 0
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	cf 01       	movw	r24, r30
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	08 95       	ret

0000296a <free>:
    296a:	0f 93       	push	r16
    296c:	1f 93       	push	r17
    296e:	cf 93       	push	r28
    2970:	df 93       	push	r29
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	09 f4       	brne	.+2      	; 0x2978 <free+0xe>
    2976:	8c c0       	rjmp	.+280    	; 0x2a90 <free+0x126>
    2978:	fc 01       	movw	r30, r24
    297a:	32 97       	sbiw	r30, 0x02	; 2
    297c:	12 82       	std	Z+2, r1	; 0x02
    297e:	13 82       	std	Z+3, r1	; 0x03
    2980:	00 91 90 20 	lds	r16, 0x2090	; 0x802090 <__flp>
    2984:	10 91 91 20 	lds	r17, 0x2091	; 0x802091 <__flp+0x1>
    2988:	01 15       	cp	r16, r1
    298a:	11 05       	cpc	r17, r1
    298c:	81 f4       	brne	.+32     	; 0x29ae <free+0x44>
    298e:	20 81       	ld	r18, Z
    2990:	31 81       	ldd	r19, Z+1	; 0x01
    2992:	82 0f       	add	r24, r18
    2994:	93 1f       	adc	r25, r19
    2996:	20 91 8e 20 	lds	r18, 0x208E	; 0x80208e <__brkval>
    299a:	30 91 8f 20 	lds	r19, 0x208F	; 0x80208f <__brkval+0x1>
    299e:	28 17       	cp	r18, r24
    29a0:	39 07       	cpc	r19, r25
    29a2:	79 f5       	brne	.+94     	; 0x2a02 <free+0x98>
    29a4:	e0 93 8e 20 	sts	0x208E, r30	; 0x80208e <__brkval>
    29a8:	f0 93 8f 20 	sts	0x208F, r31	; 0x80208f <__brkval+0x1>
    29ac:	71 c0       	rjmp	.+226    	; 0x2a90 <free+0x126>
    29ae:	d8 01       	movw	r26, r16
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	50 e0       	ldi	r21, 0x00	; 0
    29b4:	ae 17       	cp	r26, r30
    29b6:	bf 07       	cpc	r27, r31
    29b8:	50 f4       	brcc	.+20     	; 0x29ce <free+0x64>
    29ba:	12 96       	adiw	r26, 0x02	; 2
    29bc:	2d 91       	ld	r18, X+
    29be:	3c 91       	ld	r19, X
    29c0:	13 97       	sbiw	r26, 0x03	; 3
    29c2:	ad 01       	movw	r20, r26
    29c4:	21 15       	cp	r18, r1
    29c6:	31 05       	cpc	r19, r1
    29c8:	09 f1       	breq	.+66     	; 0x2a0c <free+0xa2>
    29ca:	d9 01       	movw	r26, r18
    29cc:	f3 cf       	rjmp	.-26     	; 0x29b4 <free+0x4a>
    29ce:	9d 01       	movw	r18, r26
    29d0:	da 01       	movw	r26, r20
    29d2:	22 83       	std	Z+2, r18	; 0x02
    29d4:	33 83       	std	Z+3, r19	; 0x03
    29d6:	60 81       	ld	r22, Z
    29d8:	71 81       	ldd	r23, Z+1	; 0x01
    29da:	86 0f       	add	r24, r22
    29dc:	97 1f       	adc	r25, r23
    29de:	82 17       	cp	r24, r18
    29e0:	93 07       	cpc	r25, r19
    29e2:	69 f4       	brne	.+26     	; 0x29fe <free+0x94>
    29e4:	ec 01       	movw	r28, r24
    29e6:	28 81       	ld	r18, Y
    29e8:	39 81       	ldd	r19, Y+1	; 0x01
    29ea:	26 0f       	add	r18, r22
    29ec:	37 1f       	adc	r19, r23
    29ee:	2e 5f       	subi	r18, 0xFE	; 254
    29f0:	3f 4f       	sbci	r19, 0xFF	; 255
    29f2:	20 83       	st	Z, r18
    29f4:	31 83       	std	Z+1, r19	; 0x01
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	9b 81       	ldd	r25, Y+3	; 0x03
    29fa:	82 83       	std	Z+2, r24	; 0x02
    29fc:	93 83       	std	Z+3, r25	; 0x03
    29fe:	45 2b       	or	r20, r21
    2a00:	29 f4       	brne	.+10     	; 0x2a0c <free+0xa2>
    2a02:	e0 93 90 20 	sts	0x2090, r30	; 0x802090 <__flp>
    2a06:	f0 93 91 20 	sts	0x2091, r31	; 0x802091 <__flp+0x1>
    2a0a:	42 c0       	rjmp	.+132    	; 0x2a90 <free+0x126>
    2a0c:	12 96       	adiw	r26, 0x02	; 2
    2a0e:	ed 93       	st	X+, r30
    2a10:	fc 93       	st	X, r31
    2a12:	13 97       	sbiw	r26, 0x03	; 3
    2a14:	ed 01       	movw	r28, r26
    2a16:	49 91       	ld	r20, Y+
    2a18:	59 91       	ld	r21, Y+
    2a1a:	9e 01       	movw	r18, r28
    2a1c:	24 0f       	add	r18, r20
    2a1e:	35 1f       	adc	r19, r21
    2a20:	e2 17       	cp	r30, r18
    2a22:	f3 07       	cpc	r31, r19
    2a24:	71 f4       	brne	.+28     	; 0x2a42 <free+0xd8>
    2a26:	80 81       	ld	r24, Z
    2a28:	91 81       	ldd	r25, Z+1	; 0x01
    2a2a:	84 0f       	add	r24, r20
    2a2c:	95 1f       	adc	r25, r21
    2a2e:	02 96       	adiw	r24, 0x02	; 2
    2a30:	8d 93       	st	X+, r24
    2a32:	9c 93       	st	X, r25
    2a34:	11 97       	sbiw	r26, 0x01	; 1
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	12 96       	adiw	r26, 0x02	; 2
    2a3c:	8d 93       	st	X+, r24
    2a3e:	9c 93       	st	X, r25
    2a40:	13 97       	sbiw	r26, 0x03	; 3
    2a42:	e0 e0       	ldi	r30, 0x00	; 0
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	d8 01       	movw	r26, r16
    2a48:	12 96       	adiw	r26, 0x02	; 2
    2a4a:	8d 91       	ld	r24, X+
    2a4c:	9c 91       	ld	r25, X
    2a4e:	13 97       	sbiw	r26, 0x03	; 3
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	19 f0       	breq	.+6      	; 0x2a5a <free+0xf0>
    2a54:	f8 01       	movw	r30, r16
    2a56:	8c 01       	movw	r16, r24
    2a58:	f6 cf       	rjmp	.-20     	; 0x2a46 <free+0xdc>
    2a5a:	8d 91       	ld	r24, X+
    2a5c:	9c 91       	ld	r25, X
    2a5e:	98 01       	movw	r18, r16
    2a60:	2e 5f       	subi	r18, 0xFE	; 254
    2a62:	3f 4f       	sbci	r19, 0xFF	; 255
    2a64:	82 0f       	add	r24, r18
    2a66:	93 1f       	adc	r25, r19
    2a68:	20 91 8e 20 	lds	r18, 0x208E	; 0x80208e <__brkval>
    2a6c:	30 91 8f 20 	lds	r19, 0x208F	; 0x80208f <__brkval+0x1>
    2a70:	28 17       	cp	r18, r24
    2a72:	39 07       	cpc	r19, r25
    2a74:	69 f4       	brne	.+26     	; 0x2a90 <free+0x126>
    2a76:	30 97       	sbiw	r30, 0x00	; 0
    2a78:	29 f4       	brne	.+10     	; 0x2a84 <free+0x11a>
    2a7a:	10 92 90 20 	sts	0x2090, r1	; 0x802090 <__flp>
    2a7e:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <__flp+0x1>
    2a82:	02 c0       	rjmp	.+4      	; 0x2a88 <free+0x11e>
    2a84:	12 82       	std	Z+2, r1	; 0x02
    2a86:	13 82       	std	Z+3, r1	; 0x03
    2a88:	00 93 8e 20 	sts	0x208E, r16	; 0x80208e <__brkval>
    2a8c:	10 93 8f 20 	sts	0x208F, r17	; 0x80208f <__brkval+0x1>
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	1f 91       	pop	r17
    2a96:	0f 91       	pop	r16
    2a98:	08 95       	ret

00002a9a <memset>:
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	01 c0       	rjmp	.+2      	; 0x2aa0 <memset+0x6>
    2a9e:	6d 93       	st	X+, r22
    2aa0:	41 50       	subi	r20, 0x01	; 1
    2aa2:	50 40       	sbci	r21, 0x00	; 0
    2aa4:	e0 f7       	brcc	.-8      	; 0x2a9e <memset+0x4>
    2aa6:	08 95       	ret

00002aa8 <_exit>:
    2aa8:	f8 94       	cli

00002aaa <__stop_program>:
    2aaa:	ff cf       	rjmp	.-2      	; 0x2aaa <__stop_program>
