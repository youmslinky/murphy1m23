
GCC_Practice_001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  000024ae  00002542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000062  00802008  00802008  0000254a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000254a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  000025e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005627  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b9  00000000  00000000  00007f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004cde  00000000  00000000  00009248  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014d8  00000000  00000000  0000df28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002ab64  00000000  00000000  0000f400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037bd  00000000  00000000  00039f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0003d721  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000221f  00000000  00000000  0003da39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	1d c1       	rjmp	.+570    	; 0x240 <__bad_interrupt>
       6:	00 00       	nop
       8:	1b c1       	rjmp	.+566    	; 0x240 <__bad_interrupt>
       a:	00 00       	nop
       c:	19 c1       	rjmp	.+562    	; 0x240 <__bad_interrupt>
       e:	00 00       	nop
      10:	17 c1       	rjmp	.+558    	; 0x240 <__bad_interrupt>
      12:	00 00       	nop
      14:	15 c1       	rjmp	.+554    	; 0x240 <__bad_interrupt>
      16:	00 00       	nop
      18:	13 c1       	rjmp	.+550    	; 0x240 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	11 c1       	rjmp	.+546    	; 0x240 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0f c1       	rjmp	.+542    	; 0x240 <__bad_interrupt>
      22:	00 00       	nop
      24:	0d c1       	rjmp	.+538    	; 0x240 <__bad_interrupt>
      26:	00 00       	nop
      28:	91 c3       	rjmp	.+1826   	; 0x74c <__vector_10>
      2a:	00 00       	nop
      2c:	b2 c3       	rjmp	.+1892   	; 0x792 <__vector_11>
      2e:	00 00       	nop
      30:	07 c1       	rjmp	.+526    	; 0x240 <__bad_interrupt>
      32:	00 00       	nop
      34:	05 c1       	rjmp	.+522    	; 0x240 <__bad_interrupt>
      36:	00 00       	nop
      38:	30 c4       	rjmp	.+2144   	; 0x89a <__vector_14>
      3a:	00 00       	nop
      3c:	66 c4       	rjmp	.+2252   	; 0x90a <__vector_15>
      3e:	00 00       	nop
      40:	9c c4       	rjmp	.+2360   	; 0x97a <__vector_16>
      42:	00 00       	nop
      44:	d2 c4       	rjmp	.+2468   	; 0x9ea <__vector_17>
      46:	00 00       	nop
      48:	08 c5       	rjmp	.+2576   	; 0xa5a <__vector_18>
      4a:	00 00       	nop
      4c:	3e c5       	rjmp	.+2684   	; 0xaca <__vector_19>
      4e:	00 00       	nop
      50:	74 c5       	rjmp	.+2792   	; 0xb3a <__vector_20>
      52:	00 00       	nop
      54:	aa c5       	rjmp	.+2900   	; 0xbaa <__vector_21>
      56:	00 00       	nop
      58:	e0 c5       	rjmp	.+3008   	; 0xc1a <__vector_22>
      5a:	00 00       	nop
      5c:	16 c6       	rjmp	.+3116   	; 0xc8a <__vector_23>
      5e:	00 00       	nop
      60:	ef c0       	rjmp	.+478    	; 0x240 <__bad_interrupt>
      62:	00 00       	nop
      64:	ed c0       	rjmp	.+474    	; 0x240 <__bad_interrupt>
      66:	00 00       	nop
      68:	eb c0       	rjmp	.+470    	; 0x240 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e9 c0       	rjmp	.+466    	; 0x240 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e7 c0       	rjmp	.+462    	; 0x240 <__bad_interrupt>
      72:	00 00       	nop
      74:	e5 c0       	rjmp	.+458    	; 0x240 <__bad_interrupt>
      76:	00 00       	nop
      78:	e3 c0       	rjmp	.+454    	; 0x240 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e1 c0       	rjmp	.+450    	; 0x240 <__bad_interrupt>
      7e:	00 00       	nop
      80:	df c0       	rjmp	.+446    	; 0x240 <__bad_interrupt>
      82:	00 00       	nop
      84:	dd c0       	rjmp	.+442    	; 0x240 <__bad_interrupt>
      86:	00 00       	nop
      88:	db c0       	rjmp	.+438    	; 0x240 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d9 c0       	rjmp	.+434    	; 0x240 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d7 c0       	rjmp	.+430    	; 0x240 <__bad_interrupt>
      92:	00 00       	nop
      94:	d5 c0       	rjmp	.+426    	; 0x240 <__bad_interrupt>
      96:	00 00       	nop
      98:	d3 c0       	rjmp	.+422    	; 0x240 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3b c2       	rjmp	.+1142   	; 0x514 <__vector_39>
      9e:	00 00       	nop
      a0:	76 c2       	rjmp	.+1260   	; 0x58e <__vector_40>
      a2:	00 00       	nop
      a4:	b1 c2       	rjmp	.+1378   	; 0x608 <__vector_41>
      a6:	00 00       	nop
      a8:	ec c2       	rjmp	.+1496   	; 0x682 <__vector_42>
      aa:	00 00       	nop
      ac:	c9 c0       	rjmp	.+402    	; 0x240 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c7 c0       	rjmp	.+398    	; 0x240 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c5 c0       	rjmp	.+394    	; 0x240 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c3 c0       	rjmp	.+390    	; 0x240 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__vector_47>
      c0:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__vector_48>
      c4:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__vector_49>
      c8:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_50>
      cc:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_51>
      d0:	0c 94 c5 09 	jmp	0x138a	; 0x138a <__vector_52>
      d4:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__vector_53>
      d8:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_54>
      dc:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__vector_55>
      e0:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <__vector_56>
      e4:	ad c0       	rjmp	.+346    	; 0x240 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ab c0       	rjmp	.+342    	; 0x240 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a9 c0       	rjmp	.+338    	; 0x240 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a7 c0       	rjmp	.+334    	; 0x240 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a5 c0       	rjmp	.+330    	; 0x240 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a3 c0       	rjmp	.+326    	; 0x240 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a1 c0       	rjmp	.+322    	; 0x240 <__bad_interrupt>
      fe:	00 00       	nop
     100:	9f c0       	rjmp	.+318    	; 0x240 <__bad_interrupt>
     102:	00 00       	nop
     104:	9d c0       	rjmp	.+314    	; 0x240 <__bad_interrupt>
     106:	00 00       	nop
     108:	9b c0       	rjmp	.+310    	; 0x240 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	99 c0       	rjmp	.+306    	; 0x240 <__bad_interrupt>
     10e:	00 00       	nop
     110:	97 c0       	rjmp	.+302    	; 0x240 <__bad_interrupt>
     112:	00 00       	nop
     114:	95 c0       	rjmp	.+298    	; 0x240 <__bad_interrupt>
     116:	00 00       	nop
     118:	93 c0       	rjmp	.+294    	; 0x240 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	07 c1       	rjmp	.+526    	; 0x32c <__vector_71>
     11e:	00 00       	nop
     120:	42 c1       	rjmp	.+644    	; 0x3a6 <__vector_72>
     122:	00 00       	nop
     124:	7d c1       	rjmp	.+762    	; 0x420 <__vector_73>
     126:	00 00       	nop
     128:	b8 c1       	rjmp	.+880    	; 0x49a <__vector_74>
     12a:	00 00       	nop
     12c:	89 c0       	rjmp	.+274    	; 0x240 <__bad_interrupt>
     12e:	00 00       	nop
     130:	87 c0       	rjmp	.+270    	; 0x240 <__bad_interrupt>
     132:	00 00       	nop
     134:	e2 c5       	rjmp	.+3012   	; 0xcfa <__vector_77>
     136:	00 00       	nop
     138:	18 c6       	rjmp	.+3120   	; 0xd6a <__vector_78>
     13a:	00 00       	nop
     13c:	4e c6       	rjmp	.+3228   	; 0xdda <__vector_79>
     13e:	00 00       	nop
     140:	84 c6       	rjmp	.+3336   	; 0xe4a <__vector_80>
     142:	00 00       	nop
     144:	ba c6       	rjmp	.+3444   	; 0xeba <__vector_81>
     146:	00 00       	nop
     148:	f0 c6       	rjmp	.+3552   	; 0xf2a <__vector_82>
     14a:	00 00       	nop
     14c:	26 c7       	rjmp	.+3660   	; 0xf9a <__vector_83>
     14e:	00 00       	nop
     150:	5c c7       	rjmp	.+3768   	; 0x100a <__vector_84>
     152:	00 00       	nop
     154:	92 c7       	rjmp	.+3876   	; 0x107a <__vector_85>
     156:	00 00       	nop
     158:	c8 c7       	rjmp	.+3984   	; 0x10ea <__vector_86>
     15a:	00 00       	nop
     15c:	71 c0       	rjmp	.+226    	; 0x240 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6f c0       	rjmp	.+222    	; 0x240 <__bad_interrupt>
     162:	00 00       	nop
     164:	6d c0       	rjmp	.+218    	; 0x240 <__bad_interrupt>
     166:	00 00       	nop
     168:	6b c0       	rjmp	.+214    	; 0x240 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	69 c0       	rjmp	.+210    	; 0x240 <__bad_interrupt>
     16e:	00 00       	nop
     170:	67 c0       	rjmp	.+206    	; 0x240 <__bad_interrupt>
     172:	00 00       	nop
     174:	65 c0       	rjmp	.+202    	; 0x240 <__bad_interrupt>
     176:	00 00       	nop
     178:	63 c0       	rjmp	.+198    	; 0x240 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	61 c0       	rjmp	.+194    	; 0x240 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5f c0       	rjmp	.+190    	; 0x240 <__bad_interrupt>
     182:	00 00       	nop
     184:	5d c0       	rjmp	.+186    	; 0x240 <__bad_interrupt>
     186:	00 00       	nop
     188:	5b c0       	rjmp	.+182    	; 0x240 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	59 c0       	rjmp	.+178    	; 0x240 <__bad_interrupt>
     18e:	00 00       	nop
     190:	57 c0       	rjmp	.+174    	; 0x240 <__bad_interrupt>
     192:	00 00       	nop
     194:	55 c0       	rjmp	.+170    	; 0x240 <__bad_interrupt>
     196:	00 00       	nop
     198:	53 c0       	rjmp	.+166    	; 0x240 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	51 c0       	rjmp	.+162    	; 0x240 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4f c0       	rjmp	.+158    	; 0x240 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4d c0       	rjmp	.+154    	; 0x240 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4b c0       	rjmp	.+150    	; 0x240 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	49 c0       	rjmp	.+146    	; 0x240 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__vector_108>
     1b4:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__vector_109>
     1b8:	0c 94 4d 0b 	jmp	0x169a	; 0x169a <__vector_110>
     1bc:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__vector_111>
     1c0:	0c 94 bd 0b 	jmp	0x177a	; 0x177a <__vector_112>
     1c4:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <__vector_113>
     1c8:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__vector_114>
     1cc:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__vector_115>
     1d0:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__vector_116>
     1d4:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <__vector_117>
     1d8:	33 c0       	rjmp	.+102    	; 0x240 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	31 c0       	rjmp	.+98     	; 0x240 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2f c0       	rjmp	.+94     	; 0x240 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2d c0       	rjmp	.+90     	; 0x240 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2b c0       	rjmp	.+86     	; 0x240 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	29 c0       	rjmp	.+82     	; 0x240 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	27 c0       	rjmp	.+78     	; 0x240 <__bad_interrupt>
	...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df e3       	ldi	r29, 0x3F	; 63
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	ee ea       	ldi	r30, 0xAE	; 174
     214:	f4 e2       	ldi	r31, 0x24	; 36
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a8 30       	cpi	r26, 0x08	; 8
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
     228:	20 e2       	ldi	r18, 0x20	; 32
     22a:	a8 e0       	ldi	r26, 0x08	; 8
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
     230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
     232:	aa 36       	cpi	r26, 0x6A	; 106
     234:	b2 07       	cpc	r27, r18
     236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
     238:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <main>
     23c:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <_exit>

00000240 <__bad_interrupt>:
     240:	df ce       	rjmp	.-578    	; 0x0 <__vectors>

00000242 <ledRotation>:
 *  Author: mjs0052
 */ 
#include "Test.h"

void ledRotation(uint32_t iDelay )
{
     242:	af 92       	push	r10
     244:	bf 92       	push	r11
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
	
	for (int i = 0; i<=3; i++)
	{
		PORTE.OUT = ~iLed;
		iLed <<= 1;
		delay_ms(iDelay);
     256:	dc 01       	movw	r26, r24
     258:	cb 01       	movw	r24, r22
     25a:	a1 2c       	mov	r10, r1
     25c:	0f 2e       	mov	r0, r31
     25e:	f8 e4       	ldi	r31, 0x48	; 72
     260:	bf 2e       	mov	r11, r31
     262:	f0 2d       	mov	r31, r0
     264:	0f 2e       	mov	r0, r31
     266:	f8 ee       	ldi	r31, 0xE8	; 232
     268:	cf 2e       	mov	r12, r31
     26a:	f0 2d       	mov	r31, r0
     26c:	dd 24       	eor	r13, r13
     26e:	d3 94       	inc	r13
     270:	e1 2c       	mov	r14, r1
     272:	f1 2c       	mov	r15, r1
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	10 e0       	ldi	r17, 0x00	; 0
     278:	28 2f       	mov	r18, r24
     27a:	39 2f       	mov	r19, r25
     27c:	4a 2f       	mov	r20, r26
     27e:	5b 2f       	mov	r21, r27
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <__muldi3>
     28c:	29 51       	subi	r18, 0x19	; 25
     28e:	3c 4f       	sbci	r19, 0xFC	; 252
     290:	4f 4f       	sbci	r20, 0xFF	; 255
     292:	5f 4f       	sbci	r21, 0xFF	; 255
     294:	6f 4f       	sbci	r22, 0xFF	; 255
     296:	7f 4f       	sbci	r23, 0xFF	; 255
     298:	8f 4f       	sbci	r24, 0xFF	; 255
     29a:	9f 4f       	sbci	r25, 0xFF	; 255
     29c:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__floatundisf>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e8       	ldi	r19, 0x80	; 128
     2a4:	4b eb       	ldi	r20, 0xBB	; 187
     2a6:	55 e4       	ldi	r21, 0x45	; 69
     2a8:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <__divsf3>
     2ac:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__fixunssfdi>
     2b0:	e2 2f       	mov	r30, r18
     2b2:	73 2f       	mov	r23, r19
     2b4:	64 2f       	mov	r22, r20
     2b6:	85 2f       	mov	r24, r21
     2b8:	1e 2f       	mov	r17, r30
     2ba:	35 2f       	mov	r19, r21
     2bc:	44 e0       	ldi	r20, 0x04	; 4
     2be:	50 e0       	ldi	r21, 0x00	; 0
 */ 
#include "Test.h"

void ledRotation(uint32_t iDelay )
{
	uint8_t iLed = 1;
     2c0:	21 e0       	ldi	r18, 0x01	; 1
	
	for (int i = 0; i<=3; i++)
	{
		PORTE.OUT = ~iLed;
     2c2:	e0 e8       	ldi	r30, 0x80	; 128
     2c4:	f6 e0       	ldi	r31, 0x06	; 6
		iLed <<= 1;
		delay_ms(iDelay);
     2c6:	f1 2e       	mov	r15, r17
     2c8:	d7 2f       	mov	r29, r23
     2ca:	c6 2f       	mov	r28, r22
     2cc:	08 2f       	mov	r16, r24
{
	uint8_t iLed = 1;
	
	for (int i = 0; i<=3; i++)
	{
		PORTE.OUT = ~iLed;
     2ce:	82 2f       	mov	r24, r18
     2d0:	80 95       	com	r24
     2d2:	84 83       	std	Z+4, r24	; 0x04
		iLed <<= 1;
     2d4:	22 0f       	add	r18, r18
		delay_ms(iDelay);
     2d6:	8f 2d       	mov	r24, r15
     2d8:	9d 2f       	mov	r25, r29
     2da:	ac 2f       	mov	r26, r28
     2dc:	b0 2f       	mov	r27, r16
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	a1 09       	sbc	r26, r1
     2e2:	b1 09       	sbc	r27, r1
     2e4:	e1 f7       	brne	.-8      	; 0x2de <ledRotation+0x9c>
     2e6:	41 50       	subi	r20, 0x01	; 1
     2e8:	51 09       	sbc	r21, r1

void ledRotation(uint32_t iDelay )
{
	uint8_t iLed = 1;
	
	for (int i = 0; i<=3; i++)
     2ea:	89 f7       	brne	.-30     	; 0x2ce <ledRotation+0x8c>
     2ec:	44 e0       	ldi	r20, 0x04	; 4
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	20 e8       	ldi	r18, 0x80	; 128
	
	iLed = 0b10000000;
	
	for (int i = 0; i<4; i++)
	{
		PORTE.OUT = ~iLed;
     2f2:	c0 e8       	ldi	r28, 0x80	; 128
     2f4:	d6 e0       	ldi	r29, 0x06	; 6
	
	for (int i = 0; i<=3; i++)
	{
		PORTE.OUT = ~iLed;
		iLed <<= 1;
		delay_ms(iDelay);
     2f6:	e1 2f       	mov	r30, r17
	
	iLed = 0b10000000;
	
	for (int i = 0; i<4; i++)
	{
		PORTE.OUT = ~iLed;
     2f8:	82 2f       	mov	r24, r18
     2fa:	80 95       	com	r24
     2fc:	8c 83       	std	Y+4, r24	; 0x04
		iLed >>= 1;
     2fe:	26 95       	lsr	r18
	
	for (int i = 0; i<=3; i++)
	{
		PORTE.OUT = ~iLed;
		iLed <<= 1;
		delay_ms(iDelay);
     300:	8e 2f       	mov	r24, r30
     302:	97 2f       	mov	r25, r23
     304:	a6 2f       	mov	r26, r22
     306:	b3 2f       	mov	r27, r19
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	a1 09       	sbc	r26, r1
     30c:	b1 09       	sbc	r27, r1
     30e:	e1 f7       	brne	.-8      	; 0x308 <ledRotation+0xc6>
     310:	41 50       	subi	r20, 0x01	; 1
     312:	51 09       	sbc	r21, r1
	}
	
	iLed = 0b10000000;
	
	for (int i = 0; i<4; i++)
     314:	89 f7       	brne	.-30     	; 0x2f8 <ledRotation+0xb6>
		PORTE.OUT = ~iLed;
		iLed >>= 1;
		delay_ms(iDelay);
	}
	
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	df 90       	pop	r13
     324:	cf 90       	pop	r12
     326:	bf 90       	pop	r11
     328:	af 90       	pop	r10
     32a:	08 95       	ret

0000032c <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     32c:	1f 92       	push	r1
     32e:	0f 92       	push	r0
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	0f 92       	push	r0
     334:	11 24       	eor	r1, r1
     336:	08 b6       	in	r0, 0x38	; 56
     338:	0f 92       	push	r0
     33a:	18 be       	out	0x38, r1	; 56
     33c:	09 b6       	in	r0, 0x39	; 57
     33e:	0f 92       	push	r0
     340:	19 be       	out	0x39, r1	; 57
     342:	0b b6       	in	r0, 0x3b	; 59
     344:	0f 92       	push	r0
     346:	1b be       	out	0x3b, r1	; 59
     348:	2f 93       	push	r18
     34a:	3f 93       	push	r19
     34c:	4f 93       	push	r20
     34e:	5f 93       	push	r21
     350:	6f 93       	push	r22
     352:	7f 93       	push	r23
     354:	8f 93       	push	r24
     356:	9f 93       	push	r25
     358:	af 93       	push	r26
     35a:	bf 93       	push	r27
     35c:	ef 93       	push	r30
     35e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     360:	40 91 24 02 	lds	r20, 0x0224
     364:	50 91 25 02 	lds	r21, 0x0225
     368:	e0 91 5a 20 	lds	r30, 0x205A
     36c:	f0 91 5b 20 	lds	r31, 0x205B
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	92 e0       	ldi	r25, 0x02	; 2
     376:	19 95       	eicall
}
     378:	ff 91       	pop	r31
     37a:	ef 91       	pop	r30
     37c:	bf 91       	pop	r27
     37e:	af 91       	pop	r26
     380:	9f 91       	pop	r25
     382:	8f 91       	pop	r24
     384:	7f 91       	pop	r23
     386:	6f 91       	pop	r22
     388:	5f 91       	pop	r21
     38a:	4f 91       	pop	r20
     38c:	3f 91       	pop	r19
     38e:	2f 91       	pop	r18
     390:	0f 90       	pop	r0
     392:	0b be       	out	0x3b, r0	; 59
     394:	0f 90       	pop	r0
     396:	09 be       	out	0x39, r0	; 57
     398:	0f 90       	pop	r0
     39a:	08 be       	out	0x38, r0	; 56
     39c:	0f 90       	pop	r0
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     3a6:	1f 92       	push	r1
     3a8:	0f 92       	push	r0
     3aa:	0f b6       	in	r0, 0x3f	; 63
     3ac:	0f 92       	push	r0
     3ae:	11 24       	eor	r1, r1
     3b0:	08 b6       	in	r0, 0x38	; 56
     3b2:	0f 92       	push	r0
     3b4:	18 be       	out	0x38, r1	; 56
     3b6:	09 b6       	in	r0, 0x39	; 57
     3b8:	0f 92       	push	r0
     3ba:	19 be       	out	0x39, r1	; 57
     3bc:	0b b6       	in	r0, 0x3b	; 59
     3be:	0f 92       	push	r0
     3c0:	1b be       	out	0x3b, r1	; 59
     3c2:	2f 93       	push	r18
     3c4:	3f 93       	push	r19
     3c6:	4f 93       	push	r20
     3c8:	5f 93       	push	r21
     3ca:	6f 93       	push	r22
     3cc:	7f 93       	push	r23
     3ce:	8f 93       	push	r24
     3d0:	9f 93       	push	r25
     3d2:	af 93       	push	r26
     3d4:	bf 93       	push	r27
     3d6:	ef 93       	push	r30
     3d8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     3da:	40 91 2c 02 	lds	r20, 0x022C
     3de:	50 91 2d 02 	lds	r21, 0x022D
     3e2:	e0 91 5a 20 	lds	r30, 0x205A
     3e6:	f0 91 5b 20 	lds	r31, 0x205B
     3ea:	62 e0       	ldi	r22, 0x02	; 2
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	92 e0       	ldi	r25, 0x02	; 2
     3f0:	19 95       	eicall
}
     3f2:	ff 91       	pop	r31
     3f4:	ef 91       	pop	r30
     3f6:	bf 91       	pop	r27
     3f8:	af 91       	pop	r26
     3fa:	9f 91       	pop	r25
     3fc:	8f 91       	pop	r24
     3fe:	7f 91       	pop	r23
     400:	6f 91       	pop	r22
     402:	5f 91       	pop	r21
     404:	4f 91       	pop	r20
     406:	3f 91       	pop	r19
     408:	2f 91       	pop	r18
     40a:	0f 90       	pop	r0
     40c:	0b be       	out	0x3b, r0	; 59
     40e:	0f 90       	pop	r0
     410:	09 be       	out	0x39, r0	; 57
     412:	0f 90       	pop	r0
     414:	08 be       	out	0x38, r0	; 56
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	08 b6       	in	r0, 0x38	; 56
     42c:	0f 92       	push	r0
     42e:	18 be       	out	0x38, r1	; 56
     430:	09 b6       	in	r0, 0x39	; 57
     432:	0f 92       	push	r0
     434:	19 be       	out	0x39, r1	; 57
     436:	0b b6       	in	r0, 0x3b	; 59
     438:	0f 92       	push	r0
     43a:	1b be       	out	0x3b, r1	; 59
     43c:	2f 93       	push	r18
     43e:	3f 93       	push	r19
     440:	4f 93       	push	r20
     442:	5f 93       	push	r21
     444:	6f 93       	push	r22
     446:	7f 93       	push	r23
     448:	8f 93       	push	r24
     44a:	9f 93       	push	r25
     44c:	af 93       	push	r26
     44e:	bf 93       	push	r27
     450:	ef 93       	push	r30
     452:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     454:	40 91 34 02 	lds	r20, 0x0234
     458:	50 91 35 02 	lds	r21, 0x0235
     45c:	e0 91 5a 20 	lds	r30, 0x205A
     460:	f0 91 5b 20 	lds	r31, 0x205B
     464:	64 e0       	ldi	r22, 0x04	; 4
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	19 95       	eicall
}
     46c:	ff 91       	pop	r31
     46e:	ef 91       	pop	r30
     470:	bf 91       	pop	r27
     472:	af 91       	pop	r26
     474:	9f 91       	pop	r25
     476:	8f 91       	pop	r24
     478:	7f 91       	pop	r23
     47a:	6f 91       	pop	r22
     47c:	5f 91       	pop	r21
     47e:	4f 91       	pop	r20
     480:	3f 91       	pop	r19
     482:	2f 91       	pop	r18
     484:	0f 90       	pop	r0
     486:	0b be       	out	0x3b, r0	; 59
     488:	0f 90       	pop	r0
     48a:	09 be       	out	0x39, r0	; 57
     48c:	0f 90       	pop	r0
     48e:	08 be       	out	0x38, r0	; 56
     490:	0f 90       	pop	r0
     492:	0f be       	out	0x3f, r0	; 63
     494:	0f 90       	pop	r0
     496:	1f 90       	pop	r1
     498:	18 95       	reti

0000049a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     49a:	1f 92       	push	r1
     49c:	0f 92       	push	r0
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	0f 92       	push	r0
     4a2:	11 24       	eor	r1, r1
     4a4:	08 b6       	in	r0, 0x38	; 56
     4a6:	0f 92       	push	r0
     4a8:	18 be       	out	0x38, r1	; 56
     4aa:	09 b6       	in	r0, 0x39	; 57
     4ac:	0f 92       	push	r0
     4ae:	19 be       	out	0x39, r1	; 57
     4b0:	0b b6       	in	r0, 0x3b	; 59
     4b2:	0f 92       	push	r0
     4b4:	1b be       	out	0x3b, r1	; 59
     4b6:	2f 93       	push	r18
     4b8:	3f 93       	push	r19
     4ba:	4f 93       	push	r20
     4bc:	5f 93       	push	r21
     4be:	6f 93       	push	r22
     4c0:	7f 93       	push	r23
     4c2:	8f 93       	push	r24
     4c4:	9f 93       	push	r25
     4c6:	af 93       	push	r26
     4c8:	bf 93       	push	r27
     4ca:	ef 93       	push	r30
     4cc:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     4ce:	40 91 3c 02 	lds	r20, 0x023C
     4d2:	50 91 3d 02 	lds	r21, 0x023D
     4d6:	e0 91 5a 20 	lds	r30, 0x205A
     4da:	f0 91 5b 20 	lds	r31, 0x205B
     4de:	68 e0       	ldi	r22, 0x08	; 8
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	19 95       	eicall
}
     4e6:	ff 91       	pop	r31
     4e8:	ef 91       	pop	r30
     4ea:	bf 91       	pop	r27
     4ec:	af 91       	pop	r26
     4ee:	9f 91       	pop	r25
     4f0:	8f 91       	pop	r24
     4f2:	7f 91       	pop	r23
     4f4:	6f 91       	pop	r22
     4f6:	5f 91       	pop	r21
     4f8:	4f 91       	pop	r20
     4fa:	3f 91       	pop	r19
     4fc:	2f 91       	pop	r18
     4fe:	0f 90       	pop	r0
     500:	0b be       	out	0x3b, r0	; 59
     502:	0f 90       	pop	r0
     504:	09 be       	out	0x39, r0	; 57
     506:	0f 90       	pop	r0
     508:	08 be       	out	0x38, r0	; 56
     50a:	0f 90       	pop	r0
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	0f 90       	pop	r0
     510:	1f 90       	pop	r1
     512:	18 95       	reti

00000514 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     514:	1f 92       	push	r1
     516:	0f 92       	push	r0
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	0f 92       	push	r0
     51c:	11 24       	eor	r1, r1
     51e:	08 b6       	in	r0, 0x38	; 56
     520:	0f 92       	push	r0
     522:	18 be       	out	0x38, r1	; 56
     524:	09 b6       	in	r0, 0x39	; 57
     526:	0f 92       	push	r0
     528:	19 be       	out	0x39, r1	; 57
     52a:	0b b6       	in	r0, 0x3b	; 59
     52c:	0f 92       	push	r0
     52e:	1b be       	out	0x3b, r1	; 59
     530:	2f 93       	push	r18
     532:	3f 93       	push	r19
     534:	4f 93       	push	r20
     536:	5f 93       	push	r21
     538:	6f 93       	push	r22
     53a:	7f 93       	push	r23
     53c:	8f 93       	push	r24
     53e:	9f 93       	push	r25
     540:	af 93       	push	r26
     542:	bf 93       	push	r27
     544:	ef 93       	push	r30
     546:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     548:	40 91 64 02 	lds	r20, 0x0264
     54c:	50 91 65 02 	lds	r21, 0x0265
     550:	e0 91 58 20 	lds	r30, 0x2058
     554:	f0 91 59 20 	lds	r31, 0x2059
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	80 e4       	ldi	r24, 0x40	; 64
     55c:	92 e0       	ldi	r25, 0x02	; 2
     55e:	19 95       	eicall
}
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	bf 91       	pop	r27
     566:	af 91       	pop	r26
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	7f 91       	pop	r23
     56e:	6f 91       	pop	r22
     570:	5f 91       	pop	r21
     572:	4f 91       	pop	r20
     574:	3f 91       	pop	r19
     576:	2f 91       	pop	r18
     578:	0f 90       	pop	r0
     57a:	0b be       	out	0x3b, r0	; 59
     57c:	0f 90       	pop	r0
     57e:	09 be       	out	0x39, r0	; 57
     580:	0f 90       	pop	r0
     582:	08 be       	out	0x38, r0	; 56
     584:	0f 90       	pop	r0
     586:	0f be       	out	0x3f, r0	; 63
     588:	0f 90       	pop	r0
     58a:	1f 90       	pop	r1
     58c:	18 95       	reti

0000058e <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     58e:	1f 92       	push	r1
     590:	0f 92       	push	r0
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	0f 92       	push	r0
     596:	11 24       	eor	r1, r1
     598:	08 b6       	in	r0, 0x38	; 56
     59a:	0f 92       	push	r0
     59c:	18 be       	out	0x38, r1	; 56
     59e:	09 b6       	in	r0, 0x39	; 57
     5a0:	0f 92       	push	r0
     5a2:	19 be       	out	0x39, r1	; 57
     5a4:	0b b6       	in	r0, 0x3b	; 59
     5a6:	0f 92       	push	r0
     5a8:	1b be       	out	0x3b, r1	; 59
     5aa:	2f 93       	push	r18
     5ac:	3f 93       	push	r19
     5ae:	4f 93       	push	r20
     5b0:	5f 93       	push	r21
     5b2:	6f 93       	push	r22
     5b4:	7f 93       	push	r23
     5b6:	8f 93       	push	r24
     5b8:	9f 93       	push	r25
     5ba:	af 93       	push	r26
     5bc:	bf 93       	push	r27
     5be:	ef 93       	push	r30
     5c0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     5c2:	40 91 6c 02 	lds	r20, 0x026C
     5c6:	50 91 6d 02 	lds	r21, 0x026D
     5ca:	e0 91 58 20 	lds	r30, 0x2058
     5ce:	f0 91 59 20 	lds	r31, 0x2059
     5d2:	62 e0       	ldi	r22, 0x02	; 2
     5d4:	80 e4       	ldi	r24, 0x40	; 64
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	19 95       	eicall
}
     5da:	ff 91       	pop	r31
     5dc:	ef 91       	pop	r30
     5de:	bf 91       	pop	r27
     5e0:	af 91       	pop	r26
     5e2:	9f 91       	pop	r25
     5e4:	8f 91       	pop	r24
     5e6:	7f 91       	pop	r23
     5e8:	6f 91       	pop	r22
     5ea:	5f 91       	pop	r21
     5ec:	4f 91       	pop	r20
     5ee:	3f 91       	pop	r19
     5f0:	2f 91       	pop	r18
     5f2:	0f 90       	pop	r0
     5f4:	0b be       	out	0x3b, r0	; 59
     5f6:	0f 90       	pop	r0
     5f8:	09 be       	out	0x39, r0	; 57
     5fa:	0f 90       	pop	r0
     5fc:	08 be       	out	0x38, r0	; 56
     5fe:	0f 90       	pop	r0
     600:	0f be       	out	0x3f, r0	; 63
     602:	0f 90       	pop	r0
     604:	1f 90       	pop	r1
     606:	18 95       	reti

00000608 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     608:	1f 92       	push	r1
     60a:	0f 92       	push	r0
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	0f 92       	push	r0
     610:	11 24       	eor	r1, r1
     612:	08 b6       	in	r0, 0x38	; 56
     614:	0f 92       	push	r0
     616:	18 be       	out	0x38, r1	; 56
     618:	09 b6       	in	r0, 0x39	; 57
     61a:	0f 92       	push	r0
     61c:	19 be       	out	0x39, r1	; 57
     61e:	0b b6       	in	r0, 0x3b	; 59
     620:	0f 92       	push	r0
     622:	1b be       	out	0x3b, r1	; 59
     624:	2f 93       	push	r18
     626:	3f 93       	push	r19
     628:	4f 93       	push	r20
     62a:	5f 93       	push	r21
     62c:	6f 93       	push	r22
     62e:	7f 93       	push	r23
     630:	8f 93       	push	r24
     632:	9f 93       	push	r25
     634:	af 93       	push	r26
     636:	bf 93       	push	r27
     638:	ef 93       	push	r30
     63a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     63c:	40 91 74 02 	lds	r20, 0x0274
     640:	50 91 75 02 	lds	r21, 0x0275
     644:	e0 91 58 20 	lds	r30, 0x2058
     648:	f0 91 59 20 	lds	r31, 0x2059
     64c:	64 e0       	ldi	r22, 0x04	; 4
     64e:	80 e4       	ldi	r24, 0x40	; 64
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	19 95       	eicall
}
     654:	ff 91       	pop	r31
     656:	ef 91       	pop	r30
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	7f 91       	pop	r23
     662:	6f 91       	pop	r22
     664:	5f 91       	pop	r21
     666:	4f 91       	pop	r20
     668:	3f 91       	pop	r19
     66a:	2f 91       	pop	r18
     66c:	0f 90       	pop	r0
     66e:	0b be       	out	0x3b, r0	; 59
     670:	0f 90       	pop	r0
     672:	09 be       	out	0x39, r0	; 57
     674:	0f 90       	pop	r0
     676:	08 be       	out	0x38, r0	; 56
     678:	0f 90       	pop	r0
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	0f 90       	pop	r0
     67e:	1f 90       	pop	r1
     680:	18 95       	reti

00000682 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     682:	1f 92       	push	r1
     684:	0f 92       	push	r0
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	0f 92       	push	r0
     68a:	11 24       	eor	r1, r1
     68c:	08 b6       	in	r0, 0x38	; 56
     68e:	0f 92       	push	r0
     690:	18 be       	out	0x38, r1	; 56
     692:	09 b6       	in	r0, 0x39	; 57
     694:	0f 92       	push	r0
     696:	19 be       	out	0x39, r1	; 57
     698:	0b b6       	in	r0, 0x3b	; 59
     69a:	0f 92       	push	r0
     69c:	1b be       	out	0x3b, r1	; 59
     69e:	2f 93       	push	r18
     6a0:	3f 93       	push	r19
     6a2:	4f 93       	push	r20
     6a4:	5f 93       	push	r21
     6a6:	6f 93       	push	r22
     6a8:	7f 93       	push	r23
     6aa:	8f 93       	push	r24
     6ac:	9f 93       	push	r25
     6ae:	af 93       	push	r26
     6b0:	bf 93       	push	r27
     6b2:	ef 93       	push	r30
     6b4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     6b6:	40 91 7c 02 	lds	r20, 0x027C
     6ba:	50 91 7d 02 	lds	r21, 0x027D
     6be:	e0 91 58 20 	lds	r30, 0x2058
     6c2:	f0 91 59 20 	lds	r31, 0x2059
     6c6:	68 e0       	ldi	r22, 0x08	; 8
     6c8:	80 e4       	ldi	r24, 0x40	; 64
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	19 95       	eicall
}
     6ce:	ff 91       	pop	r31
     6d0:	ef 91       	pop	r30
     6d2:	bf 91       	pop	r27
     6d4:	af 91       	pop	r26
     6d6:	9f 91       	pop	r25
     6d8:	8f 91       	pop	r24
     6da:	7f 91       	pop	r23
     6dc:	6f 91       	pop	r22
     6de:	5f 91       	pop	r21
     6e0:	4f 91       	pop	r20
     6e2:	3f 91       	pop	r19
     6e4:	2f 91       	pop	r18
     6e6:	0f 90       	pop	r0
     6e8:	0b be       	out	0x3b, r0	; 59
     6ea:	0f 90       	pop	r0
     6ec:	09 be       	out	0x39, r0	; 57
     6ee:	0f 90       	pop	r0
     6f0:	08 be       	out	0x38, r0	; 56
     6f2:	0f 90       	pop	r0
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	0f 90       	pop	r0
     6f8:	1f 90       	pop	r1
     6fa:	18 95       	reti

000006fc <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	80 93 70 00 	sts	0x0070, r24
     702:	80 93 71 00 	sts	0x0071, r24
     706:	80 93 72 00 	sts	0x0072, r24
     70a:	80 93 73 00 	sts	0x0073, r24
     70e:	80 93 74 00 	sts	0x0074, r24
     712:	80 93 75 00 	sts	0x0075, r24
     716:	80 93 76 00 	sts	0x0076, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     71a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     71c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     71e:	e0 e5       	ldi	r30, 0x50	; 80
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	82 60       	ori	r24, 0x02	; 2
     726:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     728:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     72a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     72c:	81 ff       	sbrs	r24, 1
     72e:	fd cf       	rjmp	.-6      	; 0x72a <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	80 e4       	ldi	r24, 0x40	; 64
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     73a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     73c:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     73e:	e0 e5       	ldi	r30, 0x50	; 80
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	80 81       	ld	r24, Z
     744:	8e 7f       	andi	r24, 0xFE	; 254
     746:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     748:	9f bf       	out	0x3f, r25	; 63
     74a:	08 95       	ret

0000074c <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     74c:	1f 92       	push	r1
     74e:	0f 92       	push	r0
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	0f 92       	push	r0
     754:	11 24       	eor	r1, r1
     756:	08 b6       	in	r0, 0x38	; 56
     758:	0f 92       	push	r0
     75a:	18 be       	out	0x38, r1	; 56
     75c:	0b b6       	in	r0, 0x3b	; 59
     75e:	0f 92       	push	r0
     760:	1b be       	out	0x3b, r1	; 59
     762:	8f 93       	push	r24
     764:	9f 93       	push	r25
     766:	ef 93       	push	r30
     768:	ff 93       	push	r31
	rtc_data.counter_high++;
     76a:	ec e5       	ldi	r30, 0x5C	; 92
     76c:	f0 e2       	ldi	r31, 0x20	; 32
     76e:	80 81       	ld	r24, Z
     770:	91 81       	ldd	r25, Z+1	; 0x01
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	80 83       	st	Z, r24
     776:	91 83       	std	Z+1, r25	; 0x01
}
     778:	ff 91       	pop	r31
     77a:	ef 91       	pop	r30
     77c:	9f 91       	pop	r25
     77e:	8f 91       	pop	r24
     780:	0f 90       	pop	r0
     782:	0b be       	out	0x3b, r0	; 59
     784:	0f 90       	pop	r0
     786:	08 be       	out	0x38, r0	; 56
     788:	0f 90       	pop	r0
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	0f 90       	pop	r0
     78e:	1f 90       	pop	r1
     790:	18 95       	reti

00000792 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     792:	1f 92       	push	r1
     794:	0f 92       	push	r0
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	0f 92       	push	r0
     79a:	11 24       	eor	r1, r1
     79c:	08 b6       	in	r0, 0x38	; 56
     79e:	0f 92       	push	r0
     7a0:	18 be       	out	0x38, r1	; 56
     7a2:	09 b6       	in	r0, 0x39	; 57
     7a4:	0f 92       	push	r0
     7a6:	19 be       	out	0x39, r1	; 57
     7a8:	0b b6       	in	r0, 0x3b	; 59
     7aa:	0f 92       	push	r0
     7ac:	1b be       	out	0x3b, r1	; 59
     7ae:	cf 92       	push	r12
     7b0:	df 92       	push	r13
     7b2:	ef 92       	push	r14
     7b4:	ff 92       	push	r15
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	2f 93       	push	r18
     7bc:	3f 93       	push	r19
     7be:	4f 93       	push	r20
     7c0:	5f 93       	push	r21
     7c2:	6f 93       	push	r22
     7c4:	7f 93       	push	r23
     7c6:	8f 93       	push	r24
     7c8:	9f 93       	push	r25
     7ca:	af 93       	push	r26
     7cc:	bf 93       	push	r27
     7ce:	ef 93       	push	r30
     7d0:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     7d2:	ec e5       	ldi	r30, 0x5C	; 92
     7d4:	f0 e2       	ldi	r31, 0x20	; 32
     7d6:	80 81       	ld	r24, Z
     7d8:	91 81       	ldd	r25, Z+1	; 0x01
     7da:	22 81       	ldd	r18, Z+2	; 0x02
     7dc:	33 81       	ldd	r19, Z+3	; 0x03
     7de:	82 17       	cp	r24, r18
     7e0:	93 07       	cpc	r25, r19
     7e2:	f0 f1       	brcs	.+124    	; 0x860 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     7e4:	21 e0       	ldi	r18, 0x01	; 1
     7e6:	20 93 02 04 	sts	0x0402, r18
		if (rtc_data.callback) {
     7ea:	e0 91 62 20 	lds	r30, 0x2062
     7ee:	f0 91 63 20 	lds	r31, 0x2063
     7f2:	30 97       	sbiw	r30, 0x00	; 0
     7f4:	a9 f1       	breq	.+106    	; 0x860 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     7f6:	60 91 08 04 	lds	r22, 0x0408
     7fa:	70 91 09 04 	lds	r23, 0x0409
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	dc 01       	movw	r26, r24
     804:	99 27       	eor	r25, r25
     806:	88 27       	eor	r24, r24
					| RTC.CNT;
     808:	ab 01       	movw	r20, r22
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     80e:	8c 01       	movw	r16, r24
     810:	9d 01       	movw	r18, r26
     812:	04 2b       	or	r16, r20
     814:	15 2b       	or	r17, r21
     816:	26 2b       	or	r18, r22
     818:	37 2b       	or	r19, r23
     81a:	c9 01       	movw	r24, r18
     81c:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     81e:	ac e5       	ldi	r26, 0x5C	; 92
     820:	b0 e2       	ldi	r27, 0x20	; 32
     822:	12 96       	adiw	r26, 0x02	; 2
     824:	0d 91       	ld	r16, X+
     826:	1c 91       	ld	r17, X
     828:	13 97       	sbiw	r26, 0x03	; 3
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	98 01       	movw	r18, r16
     830:	11 27       	eor	r17, r17
     832:	00 27       	eor	r16, r16
					| rtc_data.alarm_low;
     834:	14 96       	adiw	r26, 0x04	; 4
     836:	cd 90       	ld	r12, X+
     838:	dc 90       	ld	r13, X
     83a:	15 97       	sbiw	r26, 0x05	; 5
     83c:	e1 2c       	mov	r14, r1
     83e:	f1 2c       	mov	r15, r1
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     840:	0c 29       	or	r16, r12
     842:	1d 29       	or	r17, r13
     844:	2e 29       	or	r18, r14
     846:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     848:	06 17       	cp	r16, r22
     84a:	17 07       	cpc	r17, r23
     84c:	28 07       	cpc	r18, r24
     84e:	39 07       	cpc	r19, r25
     850:	30 f0       	brcs	.+12     	; 0x85e <__vector_11+0xcc>
				count = alarm + 1;
     852:	c9 01       	movw	r24, r18
     854:	b8 01       	movw	r22, r16
     856:	6f 5f       	subi	r22, 0xFF	; 255
     858:	7f 4f       	sbci	r23, 0xFF	; 255
     85a:	8f 4f       	sbci	r24, 0xFF	; 255
     85c:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     85e:	19 95       	eicall
		}
	}
}
     860:	ff 91       	pop	r31
     862:	ef 91       	pop	r30
     864:	bf 91       	pop	r27
     866:	af 91       	pop	r26
     868:	9f 91       	pop	r25
     86a:	8f 91       	pop	r24
     86c:	7f 91       	pop	r23
     86e:	6f 91       	pop	r22
     870:	5f 91       	pop	r21
     872:	4f 91       	pop	r20
     874:	3f 91       	pop	r19
     876:	2f 91       	pop	r18
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	df 90       	pop	r13
     882:	cf 90       	pop	r12
     884:	0f 90       	pop	r0
     886:	0b be       	out	0x3b, r0	; 59
     888:	0f 90       	pop	r0
     88a:	09 be       	out	0x39, r0	; 57
     88c:	0f 90       	pop	r0
     88e:	08 be       	out	0x38, r0	; 56
     890:	0f 90       	pop	r0
     892:	0f be       	out	0x3f, r0	; 63
     894:	0f 90       	pop	r0
     896:	1f 90       	pop	r1
     898:	18 95       	reti

0000089a <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     89a:	1f 92       	push	r1
     89c:	0f 92       	push	r0
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	0f 92       	push	r0
     8a2:	11 24       	eor	r1, r1
     8a4:	08 b6       	in	r0, 0x38	; 56
     8a6:	0f 92       	push	r0
     8a8:	18 be       	out	0x38, r1	; 56
     8aa:	09 b6       	in	r0, 0x39	; 57
     8ac:	0f 92       	push	r0
     8ae:	19 be       	out	0x39, r1	; 57
     8b0:	0b b6       	in	r0, 0x3b	; 59
     8b2:	0f 92       	push	r0
     8b4:	1b be       	out	0x3b, r1	; 59
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     8ce:	e0 91 56 20 	lds	r30, 0x2056
     8d2:	f0 91 57 20 	lds	r31, 0x2057
     8d6:	30 97       	sbiw	r30, 0x00	; 0
     8d8:	09 f0       	breq	.+2      	; 0x8dc <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     8da:	19 95       	eicall
	}
}
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	bf 91       	pop	r27
     8e2:	af 91       	pop	r26
     8e4:	9f 91       	pop	r25
     8e6:	8f 91       	pop	r24
     8e8:	7f 91       	pop	r23
     8ea:	6f 91       	pop	r22
     8ec:	5f 91       	pop	r21
     8ee:	4f 91       	pop	r20
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0b be       	out	0x3b, r0	; 59
     8f8:	0f 90       	pop	r0
     8fa:	09 be       	out	0x39, r0	; 57
     8fc:	0f 90       	pop	r0
     8fe:	08 be       	out	0x38, r0	; 56
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	0f 90       	pop	r0
     906:	1f 90       	pop	r1
     908:	18 95       	reti

0000090a <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	0f 92       	push	r0
     912:	11 24       	eor	r1, r1
     914:	08 b6       	in	r0, 0x38	; 56
     916:	0f 92       	push	r0
     918:	18 be       	out	0x38, r1	; 56
     91a:	09 b6       	in	r0, 0x39	; 57
     91c:	0f 92       	push	r0
     91e:	19 be       	out	0x39, r1	; 57
     920:	0b b6       	in	r0, 0x3b	; 59
     922:	0f 92       	push	r0
     924:	1b be       	out	0x3b, r1	; 59
     926:	2f 93       	push	r18
     928:	3f 93       	push	r19
     92a:	4f 93       	push	r20
     92c:	5f 93       	push	r21
     92e:	6f 93       	push	r22
     930:	7f 93       	push	r23
     932:	8f 93       	push	r24
     934:	9f 93       	push	r25
     936:	af 93       	push	r26
     938:	bf 93       	push	r27
     93a:	ef 93       	push	r30
     93c:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     93e:	e0 91 54 20 	lds	r30, 0x2054
     942:	f0 91 55 20 	lds	r31, 0x2055
     946:	30 97       	sbiw	r30, 0x00	; 0
     948:	09 f0       	breq	.+2      	; 0x94c <__vector_15+0x42>
		tc_tcc0_err_callback();
     94a:	19 95       	eicall
	}
}
     94c:	ff 91       	pop	r31
     94e:	ef 91       	pop	r30
     950:	bf 91       	pop	r27
     952:	af 91       	pop	r26
     954:	9f 91       	pop	r25
     956:	8f 91       	pop	r24
     958:	7f 91       	pop	r23
     95a:	6f 91       	pop	r22
     95c:	5f 91       	pop	r21
     95e:	4f 91       	pop	r20
     960:	3f 91       	pop	r19
     962:	2f 91       	pop	r18
     964:	0f 90       	pop	r0
     966:	0b be       	out	0x3b, r0	; 59
     968:	0f 90       	pop	r0
     96a:	09 be       	out	0x39, r0	; 57
     96c:	0f 90       	pop	r0
     96e:	08 be       	out	0x38, r0	; 56
     970:	0f 90       	pop	r0
     972:	0f be       	out	0x3f, r0	; 63
     974:	0f 90       	pop	r0
     976:	1f 90       	pop	r1
     978:	18 95       	reti

0000097a <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
     984:	08 b6       	in	r0, 0x38	; 56
     986:	0f 92       	push	r0
     988:	18 be       	out	0x38, r1	; 56
     98a:	09 b6       	in	r0, 0x39	; 57
     98c:	0f 92       	push	r0
     98e:	19 be       	out	0x39, r1	; 57
     990:	0b b6       	in	r0, 0x3b	; 59
     992:	0f 92       	push	r0
     994:	1b be       	out	0x3b, r1	; 59
     996:	2f 93       	push	r18
     998:	3f 93       	push	r19
     99a:	4f 93       	push	r20
     99c:	5f 93       	push	r21
     99e:	6f 93       	push	r22
     9a0:	7f 93       	push	r23
     9a2:	8f 93       	push	r24
     9a4:	9f 93       	push	r25
     9a6:	af 93       	push	r26
     9a8:	bf 93       	push	r27
     9aa:	ef 93       	push	r30
     9ac:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     9ae:	e0 91 52 20 	lds	r30, 0x2052
     9b2:	f0 91 53 20 	lds	r31, 0x2053
     9b6:	30 97       	sbiw	r30, 0x00	; 0
     9b8:	09 f0       	breq	.+2      	; 0x9bc <__vector_16+0x42>
		tc_tcc0_cca_callback();
     9ba:	19 95       	eicall
	}
}
     9bc:	ff 91       	pop	r31
     9be:	ef 91       	pop	r30
     9c0:	bf 91       	pop	r27
     9c2:	af 91       	pop	r26
     9c4:	9f 91       	pop	r25
     9c6:	8f 91       	pop	r24
     9c8:	7f 91       	pop	r23
     9ca:	6f 91       	pop	r22
     9cc:	5f 91       	pop	r21
     9ce:	4f 91       	pop	r20
     9d0:	3f 91       	pop	r19
     9d2:	2f 91       	pop	r18
     9d4:	0f 90       	pop	r0
     9d6:	0b be       	out	0x3b, r0	; 59
     9d8:	0f 90       	pop	r0
     9da:	09 be       	out	0x39, r0	; 57
     9dc:	0f 90       	pop	r0
     9de:	08 be       	out	0x38, r0	; 56
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	0f 90       	pop	r0
     9e6:	1f 90       	pop	r1
     9e8:	18 95       	reti

000009ea <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     9ea:	1f 92       	push	r1
     9ec:	0f 92       	push	r0
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	0f 92       	push	r0
     9f2:	11 24       	eor	r1, r1
     9f4:	08 b6       	in	r0, 0x38	; 56
     9f6:	0f 92       	push	r0
     9f8:	18 be       	out	0x38, r1	; 56
     9fa:	09 b6       	in	r0, 0x39	; 57
     9fc:	0f 92       	push	r0
     9fe:	19 be       	out	0x39, r1	; 57
     a00:	0b b6       	in	r0, 0x3b	; 59
     a02:	0f 92       	push	r0
     a04:	1b be       	out	0x3b, r1	; 59
     a06:	2f 93       	push	r18
     a08:	3f 93       	push	r19
     a0a:	4f 93       	push	r20
     a0c:	5f 93       	push	r21
     a0e:	6f 93       	push	r22
     a10:	7f 93       	push	r23
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	af 93       	push	r26
     a18:	bf 93       	push	r27
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     a1e:	e0 91 50 20 	lds	r30, 0x2050
     a22:	f0 91 51 20 	lds	r31, 0x2051
     a26:	30 97       	sbiw	r30, 0x00	; 0
     a28:	09 f0       	breq	.+2      	; 0xa2c <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     a2a:	19 95       	eicall
	}
}
     a2c:	ff 91       	pop	r31
     a2e:	ef 91       	pop	r30
     a30:	bf 91       	pop	r27
     a32:	af 91       	pop	r26
     a34:	9f 91       	pop	r25
     a36:	8f 91       	pop	r24
     a38:	7f 91       	pop	r23
     a3a:	6f 91       	pop	r22
     a3c:	5f 91       	pop	r21
     a3e:	4f 91       	pop	r20
     a40:	3f 91       	pop	r19
     a42:	2f 91       	pop	r18
     a44:	0f 90       	pop	r0
     a46:	0b be       	out	0x3b, r0	; 59
     a48:	0f 90       	pop	r0
     a4a:	09 be       	out	0x39, r0	; 57
     a4c:	0f 90       	pop	r0
     a4e:	08 be       	out	0x38, r0	; 56
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     a5a:	1f 92       	push	r1
     a5c:	0f 92       	push	r0
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	0f 92       	push	r0
     a62:	11 24       	eor	r1, r1
     a64:	08 b6       	in	r0, 0x38	; 56
     a66:	0f 92       	push	r0
     a68:	18 be       	out	0x38, r1	; 56
     a6a:	09 b6       	in	r0, 0x39	; 57
     a6c:	0f 92       	push	r0
     a6e:	19 be       	out	0x39, r1	; 57
     a70:	0b b6       	in	r0, 0x3b	; 59
     a72:	0f 92       	push	r0
     a74:	1b be       	out	0x3b, r1	; 59
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	ef 93       	push	r30
     a8c:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     a8e:	e0 91 4e 20 	lds	r30, 0x204E
     a92:	f0 91 4f 20 	lds	r31, 0x204F
     a96:	30 97       	sbiw	r30, 0x00	; 0
     a98:	09 f0       	breq	.+2      	; 0xa9c <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     a9a:	19 95       	eicall
	}
}
     a9c:	ff 91       	pop	r31
     a9e:	ef 91       	pop	r30
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0b be       	out	0x3b, r0	; 59
     ab8:	0f 90       	pop	r0
     aba:	09 be       	out	0x39, r0	; 57
     abc:	0f 90       	pop	r0
     abe:	08 be       	out	0x38, r0	; 56
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	08 b6       	in	r0, 0x38	; 56
     ad6:	0f 92       	push	r0
     ad8:	18 be       	out	0x38, r1	; 56
     ada:	09 b6       	in	r0, 0x39	; 57
     adc:	0f 92       	push	r0
     ade:	19 be       	out	0x39, r1	; 57
     ae0:	0b b6       	in	r0, 0x3b	; 59
     ae2:	0f 92       	push	r0
     ae4:	1b be       	out	0x3b, r1	; 59
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	4f 93       	push	r20
     aec:	5f 93       	push	r21
     aee:	6f 93       	push	r22
     af0:	7f 93       	push	r23
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	af 93       	push	r26
     af8:	bf 93       	push	r27
     afa:	ef 93       	push	r30
     afc:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     afe:	e0 91 4c 20 	lds	r30, 0x204C
     b02:	f0 91 4d 20 	lds	r31, 0x204D
     b06:	30 97       	sbiw	r30, 0x00	; 0
     b08:	09 f0       	breq	.+2      	; 0xb0c <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     b0a:	19 95       	eicall
	}
}
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0b be       	out	0x3b, r0	; 59
     b28:	0f 90       	pop	r0
     b2a:	09 be       	out	0x39, r0	; 57
     b2c:	0f 90       	pop	r0
     b2e:	08 be       	out	0x38, r0	; 56
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     b3a:	1f 92       	push	r1
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	08 b6       	in	r0, 0x38	; 56
     b46:	0f 92       	push	r0
     b48:	18 be       	out	0x38, r1	; 56
     b4a:	09 b6       	in	r0, 0x39	; 57
     b4c:	0f 92       	push	r0
     b4e:	19 be       	out	0x39, r1	; 57
     b50:	0b b6       	in	r0, 0x3b	; 59
     b52:	0f 92       	push	r0
     b54:	1b be       	out	0x3b, r1	; 59
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	ef 93       	push	r30
     b6c:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     b6e:	e0 91 4a 20 	lds	r30, 0x204A
     b72:	f0 91 4b 20 	lds	r31, 0x204B
     b76:	30 97       	sbiw	r30, 0x00	; 0
     b78:	09 f0       	breq	.+2      	; 0xb7c <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     b7a:	19 95       	eicall
	}
}
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	bf 91       	pop	r27
     b82:	af 91       	pop	r26
     b84:	9f 91       	pop	r25
     b86:	8f 91       	pop	r24
     b88:	7f 91       	pop	r23
     b8a:	6f 91       	pop	r22
     b8c:	5f 91       	pop	r21
     b8e:	4f 91       	pop	r20
     b90:	3f 91       	pop	r19
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0b be       	out	0x3b, r0	; 59
     b98:	0f 90       	pop	r0
     b9a:	09 be       	out	0x39, r0	; 57
     b9c:	0f 90       	pop	r0
     b9e:	08 be       	out	0x38, r0	; 56
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     baa:	1f 92       	push	r1
     bac:	0f 92       	push	r0
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	0f 92       	push	r0
     bb2:	11 24       	eor	r1, r1
     bb4:	08 b6       	in	r0, 0x38	; 56
     bb6:	0f 92       	push	r0
     bb8:	18 be       	out	0x38, r1	; 56
     bba:	09 b6       	in	r0, 0x39	; 57
     bbc:	0f 92       	push	r0
     bbe:	19 be       	out	0x39, r1	; 57
     bc0:	0b b6       	in	r0, 0x3b	; 59
     bc2:	0f 92       	push	r0
     bc4:	1b be       	out	0x3b, r1	; 59
     bc6:	2f 93       	push	r18
     bc8:	3f 93       	push	r19
     bca:	4f 93       	push	r20
     bcc:	5f 93       	push	r21
     bce:	6f 93       	push	r22
     bd0:	7f 93       	push	r23
     bd2:	8f 93       	push	r24
     bd4:	9f 93       	push	r25
     bd6:	af 93       	push	r26
     bd8:	bf 93       	push	r27
     bda:	ef 93       	push	r30
     bdc:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     bde:	e0 91 48 20 	lds	r30, 0x2048
     be2:	f0 91 49 20 	lds	r31, 0x2049
     be6:	30 97       	sbiw	r30, 0x00	; 0
     be8:	09 f0       	breq	.+2      	; 0xbec <__vector_21+0x42>
		tc_tcc1_err_callback();
     bea:	19 95       	eicall
	}
}
     bec:	ff 91       	pop	r31
     bee:	ef 91       	pop	r30
     bf0:	bf 91       	pop	r27
     bf2:	af 91       	pop	r26
     bf4:	9f 91       	pop	r25
     bf6:	8f 91       	pop	r24
     bf8:	7f 91       	pop	r23
     bfa:	6f 91       	pop	r22
     bfc:	5f 91       	pop	r21
     bfe:	4f 91       	pop	r20
     c00:	3f 91       	pop	r19
     c02:	2f 91       	pop	r18
     c04:	0f 90       	pop	r0
     c06:	0b be       	out	0x3b, r0	; 59
     c08:	0f 90       	pop	r0
     c0a:	09 be       	out	0x39, r0	; 57
     c0c:	0f 90       	pop	r0
     c0e:	08 be       	out	0x38, r0	; 56
     c10:	0f 90       	pop	r0
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	0f 90       	pop	r0
     c16:	1f 90       	pop	r1
     c18:	18 95       	reti

00000c1a <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     c1a:	1f 92       	push	r1
     c1c:	0f 92       	push	r0
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	0f 92       	push	r0
     c22:	11 24       	eor	r1, r1
     c24:	08 b6       	in	r0, 0x38	; 56
     c26:	0f 92       	push	r0
     c28:	18 be       	out	0x38, r1	; 56
     c2a:	09 b6       	in	r0, 0x39	; 57
     c2c:	0f 92       	push	r0
     c2e:	19 be       	out	0x39, r1	; 57
     c30:	0b b6       	in	r0, 0x3b	; 59
     c32:	0f 92       	push	r0
     c34:	1b be       	out	0x3b, r1	; 59
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	4f 93       	push	r20
     c3c:	5f 93       	push	r21
     c3e:	6f 93       	push	r22
     c40:	7f 93       	push	r23
     c42:	8f 93       	push	r24
     c44:	9f 93       	push	r25
     c46:	af 93       	push	r26
     c48:	bf 93       	push	r27
     c4a:	ef 93       	push	r30
     c4c:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     c4e:	e0 91 46 20 	lds	r30, 0x2046
     c52:	f0 91 47 20 	lds	r31, 0x2047
     c56:	30 97       	sbiw	r30, 0x00	; 0
     c58:	09 f0       	breq	.+2      	; 0xc5c <__vector_22+0x42>
		tc_tcc1_cca_callback();
     c5a:	19 95       	eicall
	}
}
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0b be       	out	0x3b, r0	; 59
     c78:	0f 90       	pop	r0
     c7a:	09 be       	out	0x39, r0	; 57
     c7c:	0f 90       	pop	r0
     c7e:	08 be       	out	0x38, r0	; 56
     c80:	0f 90       	pop	r0
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	0f 90       	pop	r0
     c86:	1f 90       	pop	r1
     c88:	18 95       	reti

00000c8a <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     c8a:	1f 92       	push	r1
     c8c:	0f 92       	push	r0
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	0f 92       	push	r0
     c92:	11 24       	eor	r1, r1
     c94:	08 b6       	in	r0, 0x38	; 56
     c96:	0f 92       	push	r0
     c98:	18 be       	out	0x38, r1	; 56
     c9a:	09 b6       	in	r0, 0x39	; 57
     c9c:	0f 92       	push	r0
     c9e:	19 be       	out	0x39, r1	; 57
     ca0:	0b b6       	in	r0, 0x3b	; 59
     ca2:	0f 92       	push	r0
     ca4:	1b be       	out	0x3b, r1	; 59
     ca6:	2f 93       	push	r18
     ca8:	3f 93       	push	r19
     caa:	4f 93       	push	r20
     cac:	5f 93       	push	r21
     cae:	6f 93       	push	r22
     cb0:	7f 93       	push	r23
     cb2:	8f 93       	push	r24
     cb4:	9f 93       	push	r25
     cb6:	af 93       	push	r26
     cb8:	bf 93       	push	r27
     cba:	ef 93       	push	r30
     cbc:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     cbe:	e0 91 44 20 	lds	r30, 0x2044
     cc2:	f0 91 45 20 	lds	r31, 0x2045
     cc6:	30 97       	sbiw	r30, 0x00	; 0
     cc8:	09 f0       	breq	.+2      	; 0xccc <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     cca:	19 95       	eicall
	}
}
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	bf 91       	pop	r27
     cd2:	af 91       	pop	r26
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	7f 91       	pop	r23
     cda:	6f 91       	pop	r22
     cdc:	5f 91       	pop	r21
     cde:	4f 91       	pop	r20
     ce0:	3f 91       	pop	r19
     ce2:	2f 91       	pop	r18
     ce4:	0f 90       	pop	r0
     ce6:	0b be       	out	0x3b, r0	; 59
     ce8:	0f 90       	pop	r0
     cea:	09 be       	out	0x39, r0	; 57
     cec:	0f 90       	pop	r0
     cee:	08 be       	out	0x38, r0	; 56
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	08 b6       	in	r0, 0x38	; 56
     d06:	0f 92       	push	r0
     d08:	18 be       	out	0x38, r1	; 56
     d0a:	09 b6       	in	r0, 0x39	; 57
     d0c:	0f 92       	push	r0
     d0e:	19 be       	out	0x39, r1	; 57
     d10:	0b b6       	in	r0, 0x3b	; 59
     d12:	0f 92       	push	r0
     d14:	1b be       	out	0x3b, r1	; 59
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	5f 93       	push	r21
     d1e:	6f 93       	push	r22
     d20:	7f 93       	push	r23
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	af 93       	push	r26
     d28:	bf 93       	push	r27
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     d2e:	e0 91 42 20 	lds	r30, 0x2042
     d32:	f0 91 43 20 	lds	r31, 0x2043
     d36:	30 97       	sbiw	r30, 0x00	; 0
     d38:	09 f0       	breq	.+2      	; 0xd3c <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     d3a:	19 95       	eicall
	}
}
     d3c:	ff 91       	pop	r31
     d3e:	ef 91       	pop	r30
     d40:	bf 91       	pop	r27
     d42:	af 91       	pop	r26
     d44:	9f 91       	pop	r25
     d46:	8f 91       	pop	r24
     d48:	7f 91       	pop	r23
     d4a:	6f 91       	pop	r22
     d4c:	5f 91       	pop	r21
     d4e:	4f 91       	pop	r20
     d50:	3f 91       	pop	r19
     d52:	2f 91       	pop	r18
     d54:	0f 90       	pop	r0
     d56:	0b be       	out	0x3b, r0	; 59
     d58:	0f 90       	pop	r0
     d5a:	09 be       	out	0x39, r0	; 57
     d5c:	0f 90       	pop	r0
     d5e:	08 be       	out	0x38, r0	; 56
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	08 b6       	in	r0, 0x38	; 56
     d76:	0f 92       	push	r0
     d78:	18 be       	out	0x38, r1	; 56
     d7a:	09 b6       	in	r0, 0x39	; 57
     d7c:	0f 92       	push	r0
     d7e:	19 be       	out	0x39, r1	; 57
     d80:	0b b6       	in	r0, 0x3b	; 59
     d82:	0f 92       	push	r0
     d84:	1b be       	out	0x3b, r1	; 59
     d86:	2f 93       	push	r18
     d88:	3f 93       	push	r19
     d8a:	4f 93       	push	r20
     d8c:	5f 93       	push	r21
     d8e:	6f 93       	push	r22
     d90:	7f 93       	push	r23
     d92:	8f 93       	push	r24
     d94:	9f 93       	push	r25
     d96:	af 93       	push	r26
     d98:	bf 93       	push	r27
     d9a:	ef 93       	push	r30
     d9c:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     d9e:	e0 91 40 20 	lds	r30, 0x2040
     da2:	f0 91 41 20 	lds	r31, 0x2041
     da6:	30 97       	sbiw	r30, 0x00	; 0
     da8:	09 f0       	breq	.+2      	; 0xdac <__vector_78+0x42>
		tc_tcd0_err_callback();
     daa:	19 95       	eicall
	}
}
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0b be       	out	0x3b, r0	; 59
     dc8:	0f 90       	pop	r0
     dca:	09 be       	out	0x39, r0	; 57
     dcc:	0f 90       	pop	r0
     dce:	08 be       	out	0x38, r0	; 56
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0
     dd6:	1f 90       	pop	r1
     dd8:	18 95       	reti

00000dda <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	0f 92       	push	r0
     de2:	11 24       	eor	r1, r1
     de4:	08 b6       	in	r0, 0x38	; 56
     de6:	0f 92       	push	r0
     de8:	18 be       	out	0x38, r1	; 56
     dea:	09 b6       	in	r0, 0x39	; 57
     dec:	0f 92       	push	r0
     dee:	19 be       	out	0x39, r1	; 57
     df0:	0b b6       	in	r0, 0x3b	; 59
     df2:	0f 92       	push	r0
     df4:	1b be       	out	0x3b, r1	; 59
     df6:	2f 93       	push	r18
     df8:	3f 93       	push	r19
     dfa:	4f 93       	push	r20
     dfc:	5f 93       	push	r21
     dfe:	6f 93       	push	r22
     e00:	7f 93       	push	r23
     e02:	8f 93       	push	r24
     e04:	9f 93       	push	r25
     e06:	af 93       	push	r26
     e08:	bf 93       	push	r27
     e0a:	ef 93       	push	r30
     e0c:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     e0e:	e0 91 3e 20 	lds	r30, 0x203E
     e12:	f0 91 3f 20 	lds	r31, 0x203F
     e16:	30 97       	sbiw	r30, 0x00	; 0
     e18:	09 f0       	breq	.+2      	; 0xe1c <__vector_79+0x42>
		tc_tcd0_cca_callback();
     e1a:	19 95       	eicall
	}
}
     e1c:	ff 91       	pop	r31
     e1e:	ef 91       	pop	r30
     e20:	bf 91       	pop	r27
     e22:	af 91       	pop	r26
     e24:	9f 91       	pop	r25
     e26:	8f 91       	pop	r24
     e28:	7f 91       	pop	r23
     e2a:	6f 91       	pop	r22
     e2c:	5f 91       	pop	r21
     e2e:	4f 91       	pop	r20
     e30:	3f 91       	pop	r19
     e32:	2f 91       	pop	r18
     e34:	0f 90       	pop	r0
     e36:	0b be       	out	0x3b, r0	; 59
     e38:	0f 90       	pop	r0
     e3a:	09 be       	out	0x39, r0	; 57
     e3c:	0f 90       	pop	r0
     e3e:	08 be       	out	0x38, r0	; 56
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	08 b6       	in	r0, 0x38	; 56
     e56:	0f 92       	push	r0
     e58:	18 be       	out	0x38, r1	; 56
     e5a:	09 b6       	in	r0, 0x39	; 57
     e5c:	0f 92       	push	r0
     e5e:	19 be       	out	0x39, r1	; 57
     e60:	0b b6       	in	r0, 0x3b	; 59
     e62:	0f 92       	push	r0
     e64:	1b be       	out	0x3b, r1	; 59
     e66:	2f 93       	push	r18
     e68:	3f 93       	push	r19
     e6a:	4f 93       	push	r20
     e6c:	5f 93       	push	r21
     e6e:	6f 93       	push	r22
     e70:	7f 93       	push	r23
     e72:	8f 93       	push	r24
     e74:	9f 93       	push	r25
     e76:	af 93       	push	r26
     e78:	bf 93       	push	r27
     e7a:	ef 93       	push	r30
     e7c:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     e7e:	e0 91 3c 20 	lds	r30, 0x203C
     e82:	f0 91 3d 20 	lds	r31, 0x203D
     e86:	30 97       	sbiw	r30, 0x00	; 0
     e88:	09 f0       	breq	.+2      	; 0xe8c <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     e8a:	19 95       	eicall
	}
}
     e8c:	ff 91       	pop	r31
     e8e:	ef 91       	pop	r30
     e90:	bf 91       	pop	r27
     e92:	af 91       	pop	r26
     e94:	9f 91       	pop	r25
     e96:	8f 91       	pop	r24
     e98:	7f 91       	pop	r23
     e9a:	6f 91       	pop	r22
     e9c:	5f 91       	pop	r21
     e9e:	4f 91       	pop	r20
     ea0:	3f 91       	pop	r19
     ea2:	2f 91       	pop	r18
     ea4:	0f 90       	pop	r0
     ea6:	0b be       	out	0x3b, r0	; 59
     ea8:	0f 90       	pop	r0
     eaa:	09 be       	out	0x39, r0	; 57
     eac:	0f 90       	pop	r0
     eae:	08 be       	out	0x38, r0	; 56
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	0f 90       	pop	r0
     eb6:	1f 90       	pop	r1
     eb8:	18 95       	reti

00000eba <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     eba:	1f 92       	push	r1
     ebc:	0f 92       	push	r0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	0f 92       	push	r0
     ec2:	11 24       	eor	r1, r1
     ec4:	08 b6       	in	r0, 0x38	; 56
     ec6:	0f 92       	push	r0
     ec8:	18 be       	out	0x38, r1	; 56
     eca:	09 b6       	in	r0, 0x39	; 57
     ecc:	0f 92       	push	r0
     ece:	19 be       	out	0x39, r1	; 57
     ed0:	0b b6       	in	r0, 0x3b	; 59
     ed2:	0f 92       	push	r0
     ed4:	1b be       	out	0x3b, r1	; 59
     ed6:	2f 93       	push	r18
     ed8:	3f 93       	push	r19
     eda:	4f 93       	push	r20
     edc:	5f 93       	push	r21
     ede:	6f 93       	push	r22
     ee0:	7f 93       	push	r23
     ee2:	8f 93       	push	r24
     ee4:	9f 93       	push	r25
     ee6:	af 93       	push	r26
     ee8:	bf 93       	push	r27
     eea:	ef 93       	push	r30
     eec:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     eee:	e0 91 3a 20 	lds	r30, 0x203A
     ef2:	f0 91 3b 20 	lds	r31, 0x203B
     ef6:	30 97       	sbiw	r30, 0x00	; 0
     ef8:	09 f0       	breq	.+2      	; 0xefc <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     efa:	19 95       	eicall
	}
}
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	bf 91       	pop	r27
     f02:	af 91       	pop	r26
     f04:	9f 91       	pop	r25
     f06:	8f 91       	pop	r24
     f08:	7f 91       	pop	r23
     f0a:	6f 91       	pop	r22
     f0c:	5f 91       	pop	r21
     f0e:	4f 91       	pop	r20
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	0b be       	out	0x3b, r0	; 59
     f18:	0f 90       	pop	r0
     f1a:	09 be       	out	0x39, r0	; 57
     f1c:	0f 90       	pop	r0
     f1e:	08 be       	out	0x38, r0	; 56
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     f2a:	1f 92       	push	r1
     f2c:	0f 92       	push	r0
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	0f 92       	push	r0
     f32:	11 24       	eor	r1, r1
     f34:	08 b6       	in	r0, 0x38	; 56
     f36:	0f 92       	push	r0
     f38:	18 be       	out	0x38, r1	; 56
     f3a:	09 b6       	in	r0, 0x39	; 57
     f3c:	0f 92       	push	r0
     f3e:	19 be       	out	0x39, r1	; 57
     f40:	0b b6       	in	r0, 0x3b	; 59
     f42:	0f 92       	push	r0
     f44:	1b be       	out	0x3b, r1	; 59
     f46:	2f 93       	push	r18
     f48:	3f 93       	push	r19
     f4a:	4f 93       	push	r20
     f4c:	5f 93       	push	r21
     f4e:	6f 93       	push	r22
     f50:	7f 93       	push	r23
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     f5e:	e0 91 38 20 	lds	r30, 0x2038
     f62:	f0 91 39 20 	lds	r31, 0x2039
     f66:	30 97       	sbiw	r30, 0x00	; 0
     f68:	09 f0       	breq	.+2      	; 0xf6c <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     f6a:	19 95       	eicall
	}
}
     f6c:	ff 91       	pop	r31
     f6e:	ef 91       	pop	r30
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	0f 90       	pop	r0
     f86:	0b be       	out	0x3b, r0	; 59
     f88:	0f 90       	pop	r0
     f8a:	09 be       	out	0x39, r0	; 57
     f8c:	0f 90       	pop	r0
     f8e:	08 be       	out	0x38, r0	; 56
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	08 b6       	in	r0, 0x38	; 56
     fa6:	0f 92       	push	r0
     fa8:	18 be       	out	0x38, r1	; 56
     faa:	09 b6       	in	r0, 0x39	; 57
     fac:	0f 92       	push	r0
     fae:	19 be       	out	0x39, r1	; 57
     fb0:	0b b6       	in	r0, 0x3b	; 59
     fb2:	0f 92       	push	r0
     fb4:	1b be       	out	0x3b, r1	; 59
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     fce:	e0 91 36 20 	lds	r30, 0x2036
     fd2:	f0 91 37 20 	lds	r31, 0x2037
     fd6:	30 97       	sbiw	r30, 0x00	; 0
     fd8:	09 f0       	breq	.+2      	; 0xfdc <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     fda:	19 95       	eicall
	}
}
     fdc:	ff 91       	pop	r31
     fde:	ef 91       	pop	r30
     fe0:	bf 91       	pop	r27
     fe2:	af 91       	pop	r26
     fe4:	9f 91       	pop	r25
     fe6:	8f 91       	pop	r24
     fe8:	7f 91       	pop	r23
     fea:	6f 91       	pop	r22
     fec:	5f 91       	pop	r21
     fee:	4f 91       	pop	r20
     ff0:	3f 91       	pop	r19
     ff2:	2f 91       	pop	r18
     ff4:	0f 90       	pop	r0
     ff6:	0b be       	out	0x3b, r0	; 59
     ff8:	0f 90       	pop	r0
     ffa:	09 be       	out	0x39, r0	; 57
     ffc:	0f 90       	pop	r0
     ffe:	08 be       	out	0x38, r0	; 56
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	0f 90       	pop	r0
    1006:	1f 90       	pop	r1
    1008:	18 95       	reti

0000100a <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    100a:	1f 92       	push	r1
    100c:	0f 92       	push	r0
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	0f 92       	push	r0
    1012:	11 24       	eor	r1, r1
    1014:	08 b6       	in	r0, 0x38	; 56
    1016:	0f 92       	push	r0
    1018:	18 be       	out	0x38, r1	; 56
    101a:	09 b6       	in	r0, 0x39	; 57
    101c:	0f 92       	push	r0
    101e:	19 be       	out	0x39, r1	; 57
    1020:	0b b6       	in	r0, 0x3b	; 59
    1022:	0f 92       	push	r0
    1024:	1b be       	out	0x3b, r1	; 59
    1026:	2f 93       	push	r18
    1028:	3f 93       	push	r19
    102a:	4f 93       	push	r20
    102c:	5f 93       	push	r21
    102e:	6f 93       	push	r22
    1030:	7f 93       	push	r23
    1032:	8f 93       	push	r24
    1034:	9f 93       	push	r25
    1036:	af 93       	push	r26
    1038:	bf 93       	push	r27
    103a:	ef 93       	push	r30
    103c:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    103e:	e0 91 34 20 	lds	r30, 0x2034
    1042:	f0 91 35 20 	lds	r31, 0x2035
    1046:	30 97       	sbiw	r30, 0x00	; 0
    1048:	09 f0       	breq	.+2      	; 0x104c <__vector_84+0x42>
		tc_tcd1_err_callback();
    104a:	19 95       	eicall
	}
}
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	bf 91       	pop	r27
    1052:	af 91       	pop	r26
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	7f 91       	pop	r23
    105a:	6f 91       	pop	r22
    105c:	5f 91       	pop	r21
    105e:	4f 91       	pop	r20
    1060:	3f 91       	pop	r19
    1062:	2f 91       	pop	r18
    1064:	0f 90       	pop	r0
    1066:	0b be       	out	0x3b, r0	; 59
    1068:	0f 90       	pop	r0
    106a:	09 be       	out	0x39, r0	; 57
    106c:	0f 90       	pop	r0
    106e:	08 be       	out	0x38, r0	; 56
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	08 b6       	in	r0, 0x38	; 56
    1086:	0f 92       	push	r0
    1088:	18 be       	out	0x38, r1	; 56
    108a:	09 b6       	in	r0, 0x39	; 57
    108c:	0f 92       	push	r0
    108e:	19 be       	out	0x39, r1	; 57
    1090:	0b b6       	in	r0, 0x3b	; 59
    1092:	0f 92       	push	r0
    1094:	1b be       	out	0x3b, r1	; 59
    1096:	2f 93       	push	r18
    1098:	3f 93       	push	r19
    109a:	4f 93       	push	r20
    109c:	5f 93       	push	r21
    109e:	6f 93       	push	r22
    10a0:	7f 93       	push	r23
    10a2:	8f 93       	push	r24
    10a4:	9f 93       	push	r25
    10a6:	af 93       	push	r26
    10a8:	bf 93       	push	r27
    10aa:	ef 93       	push	r30
    10ac:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    10ae:	e0 91 32 20 	lds	r30, 0x2032
    10b2:	f0 91 33 20 	lds	r31, 0x2033
    10b6:	30 97       	sbiw	r30, 0x00	; 0
    10b8:	09 f0       	breq	.+2      	; 0x10bc <__vector_85+0x42>
		tc_tcd1_cca_callback();
    10ba:	19 95       	eicall
	}
}
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0b be       	out	0x3b, r0	; 59
    10d8:	0f 90       	pop	r0
    10da:	09 be       	out	0x39, r0	; 57
    10dc:	0f 90       	pop	r0
    10de:	08 be       	out	0x38, r0	; 56
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti

000010ea <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	08 b6       	in	r0, 0x38	; 56
    10f6:	0f 92       	push	r0
    10f8:	18 be       	out	0x38, r1	; 56
    10fa:	09 b6       	in	r0, 0x39	; 57
    10fc:	0f 92       	push	r0
    10fe:	19 be       	out	0x39, r1	; 57
    1100:	0b b6       	in	r0, 0x3b	; 59
    1102:	0f 92       	push	r0
    1104:	1b be       	out	0x3b, r1	; 59
    1106:	2f 93       	push	r18
    1108:	3f 93       	push	r19
    110a:	4f 93       	push	r20
    110c:	5f 93       	push	r21
    110e:	6f 93       	push	r22
    1110:	7f 93       	push	r23
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	af 93       	push	r26
    1118:	bf 93       	push	r27
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    111e:	e0 91 30 20 	lds	r30, 0x2030
    1122:	f0 91 31 20 	lds	r31, 0x2031
    1126:	30 97       	sbiw	r30, 0x00	; 0
    1128:	09 f0       	breq	.+2      	; 0x112c <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    112a:	19 95       	eicall
	}
}
    112c:	ff 91       	pop	r31
    112e:	ef 91       	pop	r30
    1130:	bf 91       	pop	r27
    1132:	af 91       	pop	r26
    1134:	9f 91       	pop	r25
    1136:	8f 91       	pop	r24
    1138:	7f 91       	pop	r23
    113a:	6f 91       	pop	r22
    113c:	5f 91       	pop	r21
    113e:	4f 91       	pop	r20
    1140:	3f 91       	pop	r19
    1142:	2f 91       	pop	r18
    1144:	0f 90       	pop	r0
    1146:	0b be       	out	0x3b, r0	; 59
    1148:	0f 90       	pop	r0
    114a:	09 be       	out	0x39, r0	; 57
    114c:	0f 90       	pop	r0
    114e:	08 be       	out	0x38, r0	; 56
    1150:	0f 90       	pop	r0
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	0f 90       	pop	r0
    1156:	1f 90       	pop	r1
    1158:	18 95       	reti

0000115a <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    115a:	1f 92       	push	r1
    115c:	0f 92       	push	r0
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	0f 92       	push	r0
    1162:	11 24       	eor	r1, r1
    1164:	08 b6       	in	r0, 0x38	; 56
    1166:	0f 92       	push	r0
    1168:	18 be       	out	0x38, r1	; 56
    116a:	09 b6       	in	r0, 0x39	; 57
    116c:	0f 92       	push	r0
    116e:	19 be       	out	0x39, r1	; 57
    1170:	0b b6       	in	r0, 0x3b	; 59
    1172:	0f 92       	push	r0
    1174:	1b be       	out	0x3b, r1	; 59
    1176:	2f 93       	push	r18
    1178:	3f 93       	push	r19
    117a:	4f 93       	push	r20
    117c:	5f 93       	push	r21
    117e:	6f 93       	push	r22
    1180:	7f 93       	push	r23
    1182:	8f 93       	push	r24
    1184:	9f 93       	push	r25
    1186:	af 93       	push	r26
    1188:	bf 93       	push	r27
    118a:	ef 93       	push	r30
    118c:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    118e:	e0 91 2e 20 	lds	r30, 0x202E
    1192:	f0 91 2f 20 	lds	r31, 0x202F
    1196:	30 97       	sbiw	r30, 0x00	; 0
    1198:	09 f0       	breq	.+2      	; 0x119c <__vector_47+0x42>
		tc_tce0_ovf_callback();
    119a:	19 95       	eicall
	}
}
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	bf 91       	pop	r27
    11a2:	af 91       	pop	r26
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	7f 91       	pop	r23
    11aa:	6f 91       	pop	r22
    11ac:	5f 91       	pop	r21
    11ae:	4f 91       	pop	r20
    11b0:	3f 91       	pop	r19
    11b2:	2f 91       	pop	r18
    11b4:	0f 90       	pop	r0
    11b6:	0b be       	out	0x3b, r0	; 59
    11b8:	0f 90       	pop	r0
    11ba:	09 be       	out	0x39, r0	; 57
    11bc:	0f 90       	pop	r0
    11be:	08 be       	out	0x38, r0	; 56
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	0f 90       	pop	r0
    11c6:	1f 90       	pop	r1
    11c8:	18 95       	reti

000011ca <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    11ca:	1f 92       	push	r1
    11cc:	0f 92       	push	r0
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	0f 92       	push	r0
    11d2:	11 24       	eor	r1, r1
    11d4:	08 b6       	in	r0, 0x38	; 56
    11d6:	0f 92       	push	r0
    11d8:	18 be       	out	0x38, r1	; 56
    11da:	09 b6       	in	r0, 0x39	; 57
    11dc:	0f 92       	push	r0
    11de:	19 be       	out	0x39, r1	; 57
    11e0:	0b b6       	in	r0, 0x3b	; 59
    11e2:	0f 92       	push	r0
    11e4:	1b be       	out	0x3b, r1	; 59
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    11fe:	e0 91 2c 20 	lds	r30, 0x202C
    1202:	f0 91 2d 20 	lds	r31, 0x202D
    1206:	30 97       	sbiw	r30, 0x00	; 0
    1208:	09 f0       	breq	.+2      	; 0x120c <__vector_48+0x42>
		tc_tce0_err_callback();
    120a:	19 95       	eicall
	}
}
    120c:	ff 91       	pop	r31
    120e:	ef 91       	pop	r30
    1210:	bf 91       	pop	r27
    1212:	af 91       	pop	r26
    1214:	9f 91       	pop	r25
    1216:	8f 91       	pop	r24
    1218:	7f 91       	pop	r23
    121a:	6f 91       	pop	r22
    121c:	5f 91       	pop	r21
    121e:	4f 91       	pop	r20
    1220:	3f 91       	pop	r19
    1222:	2f 91       	pop	r18
    1224:	0f 90       	pop	r0
    1226:	0b be       	out	0x3b, r0	; 59
    1228:	0f 90       	pop	r0
    122a:	09 be       	out	0x39, r0	; 57
    122c:	0f 90       	pop	r0
    122e:	08 be       	out	0x38, r0	; 56
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	0f 90       	pop	r0
    1236:	1f 90       	pop	r1
    1238:	18 95       	reti

0000123a <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    123a:	1f 92       	push	r1
    123c:	0f 92       	push	r0
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	0f 92       	push	r0
    1242:	11 24       	eor	r1, r1
    1244:	08 b6       	in	r0, 0x38	; 56
    1246:	0f 92       	push	r0
    1248:	18 be       	out	0x38, r1	; 56
    124a:	09 b6       	in	r0, 0x39	; 57
    124c:	0f 92       	push	r0
    124e:	19 be       	out	0x39, r1	; 57
    1250:	0b b6       	in	r0, 0x3b	; 59
    1252:	0f 92       	push	r0
    1254:	1b be       	out	0x3b, r1	; 59
    1256:	2f 93       	push	r18
    1258:	3f 93       	push	r19
    125a:	4f 93       	push	r20
    125c:	5f 93       	push	r21
    125e:	6f 93       	push	r22
    1260:	7f 93       	push	r23
    1262:	8f 93       	push	r24
    1264:	9f 93       	push	r25
    1266:	af 93       	push	r26
    1268:	bf 93       	push	r27
    126a:	ef 93       	push	r30
    126c:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    126e:	e0 91 2a 20 	lds	r30, 0x202A
    1272:	f0 91 2b 20 	lds	r31, 0x202B
    1276:	30 97       	sbiw	r30, 0x00	; 0
    1278:	09 f0       	breq	.+2      	; 0x127c <__vector_49+0x42>
		tc_tce0_cca_callback();
    127a:	19 95       	eicall
	}
}
    127c:	ff 91       	pop	r31
    127e:	ef 91       	pop	r30
    1280:	bf 91       	pop	r27
    1282:	af 91       	pop	r26
    1284:	9f 91       	pop	r25
    1286:	8f 91       	pop	r24
    1288:	7f 91       	pop	r23
    128a:	6f 91       	pop	r22
    128c:	5f 91       	pop	r21
    128e:	4f 91       	pop	r20
    1290:	3f 91       	pop	r19
    1292:	2f 91       	pop	r18
    1294:	0f 90       	pop	r0
    1296:	0b be       	out	0x3b, r0	; 59
    1298:	0f 90       	pop	r0
    129a:	09 be       	out	0x39, r0	; 57
    129c:	0f 90       	pop	r0
    129e:	08 be       	out	0x38, r0	; 56
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	0f 90       	pop	r0
    12a6:	1f 90       	pop	r1
    12a8:	18 95       	reti

000012aa <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	08 b6       	in	r0, 0x38	; 56
    12b6:	0f 92       	push	r0
    12b8:	18 be       	out	0x38, r1	; 56
    12ba:	09 b6       	in	r0, 0x39	; 57
    12bc:	0f 92       	push	r0
    12be:	19 be       	out	0x39, r1	; 57
    12c0:	0b b6       	in	r0, 0x3b	; 59
    12c2:	0f 92       	push	r0
    12c4:	1b be       	out	0x3b, r1	; 59
    12c6:	2f 93       	push	r18
    12c8:	3f 93       	push	r19
    12ca:	4f 93       	push	r20
    12cc:	5f 93       	push	r21
    12ce:	6f 93       	push	r22
    12d0:	7f 93       	push	r23
    12d2:	8f 93       	push	r24
    12d4:	9f 93       	push	r25
    12d6:	af 93       	push	r26
    12d8:	bf 93       	push	r27
    12da:	ef 93       	push	r30
    12dc:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    12de:	e0 91 28 20 	lds	r30, 0x2028
    12e2:	f0 91 29 20 	lds	r31, 0x2029
    12e6:	30 97       	sbiw	r30, 0x00	; 0
    12e8:	09 f0       	breq	.+2      	; 0x12ec <__vector_50+0x42>
		tc_tce0_ccb_callback();
    12ea:	19 95       	eicall
	}
}
    12ec:	ff 91       	pop	r31
    12ee:	ef 91       	pop	r30
    12f0:	bf 91       	pop	r27
    12f2:	af 91       	pop	r26
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	7f 91       	pop	r23
    12fa:	6f 91       	pop	r22
    12fc:	5f 91       	pop	r21
    12fe:	4f 91       	pop	r20
    1300:	3f 91       	pop	r19
    1302:	2f 91       	pop	r18
    1304:	0f 90       	pop	r0
    1306:	0b be       	out	0x3b, r0	; 59
    1308:	0f 90       	pop	r0
    130a:	09 be       	out	0x39, r0	; 57
    130c:	0f 90       	pop	r0
    130e:	08 be       	out	0x38, r0	; 56
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	08 b6       	in	r0, 0x38	; 56
    1326:	0f 92       	push	r0
    1328:	18 be       	out	0x38, r1	; 56
    132a:	09 b6       	in	r0, 0x39	; 57
    132c:	0f 92       	push	r0
    132e:	19 be       	out	0x39, r1	; 57
    1330:	0b b6       	in	r0, 0x3b	; 59
    1332:	0f 92       	push	r0
    1334:	1b be       	out	0x3b, r1	; 59
    1336:	2f 93       	push	r18
    1338:	3f 93       	push	r19
    133a:	4f 93       	push	r20
    133c:	5f 93       	push	r21
    133e:	6f 93       	push	r22
    1340:	7f 93       	push	r23
    1342:	8f 93       	push	r24
    1344:	9f 93       	push	r25
    1346:	af 93       	push	r26
    1348:	bf 93       	push	r27
    134a:	ef 93       	push	r30
    134c:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    134e:	e0 91 26 20 	lds	r30, 0x2026
    1352:	f0 91 27 20 	lds	r31, 0x2027
    1356:	30 97       	sbiw	r30, 0x00	; 0
    1358:	09 f0       	breq	.+2      	; 0x135c <__vector_51+0x42>
		tc_tce0_ccc_callback();
    135a:	19 95       	eicall
	}
}
    135c:	ff 91       	pop	r31
    135e:	ef 91       	pop	r30
    1360:	bf 91       	pop	r27
    1362:	af 91       	pop	r26
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	7f 91       	pop	r23
    136a:	6f 91       	pop	r22
    136c:	5f 91       	pop	r21
    136e:	4f 91       	pop	r20
    1370:	3f 91       	pop	r19
    1372:	2f 91       	pop	r18
    1374:	0f 90       	pop	r0
    1376:	0b be       	out	0x3b, r0	; 59
    1378:	0f 90       	pop	r0
    137a:	09 be       	out	0x39, r0	; 57
    137c:	0f 90       	pop	r0
    137e:	08 be       	out	0x38, r0	; 56
    1380:	0f 90       	pop	r0
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	0f 90       	pop	r0
    1386:	1f 90       	pop	r1
    1388:	18 95       	reti

0000138a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    138a:	1f 92       	push	r1
    138c:	0f 92       	push	r0
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	0f 92       	push	r0
    1392:	11 24       	eor	r1, r1
    1394:	08 b6       	in	r0, 0x38	; 56
    1396:	0f 92       	push	r0
    1398:	18 be       	out	0x38, r1	; 56
    139a:	09 b6       	in	r0, 0x39	; 57
    139c:	0f 92       	push	r0
    139e:	19 be       	out	0x39, r1	; 57
    13a0:	0b b6       	in	r0, 0x3b	; 59
    13a2:	0f 92       	push	r0
    13a4:	1b be       	out	0x3b, r1	; 59
    13a6:	2f 93       	push	r18
    13a8:	3f 93       	push	r19
    13aa:	4f 93       	push	r20
    13ac:	5f 93       	push	r21
    13ae:	6f 93       	push	r22
    13b0:	7f 93       	push	r23
    13b2:	8f 93       	push	r24
    13b4:	9f 93       	push	r25
    13b6:	af 93       	push	r26
    13b8:	bf 93       	push	r27
    13ba:	ef 93       	push	r30
    13bc:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    13be:	e0 91 24 20 	lds	r30, 0x2024
    13c2:	f0 91 25 20 	lds	r31, 0x2025
    13c6:	30 97       	sbiw	r30, 0x00	; 0
    13c8:	09 f0       	breq	.+2      	; 0x13cc <__vector_52+0x42>
		tc_tce0_ccd_callback();
    13ca:	19 95       	eicall
	}
}
    13cc:	ff 91       	pop	r31
    13ce:	ef 91       	pop	r30
    13d0:	bf 91       	pop	r27
    13d2:	af 91       	pop	r26
    13d4:	9f 91       	pop	r25
    13d6:	8f 91       	pop	r24
    13d8:	7f 91       	pop	r23
    13da:	6f 91       	pop	r22
    13dc:	5f 91       	pop	r21
    13de:	4f 91       	pop	r20
    13e0:	3f 91       	pop	r19
    13e2:	2f 91       	pop	r18
    13e4:	0f 90       	pop	r0
    13e6:	0b be       	out	0x3b, r0	; 59
    13e8:	0f 90       	pop	r0
    13ea:	09 be       	out	0x39, r0	; 57
    13ec:	0f 90       	pop	r0
    13ee:	08 be       	out	0x38, r0	; 56
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    13fa:	1f 92       	push	r1
    13fc:	0f 92       	push	r0
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	08 b6       	in	r0, 0x38	; 56
    1406:	0f 92       	push	r0
    1408:	18 be       	out	0x38, r1	; 56
    140a:	09 b6       	in	r0, 0x39	; 57
    140c:	0f 92       	push	r0
    140e:	19 be       	out	0x39, r1	; 57
    1410:	0b b6       	in	r0, 0x3b	; 59
    1412:	0f 92       	push	r0
    1414:	1b be       	out	0x3b, r1	; 59
    1416:	2f 93       	push	r18
    1418:	3f 93       	push	r19
    141a:	4f 93       	push	r20
    141c:	5f 93       	push	r21
    141e:	6f 93       	push	r22
    1420:	7f 93       	push	r23
    1422:	8f 93       	push	r24
    1424:	9f 93       	push	r25
    1426:	af 93       	push	r26
    1428:	bf 93       	push	r27
    142a:	ef 93       	push	r30
    142c:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    142e:	e0 91 22 20 	lds	r30, 0x2022
    1432:	f0 91 23 20 	lds	r31, 0x2023
    1436:	30 97       	sbiw	r30, 0x00	; 0
    1438:	09 f0       	breq	.+2      	; 0x143c <__vector_53+0x42>
		tc_tce1_ovf_callback();
    143a:	19 95       	eicall
	}
}
    143c:	ff 91       	pop	r31
    143e:	ef 91       	pop	r30
    1440:	bf 91       	pop	r27
    1442:	af 91       	pop	r26
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	7f 91       	pop	r23
    144a:	6f 91       	pop	r22
    144c:	5f 91       	pop	r21
    144e:	4f 91       	pop	r20
    1450:	3f 91       	pop	r19
    1452:	2f 91       	pop	r18
    1454:	0f 90       	pop	r0
    1456:	0b be       	out	0x3b, r0	; 59
    1458:	0f 90       	pop	r0
    145a:	09 be       	out	0x39, r0	; 57
    145c:	0f 90       	pop	r0
    145e:	08 be       	out	0x38, r0	; 56
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	08 b6       	in	r0, 0x38	; 56
    1476:	0f 92       	push	r0
    1478:	18 be       	out	0x38, r1	; 56
    147a:	09 b6       	in	r0, 0x39	; 57
    147c:	0f 92       	push	r0
    147e:	19 be       	out	0x39, r1	; 57
    1480:	0b b6       	in	r0, 0x3b	; 59
    1482:	0f 92       	push	r0
    1484:	1b be       	out	0x3b, r1	; 59
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    149e:	e0 91 20 20 	lds	r30, 0x2020
    14a2:	f0 91 21 20 	lds	r31, 0x2021
    14a6:	30 97       	sbiw	r30, 0x00	; 0
    14a8:	09 f0       	breq	.+2      	; 0x14ac <__vector_54+0x42>
		tc_tce1_err_callback();
    14aa:	19 95       	eicall
	}
}
    14ac:	ff 91       	pop	r31
    14ae:	ef 91       	pop	r30
    14b0:	bf 91       	pop	r27
    14b2:	af 91       	pop	r26
    14b4:	9f 91       	pop	r25
    14b6:	8f 91       	pop	r24
    14b8:	7f 91       	pop	r23
    14ba:	6f 91       	pop	r22
    14bc:	5f 91       	pop	r21
    14be:	4f 91       	pop	r20
    14c0:	3f 91       	pop	r19
    14c2:	2f 91       	pop	r18
    14c4:	0f 90       	pop	r0
    14c6:	0b be       	out	0x3b, r0	; 59
    14c8:	0f 90       	pop	r0
    14ca:	09 be       	out	0x39, r0	; 57
    14cc:	0f 90       	pop	r0
    14ce:	08 be       	out	0x38, r0	; 56
    14d0:	0f 90       	pop	r0
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	0f 90       	pop	r0
    14d6:	1f 90       	pop	r1
    14d8:	18 95       	reti

000014da <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    14da:	1f 92       	push	r1
    14dc:	0f 92       	push	r0
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	0f 92       	push	r0
    14e2:	11 24       	eor	r1, r1
    14e4:	08 b6       	in	r0, 0x38	; 56
    14e6:	0f 92       	push	r0
    14e8:	18 be       	out	0x38, r1	; 56
    14ea:	09 b6       	in	r0, 0x39	; 57
    14ec:	0f 92       	push	r0
    14ee:	19 be       	out	0x39, r1	; 57
    14f0:	0b b6       	in	r0, 0x3b	; 59
    14f2:	0f 92       	push	r0
    14f4:	1b be       	out	0x3b, r1	; 59
    14f6:	2f 93       	push	r18
    14f8:	3f 93       	push	r19
    14fa:	4f 93       	push	r20
    14fc:	5f 93       	push	r21
    14fe:	6f 93       	push	r22
    1500:	7f 93       	push	r23
    1502:	8f 93       	push	r24
    1504:	9f 93       	push	r25
    1506:	af 93       	push	r26
    1508:	bf 93       	push	r27
    150a:	ef 93       	push	r30
    150c:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    150e:	e0 91 1e 20 	lds	r30, 0x201E
    1512:	f0 91 1f 20 	lds	r31, 0x201F
    1516:	30 97       	sbiw	r30, 0x00	; 0
    1518:	09 f0       	breq	.+2      	; 0x151c <__vector_55+0x42>
		tc_tce1_cca_callback();
    151a:	19 95       	eicall
	}
}
    151c:	ff 91       	pop	r31
    151e:	ef 91       	pop	r30
    1520:	bf 91       	pop	r27
    1522:	af 91       	pop	r26
    1524:	9f 91       	pop	r25
    1526:	8f 91       	pop	r24
    1528:	7f 91       	pop	r23
    152a:	6f 91       	pop	r22
    152c:	5f 91       	pop	r21
    152e:	4f 91       	pop	r20
    1530:	3f 91       	pop	r19
    1532:	2f 91       	pop	r18
    1534:	0f 90       	pop	r0
    1536:	0b be       	out	0x3b, r0	; 59
    1538:	0f 90       	pop	r0
    153a:	09 be       	out	0x39, r0	; 57
    153c:	0f 90       	pop	r0
    153e:	08 be       	out	0x38, r0	; 56
    1540:	0f 90       	pop	r0
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	0f 90       	pop	r0
    1546:	1f 90       	pop	r1
    1548:	18 95       	reti

0000154a <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    154a:	1f 92       	push	r1
    154c:	0f 92       	push	r0
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	0f 92       	push	r0
    1552:	11 24       	eor	r1, r1
    1554:	08 b6       	in	r0, 0x38	; 56
    1556:	0f 92       	push	r0
    1558:	18 be       	out	0x38, r1	; 56
    155a:	09 b6       	in	r0, 0x39	; 57
    155c:	0f 92       	push	r0
    155e:	19 be       	out	0x39, r1	; 57
    1560:	0b b6       	in	r0, 0x3b	; 59
    1562:	0f 92       	push	r0
    1564:	1b be       	out	0x3b, r1	; 59
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    157e:	e0 91 1c 20 	lds	r30, 0x201C
    1582:	f0 91 1d 20 	lds	r31, 0x201D
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	09 f0       	breq	.+2      	; 0x158c <__vector_56+0x42>
		tc_tce1_ccb_callback();
    158a:	19 95       	eicall
	}
}
    158c:	ff 91       	pop	r31
    158e:	ef 91       	pop	r30
    1590:	bf 91       	pop	r27
    1592:	af 91       	pop	r26
    1594:	9f 91       	pop	r25
    1596:	8f 91       	pop	r24
    1598:	7f 91       	pop	r23
    159a:	6f 91       	pop	r22
    159c:	5f 91       	pop	r21
    159e:	4f 91       	pop	r20
    15a0:	3f 91       	pop	r19
    15a2:	2f 91       	pop	r18
    15a4:	0f 90       	pop	r0
    15a6:	0b be       	out	0x3b, r0	; 59
    15a8:	0f 90       	pop	r0
    15aa:	09 be       	out	0x39, r0	; 57
    15ac:	0f 90       	pop	r0
    15ae:	08 be       	out	0x38, r0	; 56
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	0f 90       	pop	r0
    15b6:	1f 90       	pop	r1
    15b8:	18 95       	reti

000015ba <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    15ba:	1f 92       	push	r1
    15bc:	0f 92       	push	r0
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	0f 92       	push	r0
    15c2:	11 24       	eor	r1, r1
    15c4:	08 b6       	in	r0, 0x38	; 56
    15c6:	0f 92       	push	r0
    15c8:	18 be       	out	0x38, r1	; 56
    15ca:	09 b6       	in	r0, 0x39	; 57
    15cc:	0f 92       	push	r0
    15ce:	19 be       	out	0x39, r1	; 57
    15d0:	0b b6       	in	r0, 0x3b	; 59
    15d2:	0f 92       	push	r0
    15d4:	1b be       	out	0x3b, r1	; 59
    15d6:	2f 93       	push	r18
    15d8:	3f 93       	push	r19
    15da:	4f 93       	push	r20
    15dc:	5f 93       	push	r21
    15de:	6f 93       	push	r22
    15e0:	7f 93       	push	r23
    15e2:	8f 93       	push	r24
    15e4:	9f 93       	push	r25
    15e6:	af 93       	push	r26
    15e8:	bf 93       	push	r27
    15ea:	ef 93       	push	r30
    15ec:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    15ee:	e0 91 1a 20 	lds	r30, 0x201A
    15f2:	f0 91 1b 20 	lds	r31, 0x201B
    15f6:	30 97       	sbiw	r30, 0x00	; 0
    15f8:	09 f0       	breq	.+2      	; 0x15fc <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    15fa:	19 95       	eicall
	}
}
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	bf 91       	pop	r27
    1602:	af 91       	pop	r26
    1604:	9f 91       	pop	r25
    1606:	8f 91       	pop	r24
    1608:	7f 91       	pop	r23
    160a:	6f 91       	pop	r22
    160c:	5f 91       	pop	r21
    160e:	4f 91       	pop	r20
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	0b be       	out	0x3b, r0	; 59
    1618:	0f 90       	pop	r0
    161a:	09 be       	out	0x39, r0	; 57
    161c:	0f 90       	pop	r0
    161e:	08 be       	out	0x38, r0	; 56
    1620:	0f 90       	pop	r0
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	0f 90       	pop	r0
    1626:	1f 90       	pop	r1
    1628:	18 95       	reti

0000162a <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    162a:	1f 92       	push	r1
    162c:	0f 92       	push	r0
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	0f 92       	push	r0
    1632:	11 24       	eor	r1, r1
    1634:	08 b6       	in	r0, 0x38	; 56
    1636:	0f 92       	push	r0
    1638:	18 be       	out	0x38, r1	; 56
    163a:	09 b6       	in	r0, 0x39	; 57
    163c:	0f 92       	push	r0
    163e:	19 be       	out	0x39, r1	; 57
    1640:	0b b6       	in	r0, 0x3b	; 59
    1642:	0f 92       	push	r0
    1644:	1b be       	out	0x3b, r1	; 59
    1646:	2f 93       	push	r18
    1648:	3f 93       	push	r19
    164a:	4f 93       	push	r20
    164c:	5f 93       	push	r21
    164e:	6f 93       	push	r22
    1650:	7f 93       	push	r23
    1652:	8f 93       	push	r24
    1654:	9f 93       	push	r25
    1656:	af 93       	push	r26
    1658:	bf 93       	push	r27
    165a:	ef 93       	push	r30
    165c:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    165e:	e0 91 18 20 	lds	r30, 0x2018
    1662:	f0 91 19 20 	lds	r31, 0x2019
    1666:	30 97       	sbiw	r30, 0x00	; 0
    1668:	09 f0       	breq	.+2      	; 0x166c <__vector_109+0x42>
		tc_tcf0_err_callback();
    166a:	19 95       	eicall
	}
}
    166c:	ff 91       	pop	r31
    166e:	ef 91       	pop	r30
    1670:	bf 91       	pop	r27
    1672:	af 91       	pop	r26
    1674:	9f 91       	pop	r25
    1676:	8f 91       	pop	r24
    1678:	7f 91       	pop	r23
    167a:	6f 91       	pop	r22
    167c:	5f 91       	pop	r21
    167e:	4f 91       	pop	r20
    1680:	3f 91       	pop	r19
    1682:	2f 91       	pop	r18
    1684:	0f 90       	pop	r0
    1686:	0b be       	out	0x3b, r0	; 59
    1688:	0f 90       	pop	r0
    168a:	09 be       	out	0x39, r0	; 57
    168c:	0f 90       	pop	r0
    168e:	08 be       	out	0x38, r0	; 56
    1690:	0f 90       	pop	r0
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	0f 90       	pop	r0
    1696:	1f 90       	pop	r1
    1698:	18 95       	reti

0000169a <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    169a:	1f 92       	push	r1
    169c:	0f 92       	push	r0
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	0f 92       	push	r0
    16a2:	11 24       	eor	r1, r1
    16a4:	08 b6       	in	r0, 0x38	; 56
    16a6:	0f 92       	push	r0
    16a8:	18 be       	out	0x38, r1	; 56
    16aa:	09 b6       	in	r0, 0x39	; 57
    16ac:	0f 92       	push	r0
    16ae:	19 be       	out	0x39, r1	; 57
    16b0:	0b b6       	in	r0, 0x3b	; 59
    16b2:	0f 92       	push	r0
    16b4:	1b be       	out	0x3b, r1	; 59
    16b6:	2f 93       	push	r18
    16b8:	3f 93       	push	r19
    16ba:	4f 93       	push	r20
    16bc:	5f 93       	push	r21
    16be:	6f 93       	push	r22
    16c0:	7f 93       	push	r23
    16c2:	8f 93       	push	r24
    16c4:	9f 93       	push	r25
    16c6:	af 93       	push	r26
    16c8:	bf 93       	push	r27
    16ca:	ef 93       	push	r30
    16cc:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    16ce:	e0 91 16 20 	lds	r30, 0x2016
    16d2:	f0 91 17 20 	lds	r31, 0x2017
    16d6:	30 97       	sbiw	r30, 0x00	; 0
    16d8:	09 f0       	breq	.+2      	; 0x16dc <__vector_110+0x42>
		tc_tcf0_cca_callback();
    16da:	19 95       	eicall
	}
}
    16dc:	ff 91       	pop	r31
    16de:	ef 91       	pop	r30
    16e0:	bf 91       	pop	r27
    16e2:	af 91       	pop	r26
    16e4:	9f 91       	pop	r25
    16e6:	8f 91       	pop	r24
    16e8:	7f 91       	pop	r23
    16ea:	6f 91       	pop	r22
    16ec:	5f 91       	pop	r21
    16ee:	4f 91       	pop	r20
    16f0:	3f 91       	pop	r19
    16f2:	2f 91       	pop	r18
    16f4:	0f 90       	pop	r0
    16f6:	0b be       	out	0x3b, r0	; 59
    16f8:	0f 90       	pop	r0
    16fa:	09 be       	out	0x39, r0	; 57
    16fc:	0f 90       	pop	r0
    16fe:	08 be       	out	0x38, r0	; 56
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti

0000170a <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    170a:	1f 92       	push	r1
    170c:	0f 92       	push	r0
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	0f 92       	push	r0
    1712:	11 24       	eor	r1, r1
    1714:	08 b6       	in	r0, 0x38	; 56
    1716:	0f 92       	push	r0
    1718:	18 be       	out	0x38, r1	; 56
    171a:	09 b6       	in	r0, 0x39	; 57
    171c:	0f 92       	push	r0
    171e:	19 be       	out	0x39, r1	; 57
    1720:	0b b6       	in	r0, 0x3b	; 59
    1722:	0f 92       	push	r0
    1724:	1b be       	out	0x3b, r1	; 59
    1726:	2f 93       	push	r18
    1728:	3f 93       	push	r19
    172a:	4f 93       	push	r20
    172c:	5f 93       	push	r21
    172e:	6f 93       	push	r22
    1730:	7f 93       	push	r23
    1732:	8f 93       	push	r24
    1734:	9f 93       	push	r25
    1736:	af 93       	push	r26
    1738:	bf 93       	push	r27
    173a:	ef 93       	push	r30
    173c:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    173e:	e0 91 14 20 	lds	r30, 0x2014
    1742:	f0 91 15 20 	lds	r31, 0x2015
    1746:	30 97       	sbiw	r30, 0x00	; 0
    1748:	09 f0       	breq	.+2      	; 0x174c <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    174a:	19 95       	eicall
	}
}
    174c:	ff 91       	pop	r31
    174e:	ef 91       	pop	r30
    1750:	bf 91       	pop	r27
    1752:	af 91       	pop	r26
    1754:	9f 91       	pop	r25
    1756:	8f 91       	pop	r24
    1758:	7f 91       	pop	r23
    175a:	6f 91       	pop	r22
    175c:	5f 91       	pop	r21
    175e:	4f 91       	pop	r20
    1760:	3f 91       	pop	r19
    1762:	2f 91       	pop	r18
    1764:	0f 90       	pop	r0
    1766:	0b be       	out	0x3b, r0	; 59
    1768:	0f 90       	pop	r0
    176a:	09 be       	out	0x39, r0	; 57
    176c:	0f 90       	pop	r0
    176e:	08 be       	out	0x38, r0	; 56
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	0f 90       	pop	r0
    1776:	1f 90       	pop	r1
    1778:	18 95       	reti

0000177a <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    177a:	1f 92       	push	r1
    177c:	0f 92       	push	r0
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	0f 92       	push	r0
    1782:	11 24       	eor	r1, r1
    1784:	08 b6       	in	r0, 0x38	; 56
    1786:	0f 92       	push	r0
    1788:	18 be       	out	0x38, r1	; 56
    178a:	09 b6       	in	r0, 0x39	; 57
    178c:	0f 92       	push	r0
    178e:	19 be       	out	0x39, r1	; 57
    1790:	0b b6       	in	r0, 0x3b	; 59
    1792:	0f 92       	push	r0
    1794:	1b be       	out	0x3b, r1	; 59
    1796:	2f 93       	push	r18
    1798:	3f 93       	push	r19
    179a:	4f 93       	push	r20
    179c:	5f 93       	push	r21
    179e:	6f 93       	push	r22
    17a0:	7f 93       	push	r23
    17a2:	8f 93       	push	r24
    17a4:	9f 93       	push	r25
    17a6:	af 93       	push	r26
    17a8:	bf 93       	push	r27
    17aa:	ef 93       	push	r30
    17ac:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    17ae:	e0 91 12 20 	lds	r30, 0x2012
    17b2:	f0 91 13 20 	lds	r31, 0x2013
    17b6:	30 97       	sbiw	r30, 0x00	; 0
    17b8:	09 f0       	breq	.+2      	; 0x17bc <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    17ba:	19 95       	eicall
	}
}
    17bc:	ff 91       	pop	r31
    17be:	ef 91       	pop	r30
    17c0:	bf 91       	pop	r27
    17c2:	af 91       	pop	r26
    17c4:	9f 91       	pop	r25
    17c6:	8f 91       	pop	r24
    17c8:	7f 91       	pop	r23
    17ca:	6f 91       	pop	r22
    17cc:	5f 91       	pop	r21
    17ce:	4f 91       	pop	r20
    17d0:	3f 91       	pop	r19
    17d2:	2f 91       	pop	r18
    17d4:	0f 90       	pop	r0
    17d6:	0b be       	out	0x3b, r0	; 59
    17d8:	0f 90       	pop	r0
    17da:	09 be       	out	0x39, r0	; 57
    17dc:	0f 90       	pop	r0
    17de:	08 be       	out	0x38, r0	; 56
    17e0:	0f 90       	pop	r0
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	0f 90       	pop	r0
    17e6:	1f 90       	pop	r1
    17e8:	18 95       	reti

000017ea <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    17ea:	1f 92       	push	r1
    17ec:	0f 92       	push	r0
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	0f 92       	push	r0
    17f2:	11 24       	eor	r1, r1
    17f4:	08 b6       	in	r0, 0x38	; 56
    17f6:	0f 92       	push	r0
    17f8:	18 be       	out	0x38, r1	; 56
    17fa:	09 b6       	in	r0, 0x39	; 57
    17fc:	0f 92       	push	r0
    17fe:	19 be       	out	0x39, r1	; 57
    1800:	0b b6       	in	r0, 0x3b	; 59
    1802:	0f 92       	push	r0
    1804:	1b be       	out	0x3b, r1	; 59
    1806:	2f 93       	push	r18
    1808:	3f 93       	push	r19
    180a:	4f 93       	push	r20
    180c:	5f 93       	push	r21
    180e:	6f 93       	push	r22
    1810:	7f 93       	push	r23
    1812:	8f 93       	push	r24
    1814:	9f 93       	push	r25
    1816:	af 93       	push	r26
    1818:	bf 93       	push	r27
    181a:	ef 93       	push	r30
    181c:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    181e:	e0 91 10 20 	lds	r30, 0x2010
    1822:	f0 91 11 20 	lds	r31, 0x2011
    1826:	30 97       	sbiw	r30, 0x00	; 0
    1828:	09 f0       	breq	.+2      	; 0x182c <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    182a:	19 95       	eicall
	}
}
    182c:	ff 91       	pop	r31
    182e:	ef 91       	pop	r30
    1830:	bf 91       	pop	r27
    1832:	af 91       	pop	r26
    1834:	9f 91       	pop	r25
    1836:	8f 91       	pop	r24
    1838:	7f 91       	pop	r23
    183a:	6f 91       	pop	r22
    183c:	5f 91       	pop	r21
    183e:	4f 91       	pop	r20
    1840:	3f 91       	pop	r19
    1842:	2f 91       	pop	r18
    1844:	0f 90       	pop	r0
    1846:	0b be       	out	0x3b, r0	; 59
    1848:	0f 90       	pop	r0
    184a:	09 be       	out	0x39, r0	; 57
    184c:	0f 90       	pop	r0
    184e:	08 be       	out	0x38, r0	; 56
    1850:	0f 90       	pop	r0
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	0f 90       	pop	r0
    1856:	1f 90       	pop	r1
    1858:	18 95       	reti

0000185a <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    185a:	1f 92       	push	r1
    185c:	0f 92       	push	r0
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	0f 92       	push	r0
    1862:	11 24       	eor	r1, r1
    1864:	08 b6       	in	r0, 0x38	; 56
    1866:	0f 92       	push	r0
    1868:	18 be       	out	0x38, r1	; 56
    186a:	09 b6       	in	r0, 0x39	; 57
    186c:	0f 92       	push	r0
    186e:	19 be       	out	0x39, r1	; 57
    1870:	0b b6       	in	r0, 0x3b	; 59
    1872:	0f 92       	push	r0
    1874:	1b be       	out	0x3b, r1	; 59
    1876:	2f 93       	push	r18
    1878:	3f 93       	push	r19
    187a:	4f 93       	push	r20
    187c:	5f 93       	push	r21
    187e:	6f 93       	push	r22
    1880:	7f 93       	push	r23
    1882:	8f 93       	push	r24
    1884:	9f 93       	push	r25
    1886:	af 93       	push	r26
    1888:	bf 93       	push	r27
    188a:	ef 93       	push	r30
    188c:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    188e:	e0 91 0e 20 	lds	r30, 0x200E
    1892:	f0 91 0f 20 	lds	r31, 0x200F
    1896:	30 97       	sbiw	r30, 0x00	; 0
    1898:	09 f0       	breq	.+2      	; 0x189c <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    189a:	19 95       	eicall
	}
}
    189c:	ff 91       	pop	r31
    189e:	ef 91       	pop	r30
    18a0:	bf 91       	pop	r27
    18a2:	af 91       	pop	r26
    18a4:	9f 91       	pop	r25
    18a6:	8f 91       	pop	r24
    18a8:	7f 91       	pop	r23
    18aa:	6f 91       	pop	r22
    18ac:	5f 91       	pop	r21
    18ae:	4f 91       	pop	r20
    18b0:	3f 91       	pop	r19
    18b2:	2f 91       	pop	r18
    18b4:	0f 90       	pop	r0
    18b6:	0b be       	out	0x3b, r0	; 59
    18b8:	0f 90       	pop	r0
    18ba:	09 be       	out	0x39, r0	; 57
    18bc:	0f 90       	pop	r0
    18be:	08 be       	out	0x38, r0	; 56
    18c0:	0f 90       	pop	r0
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	0f 90       	pop	r0
    18c6:	1f 90       	pop	r1
    18c8:	18 95       	reti

000018ca <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    18ca:	1f 92       	push	r1
    18cc:	0f 92       	push	r0
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	0f 92       	push	r0
    18d2:	11 24       	eor	r1, r1
    18d4:	08 b6       	in	r0, 0x38	; 56
    18d6:	0f 92       	push	r0
    18d8:	18 be       	out	0x38, r1	; 56
    18da:	09 b6       	in	r0, 0x39	; 57
    18dc:	0f 92       	push	r0
    18de:	19 be       	out	0x39, r1	; 57
    18e0:	0b b6       	in	r0, 0x3b	; 59
    18e2:	0f 92       	push	r0
    18e4:	1b be       	out	0x3b, r1	; 59
    18e6:	2f 93       	push	r18
    18e8:	3f 93       	push	r19
    18ea:	4f 93       	push	r20
    18ec:	5f 93       	push	r21
    18ee:	6f 93       	push	r22
    18f0:	7f 93       	push	r23
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
    18f6:	af 93       	push	r26
    18f8:	bf 93       	push	r27
    18fa:	ef 93       	push	r30
    18fc:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    18fe:	e0 91 0c 20 	lds	r30, 0x200C
    1902:	f0 91 0d 20 	lds	r31, 0x200D
    1906:	30 97       	sbiw	r30, 0x00	; 0
    1908:	09 f0       	breq	.+2      	; 0x190c <__vector_115+0x42>
		tc_tcf1_err_callback();
    190a:	19 95       	eicall
	}
}
    190c:	ff 91       	pop	r31
    190e:	ef 91       	pop	r30
    1910:	bf 91       	pop	r27
    1912:	af 91       	pop	r26
    1914:	9f 91       	pop	r25
    1916:	8f 91       	pop	r24
    1918:	7f 91       	pop	r23
    191a:	6f 91       	pop	r22
    191c:	5f 91       	pop	r21
    191e:	4f 91       	pop	r20
    1920:	3f 91       	pop	r19
    1922:	2f 91       	pop	r18
    1924:	0f 90       	pop	r0
    1926:	0b be       	out	0x3b, r0	; 59
    1928:	0f 90       	pop	r0
    192a:	09 be       	out	0x39, r0	; 57
    192c:	0f 90       	pop	r0
    192e:	08 be       	out	0x38, r0	; 56
    1930:	0f 90       	pop	r0
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	0f 90       	pop	r0
    1936:	1f 90       	pop	r1
    1938:	18 95       	reti

0000193a <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    193a:	1f 92       	push	r1
    193c:	0f 92       	push	r0
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	0f 92       	push	r0
    1942:	11 24       	eor	r1, r1
    1944:	08 b6       	in	r0, 0x38	; 56
    1946:	0f 92       	push	r0
    1948:	18 be       	out	0x38, r1	; 56
    194a:	09 b6       	in	r0, 0x39	; 57
    194c:	0f 92       	push	r0
    194e:	19 be       	out	0x39, r1	; 57
    1950:	0b b6       	in	r0, 0x3b	; 59
    1952:	0f 92       	push	r0
    1954:	1b be       	out	0x3b, r1	; 59
    1956:	2f 93       	push	r18
    1958:	3f 93       	push	r19
    195a:	4f 93       	push	r20
    195c:	5f 93       	push	r21
    195e:	6f 93       	push	r22
    1960:	7f 93       	push	r23
    1962:	8f 93       	push	r24
    1964:	9f 93       	push	r25
    1966:	af 93       	push	r26
    1968:	bf 93       	push	r27
    196a:	ef 93       	push	r30
    196c:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    196e:	e0 91 0a 20 	lds	r30, 0x200A
    1972:	f0 91 0b 20 	lds	r31, 0x200B
    1976:	30 97       	sbiw	r30, 0x00	; 0
    1978:	09 f0       	breq	.+2      	; 0x197c <__vector_116+0x42>
		tc_tcf1_cca_callback();
    197a:	19 95       	eicall
	}
}
    197c:	ff 91       	pop	r31
    197e:	ef 91       	pop	r30
    1980:	bf 91       	pop	r27
    1982:	af 91       	pop	r26
    1984:	9f 91       	pop	r25
    1986:	8f 91       	pop	r24
    1988:	7f 91       	pop	r23
    198a:	6f 91       	pop	r22
    198c:	5f 91       	pop	r21
    198e:	4f 91       	pop	r20
    1990:	3f 91       	pop	r19
    1992:	2f 91       	pop	r18
    1994:	0f 90       	pop	r0
    1996:	0b be       	out	0x3b, r0	; 59
    1998:	0f 90       	pop	r0
    199a:	09 be       	out	0x39, r0	; 57
    199c:	0f 90       	pop	r0
    199e:	08 be       	out	0x38, r0	; 56
    19a0:	0f 90       	pop	r0
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	0f 90       	pop	r0
    19a6:	1f 90       	pop	r1
    19a8:	18 95       	reti

000019aa <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    19aa:	1f 92       	push	r1
    19ac:	0f 92       	push	r0
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	0f 92       	push	r0
    19b2:	11 24       	eor	r1, r1
    19b4:	08 b6       	in	r0, 0x38	; 56
    19b6:	0f 92       	push	r0
    19b8:	18 be       	out	0x38, r1	; 56
    19ba:	09 b6       	in	r0, 0x39	; 57
    19bc:	0f 92       	push	r0
    19be:	19 be       	out	0x39, r1	; 57
    19c0:	0b b6       	in	r0, 0x3b	; 59
    19c2:	0f 92       	push	r0
    19c4:	1b be       	out	0x3b, r1	; 59
    19c6:	2f 93       	push	r18
    19c8:	3f 93       	push	r19
    19ca:	4f 93       	push	r20
    19cc:	5f 93       	push	r21
    19ce:	6f 93       	push	r22
    19d0:	7f 93       	push	r23
    19d2:	8f 93       	push	r24
    19d4:	9f 93       	push	r25
    19d6:	af 93       	push	r26
    19d8:	bf 93       	push	r27
    19da:	ef 93       	push	r30
    19dc:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    19de:	e0 91 08 20 	lds	r30, 0x2008
    19e2:	f0 91 09 20 	lds	r31, 0x2009
    19e6:	30 97       	sbiw	r30, 0x00	; 0
    19e8:	09 f0       	breq	.+2      	; 0x19ec <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    19ea:	19 95       	eicall
	}
}
    19ec:	ff 91       	pop	r31
    19ee:	ef 91       	pop	r30
    19f0:	bf 91       	pop	r27
    19f2:	af 91       	pop	r26
    19f4:	9f 91       	pop	r25
    19f6:	8f 91       	pop	r24
    19f8:	7f 91       	pop	r23
    19fa:	6f 91       	pop	r22
    19fc:	5f 91       	pop	r21
    19fe:	4f 91       	pop	r20
    1a00:	3f 91       	pop	r19
    1a02:	2f 91       	pop	r18
    1a04:	0f 90       	pop	r0
    1a06:	0b be       	out	0x3b, r0	; 59
    1a08:	0f 90       	pop	r0
    1a0a:	09 be       	out	0x39, r0	; 57
    1a0c:	0f 90       	pop	r0
    1a0e:	08 be       	out	0x38, r0	; 56
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	0f 90       	pop	r0
    1a16:	1f 90       	pop	r1
    1a18:	18 95       	reti

00001a1a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1a1a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1a1c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1a1e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1a20:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1a22:	60 83       	st	Z, r22
	ret                             // Return to caller
    1a24:	08 95       	ret

00001a26 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	70 96       	adiw	r30, 0x10	; 16
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    1a32:	c6 2f       	mov	r28, r22
    1a34:	d0 e0       	ldi	r29, 0x00	; 0
    1a36:	de 01       	movw	r26, r28
    1a38:	02 2e       	mov	r0, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <ioport_configure_port_pin+0x1a>
    1a3c:	b5 95       	asr	r27
    1a3e:	a7 95       	ror	r26
    1a40:	0a 94       	dec	r0
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <ioport_configure_port_pin+0x16>
    1a44:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1a46:	50 83       	st	Z, r21
    1a48:	2f 5f       	subi	r18, 0xFF	; 255
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1a4e:	28 30       	cpi	r18, 0x08	; 8
    1a50:	31 05       	cpc	r19, r1
    1a52:	89 f7       	brne	.-30     	; 0x1a36 <ioport_configure_port_pin+0x10>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    1a54:	40 ff       	sbrs	r20, 0
    1a56:	0a c0       	rjmp	.+20     	; 0x1a6c <ioport_configure_port_pin+0x46>
		if (flags & IOPORT_INIT_HIGH) {
    1a58:	41 ff       	sbrs	r20, 1
    1a5a:	03 c0       	rjmp	.+6      	; 0x1a62 <ioport_configure_port_pin+0x3c>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	65 83       	std	Z+5, r22	; 0x05
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <ioport_configure_port_pin+0x40>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    1a62:	fc 01       	movw	r30, r24
    1a64:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    1a66:	fc 01       	movw	r30, r24
    1a68:	61 83       	std	Z+1, r22	; 0x01
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <ioport_configure_port_pin+0x4a>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	62 83       	std	Z+2, r22	; 0x02
	}
}
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	08 95       	ret

00001a76 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1a76:	43 e0       	ldi	r20, 0x03	; 3
    1a78:	50 e0       	ldi	r21, 0x00	; 0
    1a7a:	61 e0       	ldi	r22, 0x01	; 1
    1a7c:	80 e8       	ldi	r24, 0x80	; 128
    1a7e:	96 e0       	ldi	r25, 0x06	; 6
    1a80:	d2 df       	rcall	.-92     	; 0x1a26 <ioport_configure_port_pin>
    1a82:	43 e0       	ldi	r20, 0x03	; 3
    1a84:	50 e0       	ldi	r21, 0x00	; 0
    1a86:	62 e0       	ldi	r22, 0x02	; 2
    1a88:	80 e8       	ldi	r24, 0x80	; 128
    1a8a:	96 e0       	ldi	r25, 0x06	; 6
    1a8c:	cc df       	rcall	.-104    	; 0x1a26 <ioport_configure_port_pin>
    1a8e:	43 e0       	ldi	r20, 0x03	; 3
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	64 e0       	ldi	r22, 0x04	; 4
    1a94:	80 e8       	ldi	r24, 0x80	; 128
    1a96:	96 e0       	ldi	r25, 0x06	; 6
    1a98:	c6 df       	rcall	.-116    	; 0x1a26 <ioport_configure_port_pin>
    1a9a:	43 e0       	ldi	r20, 0x03	; 3
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	68 e0       	ldi	r22, 0x08	; 8
    1aa0:	80 e8       	ldi	r24, 0x80	; 128
    1aa2:	96 e0       	ldi	r25, 0x06	; 6
    1aa4:	c0 df       	rcall	.-128    	; 0x1a26 <ioport_configure_port_pin>
    1aa6:	43 e0       	ldi	r20, 0x03	; 3
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	60 e1       	ldi	r22, 0x10	; 16
    1aac:	80 e8       	ldi	r24, 0x80	; 128
    1aae:	96 e0       	ldi	r25, 0x06	; 6
    1ab0:	ba df       	rcall	.-140    	; 0x1a26 <ioport_configure_port_pin>
    1ab2:	43 e0       	ldi	r20, 0x03	; 3
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	60 e2       	ldi	r22, 0x20	; 32
    1ab8:	80 e8       	ldi	r24, 0x80	; 128
    1aba:	96 e0       	ldi	r25, 0x06	; 6
    1abc:	b4 df       	rcall	.-152    	; 0x1a26 <ioport_configure_port_pin>
    1abe:	43 e0       	ldi	r20, 0x03	; 3
    1ac0:	50 e0       	ldi	r21, 0x00	; 0
    1ac2:	60 e4       	ldi	r22, 0x40	; 64
    1ac4:	80 e8       	ldi	r24, 0x80	; 128
    1ac6:	96 e0       	ldi	r25, 0x06	; 6
    1ac8:	ae df       	rcall	.-164    	; 0x1a26 <ioport_configure_port_pin>
    1aca:	43 e0       	ldi	r20, 0x03	; 3
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	60 e8       	ldi	r22, 0x80	; 128
    1ad0:	80 e8       	ldi	r24, 0x80	; 128
    1ad2:	96 e0       	ldi	r25, 0x06	; 6
    1ad4:	a8 df       	rcall	.-176    	; 0x1a26 <ioport_configure_port_pin>
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	58 e1       	ldi	r21, 0x18	; 24
    1ada:	61 e0       	ldi	r22, 0x01	; 1
    1adc:	80 e6       	ldi	r24, 0x60	; 96
    1ade:	96 e0       	ldi	r25, 0x06	; 6
    1ae0:	a2 df       	rcall	.-188    	; 0x1a26 <ioport_configure_port_pin>
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	58 e1       	ldi	r21, 0x18	; 24
    1ae6:	62 e0       	ldi	r22, 0x02	; 2
    1ae8:	80 e6       	ldi	r24, 0x60	; 96
    1aea:	96 e0       	ldi	r25, 0x06	; 6
    1aec:	9c df       	rcall	.-200    	; 0x1a26 <ioport_configure_port_pin>
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	58 e1       	ldi	r21, 0x18	; 24
    1af2:	64 e0       	ldi	r22, 0x04	; 4
    1af4:	80 e6       	ldi	r24, 0x60	; 96
    1af6:	96 e0       	ldi	r25, 0x06	; 6
    1af8:	96 df       	rcall	.-212    	; 0x1a26 <ioport_configure_port_pin>
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	58 e1       	ldi	r21, 0x18	; 24
    1afe:	68 e0       	ldi	r22, 0x08	; 8
    1b00:	80 e6       	ldi	r24, 0x60	; 96
    1b02:	96 e0       	ldi	r25, 0x06	; 6
    1b04:	90 df       	rcall	.-224    	; 0x1a26 <ioport_configure_port_pin>
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	58 e1       	ldi	r21, 0x18	; 24
    1b0a:	60 e1       	ldi	r22, 0x10	; 16
    1b0c:	80 e6       	ldi	r24, 0x60	; 96
    1b0e:	96 e0       	ldi	r25, 0x06	; 6
    1b10:	8a df       	rcall	.-236    	; 0x1a26 <ioport_configure_port_pin>
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	58 e1       	ldi	r21, 0x18	; 24
    1b16:	60 e2       	ldi	r22, 0x20	; 32
    1b18:	80 e6       	ldi	r24, 0x60	; 96
    1b1a:	96 e0       	ldi	r25, 0x06	; 6
    1b1c:	84 df       	rcall	.-248    	; 0x1a26 <ioport_configure_port_pin>
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	58 e1       	ldi	r21, 0x18	; 24
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	80 ee       	ldi	r24, 0xE0	; 224
    1b26:	97 e0       	ldi	r25, 0x07	; 7
    1b28:	7e df       	rcall	.-260    	; 0x1a26 <ioport_configure_port_pin>
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	58 e1       	ldi	r21, 0x18	; 24
    1b2e:	62 e0       	ldi	r22, 0x02	; 2
    1b30:	80 ee       	ldi	r24, 0xE0	; 224
    1b32:	97 e0       	ldi	r25, 0x07	; 7
    1b34:	78 df       	rcall	.-272    	; 0x1a26 <ioport_configure_port_pin>
    1b36:	43 e0       	ldi	r20, 0x03	; 3
    1b38:	50 e0       	ldi	r21, 0x00	; 0
    1b3a:	60 e8       	ldi	r22, 0x80	; 128
    1b3c:	80 e4       	ldi	r24, 0x40	; 64
    1b3e:	96 e0       	ldi	r25, 0x06	; 6
    1b40:	72 df       	rcall	.-284    	; 0x1a26 <ioport_configure_port_pin>
    1b42:	43 e0       	ldi	r20, 0x03	; 3
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	60 e2       	ldi	r22, 0x20	; 32
    1b48:	80 e4       	ldi	r24, 0x40	; 64
    1b4a:	96 e0       	ldi	r25, 0x06	; 6
    1b4c:	6c df       	rcall	.-296    	; 0x1a26 <ioport_configure_port_pin>
    1b4e:	40 e0       	ldi	r20, 0x00	; 0
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	60 e4       	ldi	r22, 0x40	; 64
    1b54:	80 e4       	ldi	r24, 0x40	; 64
    1b56:	96 e0       	ldi	r25, 0x06	; 6
    1b58:	66 df       	rcall	.-308    	; 0x1a26 <ioport_configure_port_pin>
    1b5a:	43 e0       	ldi	r20, 0x03	; 3
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	68 e0       	ldi	r22, 0x08	; 8
    1b60:	80 ec       	ldi	r24, 0xC0	; 192
    1b62:	97 e0       	ldi	r25, 0x07	; 7
    1b64:	60 df       	rcall	.-320    	; 0x1a26 <ioport_configure_port_pin>
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	50 e0       	ldi	r21, 0x00	; 0
    1b6a:	61 e0       	ldi	r22, 0x01	; 1
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	96 e0       	ldi	r25, 0x06	; 6
    1b70:	5a df       	rcall	.-332    	; 0x1a26 <ioport_configure_port_pin>
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	50 e0       	ldi	r21, 0x00	; 0
    1b76:	64 e0       	ldi	r22, 0x04	; 4
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	96 e0       	ldi	r25, 0x06	; 6
    1b7c:	54 df       	rcall	.-344    	; 0x1a26 <ioport_configure_port_pin>
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	62 e0       	ldi	r22, 0x02	; 2
    1b84:	80 e2       	ldi	r24, 0x20	; 32
    1b86:	96 e0       	ldi	r25, 0x06	; 6
    1b88:	4e df       	rcall	.-356    	; 0x1a26 <ioport_configure_port_pin>
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	57 e0       	ldi	r21, 0x07	; 7
    1b8e:	62 e0       	ldi	r22, 0x02	; 2
    1b90:	80 e2       	ldi	r24, 0x20	; 32
    1b92:	96 e0       	ldi	r25, 0x06	; 6
    1b94:	48 df       	rcall	.-368    	; 0x1a26 <ioport_configure_port_pin>
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	57 e0       	ldi	r21, 0x07	; 7
    1b9a:	61 e0       	ldi	r22, 0x01	; 1
    1b9c:	80 e2       	ldi	r24, 0x20	; 32
    1b9e:	96 e0       	ldi	r25, 0x06	; 6
    1ba0:	42 df       	rcall	.-380    	; 0x1a26 <ioport_configure_port_pin>
    1ba2:	41 e0       	ldi	r20, 0x01	; 1
    1ba4:	50 e0       	ldi	r21, 0x00	; 0
    1ba6:	68 e0       	ldi	r22, 0x08	; 8
    1ba8:	80 e2       	ldi	r24, 0x20	; 32
    1baa:	96 e0       	ldi	r25, 0x06	; 6
    1bac:	3c df       	rcall	.-392    	; 0x1a26 <ioport_configure_port_pin>
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	57 e0       	ldi	r21, 0x07	; 7
    1bb2:	64 e0       	ldi	r22, 0x04	; 4
    1bb4:	80 e2       	ldi	r24, 0x20	; 32
    1bb6:	96 e0       	ldi	r25, 0x06	; 6
    1bb8:	36 df       	rcall	.-404    	; 0x1a26 <ioport_configure_port_pin>
    1bba:	43 e0       	ldi	r20, 0x03	; 3
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	68 e0       	ldi	r22, 0x08	; 8
    1bc0:	80 ec       	ldi	r24, 0xC0	; 192
    1bc2:	97 e0       	ldi	r25, 0x07	; 7
    1bc4:	30 df       	rcall	.-416    	; 0x1a26 <ioport_configure_port_pin>
    1bc6:	43 e0       	ldi	r20, 0x03	; 3
    1bc8:	50 e0       	ldi	r21, 0x00	; 0
    1bca:	68 e0       	ldi	r22, 0x08	; 8
    1bcc:	80 e4       	ldi	r24, 0x40	; 64
    1bce:	96 e0       	ldi	r25, 0x06	; 6
    1bd0:	2a df       	rcall	.-428    	; 0x1a26 <ioport_configure_port_pin>
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	64 e0       	ldi	r22, 0x04	; 4
    1bd8:	80 e4       	ldi	r24, 0x40	; 64
    1bda:	96 e0       	ldi	r25, 0x06	; 6
    1bdc:	24 df       	rcall	.-440    	; 0x1a26 <ioport_configure_port_pin>
    1bde:	43 e0       	ldi	r20, 0x03	; 3
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	68 e0       	ldi	r22, 0x08	; 8
    1be4:	80 e6       	ldi	r24, 0x60	; 96
    1be6:	96 e0       	ldi	r25, 0x06	; 6
    1be8:	1e df       	rcall	.-452    	; 0x1a26 <ioport_configure_port_pin>
    1bea:	40 e0       	ldi	r20, 0x00	; 0
    1bec:	50 e0       	ldi	r21, 0x00	; 0
    1bee:	64 e0       	ldi	r22, 0x04	; 4
    1bf0:	80 e6       	ldi	r24, 0x60	; 96
    1bf2:	96 e0       	ldi	r25, 0x06	; 6
    1bf4:	18 cf       	rjmp	.-464    	; 0x1a26 <ioport_configure_port_pin>
    1bf6:	08 95       	ret

00001bf8 <main>:
#define LED_ON PORTE.OUT = 0b00000000;
#define DEBUG_LED

int main (void)
{
	sysclk_init();
    1bf8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <sysclk_init>
	board_init();
    1bfc:	3c df       	rcall	.-392    	; 0x1a76 <board_init>
	
	#ifdef DEBUG_LED
		printf("ASDADA");
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e2       	ldi	r25, 0x20	; 32
    1c02:	9f 93       	push	r25
    1c04:	8f 93       	push	r24
    1c06:	aa d1       	rcall	.+852    	; 0x1f5c <printf>
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
	#endif
	
	while (1)
	{
		ledRotation(256);
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	71 e0       	ldi	r23, 0x01	; 1
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 21 01 	call	0x242	; 0x242 <ledRotation>
	}
    1c18:	f9 cf       	rjmp	.-14     	; 0x1c0c <main+0x14>

00001c1a <__divsf3>:
    1c1a:	0c d0       	rcall	.+24     	; 0x1c34 <__divsf3x>
    1c1c:	05 c1       	rjmp	.+522    	; 0x1e28 <__fp_round>
    1c1e:	fd d0       	rcall	.+506    	; 0x1e1a <__fp_pscB>
    1c20:	40 f0       	brcs	.+16     	; 0x1c32 <__divsf3+0x18>
    1c22:	f4 d0       	rcall	.+488    	; 0x1e0c <__fp_pscA>
    1c24:	30 f0       	brcs	.+12     	; 0x1c32 <__divsf3+0x18>
    1c26:	21 f4       	brne	.+8      	; 0x1c30 <__divsf3+0x16>
    1c28:	5f 3f       	cpi	r21, 0xFF	; 255
    1c2a:	19 f0       	breq	.+6      	; 0x1c32 <__divsf3+0x18>
    1c2c:	d6 c0       	rjmp	.+428    	; 0x1dda <__fp_inf>
    1c2e:	51 11       	cpse	r21, r1
    1c30:	2f c1       	rjmp	.+606    	; 0x1e90 <__fp_szero>
    1c32:	d9 c0       	rjmp	.+434    	; 0x1de6 <__fp_nan>

00001c34 <__divsf3x>:
    1c34:	0a d1       	rcall	.+532    	; 0x1e4a <__fp_split3>
    1c36:	98 f3       	brcs	.-26     	; 0x1c1e <__divsf3+0x4>

00001c38 <__divsf3_pse>:
    1c38:	99 23       	and	r25, r25
    1c3a:	c9 f3       	breq	.-14     	; 0x1c2e <__divsf3+0x14>
    1c3c:	55 23       	and	r21, r21
    1c3e:	b1 f3       	breq	.-20     	; 0x1c2c <__divsf3+0x12>
    1c40:	95 1b       	sub	r25, r21
    1c42:	55 0b       	sbc	r21, r21
    1c44:	bb 27       	eor	r27, r27
    1c46:	aa 27       	eor	r26, r26
    1c48:	62 17       	cp	r22, r18
    1c4a:	73 07       	cpc	r23, r19
    1c4c:	84 07       	cpc	r24, r20
    1c4e:	38 f0       	brcs	.+14     	; 0x1c5e <__divsf3_pse+0x26>
    1c50:	9f 5f       	subi	r25, 0xFF	; 255
    1c52:	5f 4f       	sbci	r21, 0xFF	; 255
    1c54:	22 0f       	add	r18, r18
    1c56:	33 1f       	adc	r19, r19
    1c58:	44 1f       	adc	r20, r20
    1c5a:	aa 1f       	adc	r26, r26
    1c5c:	a9 f3       	breq	.-22     	; 0x1c48 <__divsf3_pse+0x10>
    1c5e:	33 d0       	rcall	.+102    	; 0x1cc6 <__divsf3_pse+0x8e>
    1c60:	0e 2e       	mov	r0, r30
    1c62:	3a f0       	brmi	.+14     	; 0x1c72 <__divsf3_pse+0x3a>
    1c64:	e0 e8       	ldi	r30, 0x80	; 128
    1c66:	30 d0       	rcall	.+96     	; 0x1cc8 <__divsf3_pse+0x90>
    1c68:	91 50       	subi	r25, 0x01	; 1
    1c6a:	50 40       	sbci	r21, 0x00	; 0
    1c6c:	e6 95       	lsr	r30
    1c6e:	00 1c       	adc	r0, r0
    1c70:	ca f7       	brpl	.-14     	; 0x1c64 <__divsf3_pse+0x2c>
    1c72:	29 d0       	rcall	.+82     	; 0x1cc6 <__divsf3_pse+0x8e>
    1c74:	fe 2f       	mov	r31, r30
    1c76:	27 d0       	rcall	.+78     	; 0x1cc6 <__divsf3_pse+0x8e>
    1c78:	66 0f       	add	r22, r22
    1c7a:	77 1f       	adc	r23, r23
    1c7c:	88 1f       	adc	r24, r24
    1c7e:	bb 1f       	adc	r27, r27
    1c80:	26 17       	cp	r18, r22
    1c82:	37 07       	cpc	r19, r23
    1c84:	48 07       	cpc	r20, r24
    1c86:	ab 07       	cpc	r26, r27
    1c88:	b0 e8       	ldi	r27, 0x80	; 128
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <__divsf3_pse+0x56>
    1c8c:	bb 0b       	sbc	r27, r27
    1c8e:	80 2d       	mov	r24, r0
    1c90:	bf 01       	movw	r22, r30
    1c92:	ff 27       	eor	r31, r31
    1c94:	93 58       	subi	r25, 0x83	; 131
    1c96:	5f 4f       	sbci	r21, 0xFF	; 255
    1c98:	2a f0       	brmi	.+10     	; 0x1ca4 <__divsf3_pse+0x6c>
    1c9a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c9c:	51 05       	cpc	r21, r1
    1c9e:	68 f0       	brcs	.+26     	; 0x1cba <__divsf3_pse+0x82>
    1ca0:	9c c0       	rjmp	.+312    	; 0x1dda <__fp_inf>
    1ca2:	f6 c0       	rjmp	.+492    	; 0x1e90 <__fp_szero>
    1ca4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ca6:	ec f3       	brlt	.-6      	; 0x1ca2 <__divsf3_pse+0x6a>
    1ca8:	98 3e       	cpi	r25, 0xE8	; 232
    1caa:	dc f3       	brlt	.-10     	; 0x1ca2 <__divsf3_pse+0x6a>
    1cac:	86 95       	lsr	r24
    1cae:	77 95       	ror	r23
    1cb0:	67 95       	ror	r22
    1cb2:	b7 95       	ror	r27
    1cb4:	f7 95       	ror	r31
    1cb6:	9f 5f       	subi	r25, 0xFF	; 255
    1cb8:	c9 f7       	brne	.-14     	; 0x1cac <__divsf3_pse+0x74>
    1cba:	88 0f       	add	r24, r24
    1cbc:	91 1d       	adc	r25, r1
    1cbe:	96 95       	lsr	r25
    1cc0:	87 95       	ror	r24
    1cc2:	97 f9       	bld	r25, 7
    1cc4:	08 95       	ret
    1cc6:	e1 e0       	ldi	r30, 0x01	; 1
    1cc8:	66 0f       	add	r22, r22
    1cca:	77 1f       	adc	r23, r23
    1ccc:	88 1f       	adc	r24, r24
    1cce:	bb 1f       	adc	r27, r27
    1cd0:	62 17       	cp	r22, r18
    1cd2:	73 07       	cpc	r23, r19
    1cd4:	84 07       	cpc	r24, r20
    1cd6:	ba 07       	cpc	r27, r26
    1cd8:	20 f0       	brcs	.+8      	; 0x1ce2 <__divsf3_pse+0xaa>
    1cda:	62 1b       	sub	r22, r18
    1cdc:	73 0b       	sbc	r23, r19
    1cde:	84 0b       	sbc	r24, r20
    1ce0:	ba 0b       	sbc	r27, r26
    1ce2:	ee 1f       	adc	r30, r30
    1ce4:	88 f7       	brcc	.-30     	; 0x1cc8 <__divsf3_pse+0x90>
    1ce6:	e0 95       	com	r30
    1ce8:	08 95       	ret

00001cea <__fixsfdi>:
    1cea:	be e3       	ldi	r27, 0x3E	; 62
    1cec:	04 d0       	rcall	.+8      	; 0x1cf6 <__fixunssfdi+0x2>
    1cee:	08 f4       	brcc	.+2      	; 0x1cf2 <__fixsfdi+0x8>
    1cf0:	90 e8       	ldi	r25, 0x80	; 128
    1cf2:	08 95       	ret

00001cf4 <__fixunssfdi>:
    1cf4:	bf e3       	ldi	r27, 0x3F	; 63
    1cf6:	22 27       	eor	r18, r18
    1cf8:	33 27       	eor	r19, r19
    1cfa:	a9 01       	movw	r20, r18
    1cfc:	ae d0       	rcall	.+348    	; 0x1e5a <__fp_splitA>
    1cfe:	58 f1       	brcs	.+86     	; 0x1d56 <__fixunssfdi+0x62>
    1d00:	9f 57       	subi	r25, 0x7F	; 127
    1d02:	40 f1       	brcs	.+80     	; 0x1d54 <__fixunssfdi+0x60>
    1d04:	b9 17       	cp	r27, r25
    1d06:	38 f1       	brcs	.+78     	; 0x1d56 <__fixunssfdi+0x62>
    1d08:	bf e3       	ldi	r27, 0x3F	; 63
    1d0a:	b9 1b       	sub	r27, r25
    1d0c:	99 27       	eor	r25, r25
    1d0e:	b8 50       	subi	r27, 0x08	; 8
    1d10:	3a f4       	brpl	.+14     	; 0x1d20 <__fixunssfdi+0x2c>
    1d12:	66 0f       	add	r22, r22
    1d14:	77 1f       	adc	r23, r23
    1d16:	88 1f       	adc	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	b3 95       	inc	r27
    1d1c:	d2 f3       	brmi	.-12     	; 0x1d12 <__fixunssfdi+0x1e>
    1d1e:	16 c0       	rjmp	.+44     	; 0x1d4c <__fixunssfdi+0x58>
    1d20:	b8 50       	subi	r27, 0x08	; 8
    1d22:	4a f0       	brmi	.+18     	; 0x1d36 <__fixunssfdi+0x42>
    1d24:	23 2f       	mov	r18, r19
    1d26:	34 2f       	mov	r19, r20
    1d28:	45 2f       	mov	r20, r21
    1d2a:	56 2f       	mov	r21, r22
    1d2c:	67 2f       	mov	r22, r23
    1d2e:	78 2f       	mov	r23, r24
    1d30:	88 27       	eor	r24, r24
    1d32:	b8 50       	subi	r27, 0x08	; 8
    1d34:	ba f7       	brpl	.-18     	; 0x1d24 <__fixunssfdi+0x30>
    1d36:	b8 5f       	subi	r27, 0xF8	; 248
    1d38:	49 f0       	breq	.+18     	; 0x1d4c <__fixunssfdi+0x58>
    1d3a:	86 95       	lsr	r24
    1d3c:	77 95       	ror	r23
    1d3e:	67 95       	ror	r22
    1d40:	57 95       	ror	r21
    1d42:	47 95       	ror	r20
    1d44:	37 95       	ror	r19
    1d46:	27 95       	ror	r18
    1d48:	ba 95       	dec	r27
    1d4a:	b9 f7       	brne	.-18     	; 0x1d3a <__fixunssfdi+0x46>
    1d4c:	0e f4       	brtc	.+2      	; 0x1d50 <__fixunssfdi+0x5c>
    1d4e:	4e d0       	rcall	.+156    	; 0x1dec <__fp_negdi>
    1d50:	88 94       	clc
    1d52:	08 95       	ret
    1d54:	88 94       	clc
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	08 95       	ret

00001d5e <__floatundisf>:
    1d5e:	e8 94       	clt

00001d60 <__fp_di2sf>:
    1d60:	f9 2f       	mov	r31, r25
    1d62:	96 eb       	ldi	r25, 0xB6	; 182
    1d64:	ff 23       	and	r31, r31
    1d66:	81 f0       	breq	.+32     	; 0x1d88 <__fp_di2sf+0x28>
    1d68:	12 16       	cp	r1, r18
    1d6a:	13 06       	cpc	r1, r19
    1d6c:	14 06       	cpc	r1, r20
    1d6e:	44 0b       	sbc	r20, r20
    1d70:	93 95       	inc	r25
    1d72:	f6 95       	lsr	r31
    1d74:	87 95       	ror	r24
    1d76:	77 95       	ror	r23
    1d78:	67 95       	ror	r22
    1d7a:	57 95       	ror	r21
    1d7c:	40 40       	sbci	r20, 0x00	; 0
    1d7e:	ff 23       	and	r31, r31
    1d80:	b9 f7       	brne	.-18     	; 0x1d70 <__fp_di2sf+0x10>
    1d82:	1b c0       	rjmp	.+54     	; 0x1dba <__fp_di2sf+0x5a>
    1d84:	99 27       	eor	r25, r25
    1d86:	08 95       	ret
    1d88:	88 23       	and	r24, r24
    1d8a:	51 f4       	brne	.+20     	; 0x1da0 <__fp_di2sf+0x40>
    1d8c:	98 50       	subi	r25, 0x08	; 8
    1d8e:	d2 f7       	brpl	.-12     	; 0x1d84 <__fp_di2sf+0x24>
    1d90:	87 2b       	or	r24, r23
    1d92:	76 2f       	mov	r23, r22
    1d94:	65 2f       	mov	r22, r21
    1d96:	54 2f       	mov	r21, r20
    1d98:	43 2f       	mov	r20, r19
    1d9a:	32 2f       	mov	r19, r18
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	b1 f3       	breq	.-20     	; 0x1d8c <__fp_di2sf+0x2c>
    1da0:	12 16       	cp	r1, r18
    1da2:	13 06       	cpc	r1, r19
    1da4:	14 06       	cpc	r1, r20
    1da6:	44 0b       	sbc	r20, r20
    1da8:	88 23       	and	r24, r24
    1daa:	3a f0       	brmi	.+14     	; 0x1dba <__fp_di2sf+0x5a>
    1dac:	9a 95       	dec	r25
    1dae:	44 0f       	add	r20, r20
    1db0:	55 1f       	adc	r21, r21
    1db2:	66 1f       	adc	r22, r22
    1db4:	77 1f       	adc	r23, r23
    1db6:	88 1f       	adc	r24, r24
    1db8:	ca f7       	brpl	.-14     	; 0x1dac <__fp_di2sf+0x4c>
    1dba:	55 23       	and	r21, r21
    1dbc:	4a f4       	brpl	.+18     	; 0x1dd0 <__fp_di2sf+0x70>
    1dbe:	44 0f       	add	r20, r20
    1dc0:	55 1f       	adc	r21, r21
    1dc2:	11 f4       	brne	.+4      	; 0x1dc8 <__fp_di2sf+0x68>
    1dc4:	60 ff       	sbrs	r22, 0
    1dc6:	04 c0       	rjmp	.+8      	; 0x1dd0 <__fp_di2sf+0x70>
    1dc8:	6f 5f       	subi	r22, 0xFF	; 255
    1dca:	7f 4f       	sbci	r23, 0xFF	; 255
    1dcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1dce:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd0:	88 0f       	add	r24, r24
    1dd2:	96 95       	lsr	r25
    1dd4:	87 95       	ror	r24
    1dd6:	97 f9       	bld	r25, 7
    1dd8:	08 95       	ret

00001dda <__fp_inf>:
    1dda:	97 f9       	bld	r25, 7
    1ddc:	9f 67       	ori	r25, 0x7F	; 127
    1dde:	80 e8       	ldi	r24, 0x80	; 128
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	08 95       	ret

00001de6 <__fp_nan>:
    1de6:	9f ef       	ldi	r25, 0xFF	; 255
    1de8:	80 ec       	ldi	r24, 0xC0	; 192
    1dea:	08 95       	ret

00001dec <__fp_negdi>:
    1dec:	90 95       	com	r25
    1dee:	80 95       	com	r24
    1df0:	70 95       	com	r23
    1df2:	60 95       	com	r22
    1df4:	50 95       	com	r21
    1df6:	40 95       	com	r20
    1df8:	30 95       	com	r19
    1dfa:	21 95       	neg	r18
    1dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfe:	4f 4f       	sbci	r20, 0xFF	; 255
    1e00:	5f 4f       	sbci	r21, 0xFF	; 255
    1e02:	6f 4f       	sbci	r22, 0xFF	; 255
    1e04:	7f 4f       	sbci	r23, 0xFF	; 255
    1e06:	8f 4f       	sbci	r24, 0xFF	; 255
    1e08:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0a:	08 95       	ret

00001e0c <__fp_pscA>:
    1e0c:	00 24       	eor	r0, r0
    1e0e:	0a 94       	dec	r0
    1e10:	16 16       	cp	r1, r22
    1e12:	17 06       	cpc	r1, r23
    1e14:	18 06       	cpc	r1, r24
    1e16:	09 06       	cpc	r0, r25
    1e18:	08 95       	ret

00001e1a <__fp_pscB>:
    1e1a:	00 24       	eor	r0, r0
    1e1c:	0a 94       	dec	r0
    1e1e:	12 16       	cp	r1, r18
    1e20:	13 06       	cpc	r1, r19
    1e22:	14 06       	cpc	r1, r20
    1e24:	05 06       	cpc	r0, r21
    1e26:	08 95       	ret

00001e28 <__fp_round>:
    1e28:	09 2e       	mov	r0, r25
    1e2a:	03 94       	inc	r0
    1e2c:	00 0c       	add	r0, r0
    1e2e:	11 f4       	brne	.+4      	; 0x1e34 <__fp_round+0xc>
    1e30:	88 23       	and	r24, r24
    1e32:	52 f0       	brmi	.+20     	; 0x1e48 <__fp_round+0x20>
    1e34:	bb 0f       	add	r27, r27
    1e36:	40 f4       	brcc	.+16     	; 0x1e48 <__fp_round+0x20>
    1e38:	bf 2b       	or	r27, r31
    1e3a:	11 f4       	brne	.+4      	; 0x1e40 <__fp_round+0x18>
    1e3c:	60 ff       	sbrs	r22, 0
    1e3e:	04 c0       	rjmp	.+8      	; 0x1e48 <__fp_round+0x20>
    1e40:	6f 5f       	subi	r22, 0xFF	; 255
    1e42:	7f 4f       	sbci	r23, 0xFF	; 255
    1e44:	8f 4f       	sbci	r24, 0xFF	; 255
    1e46:	9f 4f       	sbci	r25, 0xFF	; 255
    1e48:	08 95       	ret

00001e4a <__fp_split3>:
    1e4a:	57 fd       	sbrc	r21, 7
    1e4c:	90 58       	subi	r25, 0x80	; 128
    1e4e:	44 0f       	add	r20, r20
    1e50:	55 1f       	adc	r21, r21
    1e52:	59 f0       	breq	.+22     	; 0x1e6a <__fp_splitA+0x10>
    1e54:	5f 3f       	cpi	r21, 0xFF	; 255
    1e56:	71 f0       	breq	.+28     	; 0x1e74 <__fp_splitA+0x1a>
    1e58:	47 95       	ror	r20

00001e5a <__fp_splitA>:
    1e5a:	88 0f       	add	r24, r24
    1e5c:	97 fb       	bst	r25, 7
    1e5e:	99 1f       	adc	r25, r25
    1e60:	61 f0       	breq	.+24     	; 0x1e7a <__fp_splitA+0x20>
    1e62:	9f 3f       	cpi	r25, 0xFF	; 255
    1e64:	79 f0       	breq	.+30     	; 0x1e84 <__fp_splitA+0x2a>
    1e66:	87 95       	ror	r24
    1e68:	08 95       	ret
    1e6a:	12 16       	cp	r1, r18
    1e6c:	13 06       	cpc	r1, r19
    1e6e:	14 06       	cpc	r1, r20
    1e70:	55 1f       	adc	r21, r21
    1e72:	f2 cf       	rjmp	.-28     	; 0x1e58 <__fp_split3+0xe>
    1e74:	46 95       	lsr	r20
    1e76:	f1 df       	rcall	.-30     	; 0x1e5a <__fp_splitA>
    1e78:	08 c0       	rjmp	.+16     	; 0x1e8a <__fp_splitA+0x30>
    1e7a:	16 16       	cp	r1, r22
    1e7c:	17 06       	cpc	r1, r23
    1e7e:	18 06       	cpc	r1, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	f1 cf       	rjmp	.-30     	; 0x1e66 <__fp_splitA+0xc>
    1e84:	86 95       	lsr	r24
    1e86:	71 05       	cpc	r23, r1
    1e88:	61 05       	cpc	r22, r1
    1e8a:	08 94       	sec
    1e8c:	08 95       	ret

00001e8e <__fp_zero>:
    1e8e:	e8 94       	clt

00001e90 <__fp_szero>:
    1e90:	bb 27       	eor	r27, r27
    1e92:	66 27       	eor	r22, r22
    1e94:	77 27       	eor	r23, r23
    1e96:	cb 01       	movw	r24, r22
    1e98:	97 f9       	bld	r25, 7
    1e9a:	08 95       	ret

00001e9c <__muldi3>:
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	1f 93       	push	r17
    1ea2:	0f 93       	push	r16
    1ea4:	9a 9d       	mul	r25, r10
    1ea6:	f0 2d       	mov	r31, r0
    1ea8:	21 9f       	mul	r18, r17
    1eaa:	f0 0d       	add	r31, r0
    1eac:	8b 9d       	mul	r24, r11
    1eae:	f0 0d       	add	r31, r0
    1eb0:	8a 9d       	mul	r24, r10
    1eb2:	e0 2d       	mov	r30, r0
    1eb4:	f1 0d       	add	r31, r1
    1eb6:	03 9f       	mul	r16, r19
    1eb8:	f0 0d       	add	r31, r0
    1eba:	02 9f       	mul	r16, r18
    1ebc:	e0 0d       	add	r30, r0
    1ebe:	f1 1d       	adc	r31, r1
    1ec0:	4e 9d       	mul	r20, r14
    1ec2:	e0 0d       	add	r30, r0
    1ec4:	f1 1d       	adc	r31, r1
    1ec6:	5e 9d       	mul	r21, r14
    1ec8:	f0 0d       	add	r31, r0
    1eca:	4f 9d       	mul	r20, r15
    1ecc:	f0 0d       	add	r31, r0
    1ece:	7f 93       	push	r23
    1ed0:	6f 93       	push	r22
    1ed2:	bf 92       	push	r11
    1ed4:	af 92       	push	r10
    1ed6:	5f 93       	push	r21
    1ed8:	4f 93       	push	r20
    1eda:	d5 01       	movw	r26, r10
    1edc:	30 d0       	rcall	.+96     	; 0x1f3e <__umulhisi3>
    1ede:	8b 01       	movw	r16, r22
    1ee0:	ac 01       	movw	r20, r24
    1ee2:	d7 01       	movw	r26, r14
    1ee4:	2c d0       	rcall	.+88     	; 0x1f3e <__umulhisi3>
    1ee6:	eb 01       	movw	r28, r22
    1ee8:	e8 0f       	add	r30, r24
    1eea:	f9 1f       	adc	r31, r25
    1eec:	d6 01       	movw	r26, r12
    1eee:	1f d0       	rcall	.+62     	; 0x1f2e <__muldi3_6>
    1ef0:	2f 91       	pop	r18
    1ef2:	3f 91       	pop	r19
    1ef4:	d6 01       	movw	r26, r12
    1ef6:	23 d0       	rcall	.+70     	; 0x1f3e <__umulhisi3>
    1ef8:	c6 0f       	add	r28, r22
    1efa:	d7 1f       	adc	r29, r23
    1efc:	e8 1f       	adc	r30, r24
    1efe:	f9 1f       	adc	r31, r25
    1f00:	af 91       	pop	r26
    1f02:	bf 91       	pop	r27
    1f04:	14 d0       	rcall	.+40     	; 0x1f2e <__muldi3_6>
    1f06:	2f 91       	pop	r18
    1f08:	3f 91       	pop	r19
    1f0a:	19 d0       	rcall	.+50     	; 0x1f3e <__umulhisi3>
    1f0c:	c6 0f       	add	r28, r22
    1f0e:	d7 1f       	adc	r29, r23
    1f10:	e8 1f       	adc	r30, r24
    1f12:	f9 1f       	adc	r31, r25
    1f14:	d6 01       	movw	r26, r12
    1f16:	13 d0       	rcall	.+38     	; 0x1f3e <__umulhisi3>
    1f18:	e6 0f       	add	r30, r22
    1f1a:	f7 1f       	adc	r31, r23
    1f1c:	98 01       	movw	r18, r16
    1f1e:	be 01       	movw	r22, r28
    1f20:	cf 01       	movw	r24, r30
    1f22:	11 24       	eor	r1, r1
    1f24:	0f 91       	pop	r16
    1f26:	1f 91       	pop	r17
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <__muldi3_6>:
    1f2e:	07 d0       	rcall	.+14     	; 0x1f3e <__umulhisi3>
    1f30:	46 0f       	add	r20, r22
    1f32:	57 1f       	adc	r21, r23
    1f34:	c8 1f       	adc	r28, r24
    1f36:	d9 1f       	adc	r29, r25
    1f38:	08 f4       	brcc	.+2      	; 0x1f3c <__muldi3_6+0xe>
    1f3a:	31 96       	adiw	r30, 0x01	; 1
    1f3c:	08 95       	ret

00001f3e <__umulhisi3>:
    1f3e:	a2 9f       	mul	r26, r18
    1f40:	b0 01       	movw	r22, r0
    1f42:	b3 9f       	mul	r27, r19
    1f44:	c0 01       	movw	r24, r0
    1f46:	a3 9f       	mul	r26, r19
    1f48:	70 0d       	add	r23, r0
    1f4a:	81 1d       	adc	r24, r1
    1f4c:	11 24       	eor	r1, r1
    1f4e:	91 1d       	adc	r25, r1
    1f50:	b2 9f       	mul	r27, r18
    1f52:	70 0d       	add	r23, r0
    1f54:	81 1d       	adc	r24, r1
    1f56:	11 24       	eor	r1, r1
    1f58:	91 1d       	adc	r25, r1
    1f5a:	08 95       	ret

00001f5c <printf>:
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	ae 01       	movw	r20, r28
    1f66:	4a 5f       	subi	r20, 0xFA	; 250
    1f68:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6a:	fa 01       	movw	r30, r20
    1f6c:	61 91       	ld	r22, Z+
    1f6e:	71 91       	ld	r23, Z+
    1f70:	af 01       	movw	r20, r30
    1f72:	80 91 66 20 	lds	r24, 0x2066
    1f76:	90 91 67 20 	lds	r25, 0x2067
    1f7a:	03 d0       	rcall	.+6      	; 0x1f82 <vfprintf>
    1f7c:	df 91       	pop	r29
    1f7e:	cf 91       	pop	r28
    1f80:	08 95       	ret

00001f82 <vfprintf>:
    1f82:	2f 92       	push	r2
    1f84:	3f 92       	push	r3
    1f86:	4f 92       	push	r4
    1f88:	5f 92       	push	r5
    1f8a:	6f 92       	push	r6
    1f8c:	7f 92       	push	r7
    1f8e:	8f 92       	push	r8
    1f90:	9f 92       	push	r9
    1f92:	af 92       	push	r10
    1f94:	bf 92       	push	r11
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	2c 97       	sbiw	r28, 0x0c	; 12
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	7c 01       	movw	r14, r24
    1fb2:	6b 01       	movw	r12, r22
    1fb4:	8a 01       	movw	r16, r20
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	16 82       	std	Z+6, r1	; 0x06
    1fba:	17 82       	std	Z+7, r1	; 0x07
    1fbc:	83 81       	ldd	r24, Z+3	; 0x03
    1fbe:	81 ff       	sbrs	r24, 1
    1fc0:	b0 c1       	rjmp	.+864    	; 0x2322 <vfprintf+0x3a0>
    1fc2:	ce 01       	movw	r24, r28
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	4c 01       	movw	r8, r24
    1fc8:	f7 01       	movw	r30, r14
    1fca:	93 81       	ldd	r25, Z+3	; 0x03
    1fcc:	f6 01       	movw	r30, r12
    1fce:	93 fd       	sbrc	r25, 3
    1fd0:	85 91       	lpm	r24, Z+
    1fd2:	93 ff       	sbrs	r25, 3
    1fd4:	81 91       	ld	r24, Z+
    1fd6:	6f 01       	movw	r12, r30
    1fd8:	88 23       	and	r24, r24
    1fda:	09 f4       	brne	.+2      	; 0x1fde <vfprintf+0x5c>
    1fdc:	9e c1       	rjmp	.+828    	; 0x231a <vfprintf+0x398>
    1fde:	85 32       	cpi	r24, 0x25	; 37
    1fe0:	39 f4       	brne	.+14     	; 0x1ff0 <vfprintf+0x6e>
    1fe2:	93 fd       	sbrc	r25, 3
    1fe4:	85 91       	lpm	r24, Z+
    1fe6:	93 ff       	sbrs	r25, 3
    1fe8:	81 91       	ld	r24, Z+
    1fea:	6f 01       	movw	r12, r30
    1fec:	85 32       	cpi	r24, 0x25	; 37
    1fee:	21 f4       	brne	.+8      	; 0x1ff8 <vfprintf+0x76>
    1ff0:	b7 01       	movw	r22, r14
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	c4 d1       	rcall	.+904    	; 0x237e <fputc>
    1ff6:	e8 cf       	rjmp	.-48     	; 0x1fc8 <vfprintf+0x46>
    1ff8:	51 2c       	mov	r5, r1
    1ffa:	31 2c       	mov	r3, r1
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	20 32       	cpi	r18, 0x20	; 32
    2000:	a0 f4       	brcc	.+40     	; 0x202a <vfprintf+0xa8>
    2002:	8b 32       	cpi	r24, 0x2B	; 43
    2004:	69 f0       	breq	.+26     	; 0x2020 <vfprintf+0x9e>
    2006:	30 f4       	brcc	.+12     	; 0x2014 <vfprintf+0x92>
    2008:	80 32       	cpi	r24, 0x20	; 32
    200a:	59 f0       	breq	.+22     	; 0x2022 <vfprintf+0xa0>
    200c:	83 32       	cpi	r24, 0x23	; 35
    200e:	69 f4       	brne	.+26     	; 0x202a <vfprintf+0xa8>
    2010:	20 61       	ori	r18, 0x10	; 16
    2012:	2c c0       	rjmp	.+88     	; 0x206c <vfprintf+0xea>
    2014:	8d 32       	cpi	r24, 0x2D	; 45
    2016:	39 f0       	breq	.+14     	; 0x2026 <vfprintf+0xa4>
    2018:	80 33       	cpi	r24, 0x30	; 48
    201a:	39 f4       	brne	.+14     	; 0x202a <vfprintf+0xa8>
    201c:	21 60       	ori	r18, 0x01	; 1
    201e:	26 c0       	rjmp	.+76     	; 0x206c <vfprintf+0xea>
    2020:	22 60       	ori	r18, 0x02	; 2
    2022:	24 60       	ori	r18, 0x04	; 4
    2024:	23 c0       	rjmp	.+70     	; 0x206c <vfprintf+0xea>
    2026:	28 60       	ori	r18, 0x08	; 8
    2028:	21 c0       	rjmp	.+66     	; 0x206c <vfprintf+0xea>
    202a:	27 fd       	sbrc	r18, 7
    202c:	27 c0       	rjmp	.+78     	; 0x207c <vfprintf+0xfa>
    202e:	30 ed       	ldi	r19, 0xD0	; 208
    2030:	38 0f       	add	r19, r24
    2032:	3a 30       	cpi	r19, 0x0A	; 10
    2034:	78 f4       	brcc	.+30     	; 0x2054 <vfprintf+0xd2>
    2036:	26 ff       	sbrs	r18, 6
    2038:	06 c0       	rjmp	.+12     	; 0x2046 <vfprintf+0xc4>
    203a:	fa e0       	ldi	r31, 0x0A	; 10
    203c:	5f 9e       	mul	r5, r31
    203e:	30 0d       	add	r19, r0
    2040:	11 24       	eor	r1, r1
    2042:	53 2e       	mov	r5, r19
    2044:	13 c0       	rjmp	.+38     	; 0x206c <vfprintf+0xea>
    2046:	8a e0       	ldi	r24, 0x0A	; 10
    2048:	38 9e       	mul	r3, r24
    204a:	30 0d       	add	r19, r0
    204c:	11 24       	eor	r1, r1
    204e:	33 2e       	mov	r3, r19
    2050:	20 62       	ori	r18, 0x20	; 32
    2052:	0c c0       	rjmp	.+24     	; 0x206c <vfprintf+0xea>
    2054:	8e 32       	cpi	r24, 0x2E	; 46
    2056:	21 f4       	brne	.+8      	; 0x2060 <vfprintf+0xde>
    2058:	26 fd       	sbrc	r18, 6
    205a:	5f c1       	rjmp	.+702    	; 0x231a <vfprintf+0x398>
    205c:	20 64       	ori	r18, 0x40	; 64
    205e:	06 c0       	rjmp	.+12     	; 0x206c <vfprintf+0xea>
    2060:	8c 36       	cpi	r24, 0x6C	; 108
    2062:	11 f4       	brne	.+4      	; 0x2068 <vfprintf+0xe6>
    2064:	20 68       	ori	r18, 0x80	; 128
    2066:	02 c0       	rjmp	.+4      	; 0x206c <vfprintf+0xea>
    2068:	88 36       	cpi	r24, 0x68	; 104
    206a:	41 f4       	brne	.+16     	; 0x207c <vfprintf+0xfa>
    206c:	f6 01       	movw	r30, r12
    206e:	93 fd       	sbrc	r25, 3
    2070:	85 91       	lpm	r24, Z+
    2072:	93 ff       	sbrs	r25, 3
    2074:	81 91       	ld	r24, Z+
    2076:	6f 01       	movw	r12, r30
    2078:	81 11       	cpse	r24, r1
    207a:	c1 cf       	rjmp	.-126    	; 0x1ffe <vfprintf+0x7c>
    207c:	98 2f       	mov	r25, r24
    207e:	9f 7d       	andi	r25, 0xDF	; 223
    2080:	95 54       	subi	r25, 0x45	; 69
    2082:	93 30       	cpi	r25, 0x03	; 3
    2084:	28 f4       	brcc	.+10     	; 0x2090 <vfprintf+0x10e>
    2086:	0c 5f       	subi	r16, 0xFC	; 252
    2088:	1f 4f       	sbci	r17, 0xFF	; 255
    208a:	ff e3       	ldi	r31, 0x3F	; 63
    208c:	f9 83       	std	Y+1, r31	; 0x01
    208e:	0d c0       	rjmp	.+26     	; 0x20aa <vfprintf+0x128>
    2090:	83 36       	cpi	r24, 0x63	; 99
    2092:	31 f0       	breq	.+12     	; 0x20a0 <vfprintf+0x11e>
    2094:	83 37       	cpi	r24, 0x73	; 115
    2096:	71 f0       	breq	.+28     	; 0x20b4 <vfprintf+0x132>
    2098:	83 35       	cpi	r24, 0x53	; 83
    209a:	09 f0       	breq	.+2      	; 0x209e <vfprintf+0x11c>
    209c:	57 c0       	rjmp	.+174    	; 0x214c <vfprintf+0x1ca>
    209e:	21 c0       	rjmp	.+66     	; 0x20e2 <vfprintf+0x160>
    20a0:	f8 01       	movw	r30, r16
    20a2:	80 81       	ld	r24, Z
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	0e 5f       	subi	r16, 0xFE	; 254
    20a8:	1f 4f       	sbci	r17, 0xFF	; 255
    20aa:	44 24       	eor	r4, r4
    20ac:	43 94       	inc	r4
    20ae:	51 2c       	mov	r5, r1
    20b0:	54 01       	movw	r10, r8
    20b2:	14 c0       	rjmp	.+40     	; 0x20dc <vfprintf+0x15a>
    20b4:	38 01       	movw	r6, r16
    20b6:	f2 e0       	ldi	r31, 0x02	; 2
    20b8:	6f 0e       	add	r6, r31
    20ba:	71 1c       	adc	r7, r1
    20bc:	f8 01       	movw	r30, r16
    20be:	a0 80       	ld	r10, Z
    20c0:	b1 80       	ldd	r11, Z+1	; 0x01
    20c2:	26 ff       	sbrs	r18, 6
    20c4:	03 c0       	rjmp	.+6      	; 0x20cc <vfprintf+0x14a>
    20c6:	65 2d       	mov	r22, r5
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <vfprintf+0x14e>
    20cc:	6f ef       	ldi	r22, 0xFF	; 255
    20ce:	7f ef       	ldi	r23, 0xFF	; 255
    20d0:	c5 01       	movw	r24, r10
    20d2:	2c 87       	std	Y+12, r18	; 0x0c
    20d4:	49 d1       	rcall	.+658    	; 0x2368 <strnlen>
    20d6:	2c 01       	movw	r4, r24
    20d8:	83 01       	movw	r16, r6
    20da:	2c 85       	ldd	r18, Y+12	; 0x0c
    20dc:	2f 77       	andi	r18, 0x7F	; 127
    20de:	22 2e       	mov	r2, r18
    20e0:	16 c0       	rjmp	.+44     	; 0x210e <vfprintf+0x18c>
    20e2:	38 01       	movw	r6, r16
    20e4:	f2 e0       	ldi	r31, 0x02	; 2
    20e6:	6f 0e       	add	r6, r31
    20e8:	71 1c       	adc	r7, r1
    20ea:	f8 01       	movw	r30, r16
    20ec:	a0 80       	ld	r10, Z
    20ee:	b1 80       	ldd	r11, Z+1	; 0x01
    20f0:	26 ff       	sbrs	r18, 6
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <vfprintf+0x178>
    20f4:	65 2d       	mov	r22, r5
    20f6:	70 e0       	ldi	r23, 0x00	; 0
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <vfprintf+0x17c>
    20fa:	6f ef       	ldi	r22, 0xFF	; 255
    20fc:	7f ef       	ldi	r23, 0xFF	; 255
    20fe:	c5 01       	movw	r24, r10
    2100:	2c 87       	std	Y+12, r18	; 0x0c
    2102:	27 d1       	rcall	.+590    	; 0x2352 <strnlen_P>
    2104:	2c 01       	movw	r4, r24
    2106:	2c 85       	ldd	r18, Y+12	; 0x0c
    2108:	20 68       	ori	r18, 0x80	; 128
    210a:	22 2e       	mov	r2, r18
    210c:	83 01       	movw	r16, r6
    210e:	23 fc       	sbrc	r2, 3
    2110:	19 c0       	rjmp	.+50     	; 0x2144 <vfprintf+0x1c2>
    2112:	83 2d       	mov	r24, r3
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	48 16       	cp	r4, r24
    2118:	59 06       	cpc	r5, r25
    211a:	a0 f4       	brcc	.+40     	; 0x2144 <vfprintf+0x1c2>
    211c:	b7 01       	movw	r22, r14
    211e:	80 e2       	ldi	r24, 0x20	; 32
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	2d d1       	rcall	.+602    	; 0x237e <fputc>
    2124:	3a 94       	dec	r3
    2126:	f5 cf       	rjmp	.-22     	; 0x2112 <vfprintf+0x190>
    2128:	f5 01       	movw	r30, r10
    212a:	27 fc       	sbrc	r2, 7
    212c:	85 91       	lpm	r24, Z+
    212e:	27 fe       	sbrs	r2, 7
    2130:	81 91       	ld	r24, Z+
    2132:	5f 01       	movw	r10, r30
    2134:	b7 01       	movw	r22, r14
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	22 d1       	rcall	.+580    	; 0x237e <fputc>
    213a:	31 10       	cpse	r3, r1
    213c:	3a 94       	dec	r3
    213e:	f1 e0       	ldi	r31, 0x01	; 1
    2140:	4f 1a       	sub	r4, r31
    2142:	51 08       	sbc	r5, r1
    2144:	41 14       	cp	r4, r1
    2146:	51 04       	cpc	r5, r1
    2148:	79 f7       	brne	.-34     	; 0x2128 <vfprintf+0x1a6>
    214a:	de c0       	rjmp	.+444    	; 0x2308 <vfprintf+0x386>
    214c:	84 36       	cpi	r24, 0x64	; 100
    214e:	11 f0       	breq	.+4      	; 0x2154 <vfprintf+0x1d2>
    2150:	89 36       	cpi	r24, 0x69	; 105
    2152:	31 f5       	brne	.+76     	; 0x21a0 <vfprintf+0x21e>
    2154:	f8 01       	movw	r30, r16
    2156:	27 ff       	sbrs	r18, 7
    2158:	07 c0       	rjmp	.+14     	; 0x2168 <vfprintf+0x1e6>
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	0c 5f       	subi	r16, 0xFC	; 252
    2164:	1f 4f       	sbci	r17, 0xFF	; 255
    2166:	08 c0       	rjmp	.+16     	; 0x2178 <vfprintf+0x1f6>
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	07 2e       	mov	r0, r23
    216e:	00 0c       	add	r0, r0
    2170:	88 0b       	sbc	r24, r24
    2172:	99 0b       	sbc	r25, r25
    2174:	0e 5f       	subi	r16, 0xFE	; 254
    2176:	1f 4f       	sbci	r17, 0xFF	; 255
    2178:	2f 76       	andi	r18, 0x6F	; 111
    217a:	72 2e       	mov	r7, r18
    217c:	97 ff       	sbrs	r25, 7
    217e:	09 c0       	rjmp	.+18     	; 0x2192 <vfprintf+0x210>
    2180:	90 95       	com	r25
    2182:	80 95       	com	r24
    2184:	70 95       	com	r23
    2186:	61 95       	neg	r22
    2188:	7f 4f       	sbci	r23, 0xFF	; 255
    218a:	8f 4f       	sbci	r24, 0xFF	; 255
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	20 68       	ori	r18, 0x80	; 128
    2190:	72 2e       	mov	r7, r18
    2192:	2a e0       	ldi	r18, 0x0A	; 10
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	a4 01       	movw	r20, r8
    2198:	2a d1       	rcall	.+596    	; 0x23ee <__ultoa_invert>
    219a:	a8 2e       	mov	r10, r24
    219c:	a8 18       	sub	r10, r8
    219e:	43 c0       	rjmp	.+134    	; 0x2226 <vfprintf+0x2a4>
    21a0:	85 37       	cpi	r24, 0x75	; 117
    21a2:	29 f4       	brne	.+10     	; 0x21ae <vfprintf+0x22c>
    21a4:	2f 7e       	andi	r18, 0xEF	; 239
    21a6:	b2 2e       	mov	r11, r18
    21a8:	2a e0       	ldi	r18, 0x0A	; 10
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	25 c0       	rjmp	.+74     	; 0x21f8 <vfprintf+0x276>
    21ae:	f2 2f       	mov	r31, r18
    21b0:	f9 7f       	andi	r31, 0xF9	; 249
    21b2:	bf 2e       	mov	r11, r31
    21b4:	8f 36       	cpi	r24, 0x6F	; 111
    21b6:	c1 f0       	breq	.+48     	; 0x21e8 <vfprintf+0x266>
    21b8:	18 f4       	brcc	.+6      	; 0x21c0 <vfprintf+0x23e>
    21ba:	88 35       	cpi	r24, 0x58	; 88
    21bc:	79 f0       	breq	.+30     	; 0x21dc <vfprintf+0x25a>
    21be:	ad c0       	rjmp	.+346    	; 0x231a <vfprintf+0x398>
    21c0:	80 37       	cpi	r24, 0x70	; 112
    21c2:	19 f0       	breq	.+6      	; 0x21ca <vfprintf+0x248>
    21c4:	88 37       	cpi	r24, 0x78	; 120
    21c6:	21 f0       	breq	.+8      	; 0x21d0 <vfprintf+0x24e>
    21c8:	a8 c0       	rjmp	.+336    	; 0x231a <vfprintf+0x398>
    21ca:	2f 2f       	mov	r18, r31
    21cc:	20 61       	ori	r18, 0x10	; 16
    21ce:	b2 2e       	mov	r11, r18
    21d0:	b4 fe       	sbrs	r11, 4
    21d2:	0d c0       	rjmp	.+26     	; 0x21ee <vfprintf+0x26c>
    21d4:	8b 2d       	mov	r24, r11
    21d6:	84 60       	ori	r24, 0x04	; 4
    21d8:	b8 2e       	mov	r11, r24
    21da:	09 c0       	rjmp	.+18     	; 0x21ee <vfprintf+0x26c>
    21dc:	24 ff       	sbrs	r18, 4
    21de:	0a c0       	rjmp	.+20     	; 0x21f4 <vfprintf+0x272>
    21e0:	9f 2f       	mov	r25, r31
    21e2:	96 60       	ori	r25, 0x06	; 6
    21e4:	b9 2e       	mov	r11, r25
    21e6:	06 c0       	rjmp	.+12     	; 0x21f4 <vfprintf+0x272>
    21e8:	28 e0       	ldi	r18, 0x08	; 8
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	05 c0       	rjmp	.+10     	; 0x21f8 <vfprintf+0x276>
    21ee:	20 e1       	ldi	r18, 0x10	; 16
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <vfprintf+0x276>
    21f4:	20 e1       	ldi	r18, 0x10	; 16
    21f6:	32 e0       	ldi	r19, 0x02	; 2
    21f8:	f8 01       	movw	r30, r16
    21fa:	b7 fe       	sbrs	r11, 7
    21fc:	07 c0       	rjmp	.+14     	; 0x220c <vfprintf+0x28a>
    21fe:	60 81       	ld	r22, Z
    2200:	71 81       	ldd	r23, Z+1	; 0x01
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	0c 5f       	subi	r16, 0xFC	; 252
    2208:	1f 4f       	sbci	r17, 0xFF	; 255
    220a:	06 c0       	rjmp	.+12     	; 0x2218 <vfprintf+0x296>
    220c:	60 81       	ld	r22, Z
    220e:	71 81       	ldd	r23, Z+1	; 0x01
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	0e 5f       	subi	r16, 0xFE	; 254
    2216:	1f 4f       	sbci	r17, 0xFF	; 255
    2218:	a4 01       	movw	r20, r8
    221a:	e9 d0       	rcall	.+466    	; 0x23ee <__ultoa_invert>
    221c:	a8 2e       	mov	r10, r24
    221e:	a8 18       	sub	r10, r8
    2220:	fb 2d       	mov	r31, r11
    2222:	ff 77       	andi	r31, 0x7F	; 127
    2224:	7f 2e       	mov	r7, r31
    2226:	76 fe       	sbrs	r7, 6
    2228:	0b c0       	rjmp	.+22     	; 0x2240 <vfprintf+0x2be>
    222a:	37 2d       	mov	r19, r7
    222c:	3e 7f       	andi	r19, 0xFE	; 254
    222e:	a5 14       	cp	r10, r5
    2230:	50 f4       	brcc	.+20     	; 0x2246 <vfprintf+0x2c4>
    2232:	74 fe       	sbrs	r7, 4
    2234:	0a c0       	rjmp	.+20     	; 0x224a <vfprintf+0x2c8>
    2236:	72 fc       	sbrc	r7, 2
    2238:	08 c0       	rjmp	.+16     	; 0x224a <vfprintf+0x2c8>
    223a:	37 2d       	mov	r19, r7
    223c:	3e 7e       	andi	r19, 0xEE	; 238
    223e:	05 c0       	rjmp	.+10     	; 0x224a <vfprintf+0x2c8>
    2240:	ba 2c       	mov	r11, r10
    2242:	37 2d       	mov	r19, r7
    2244:	03 c0       	rjmp	.+6      	; 0x224c <vfprintf+0x2ca>
    2246:	ba 2c       	mov	r11, r10
    2248:	01 c0       	rjmp	.+2      	; 0x224c <vfprintf+0x2ca>
    224a:	b5 2c       	mov	r11, r5
    224c:	34 ff       	sbrs	r19, 4
    224e:	0d c0       	rjmp	.+26     	; 0x226a <vfprintf+0x2e8>
    2250:	fe 01       	movw	r30, r28
    2252:	ea 0d       	add	r30, r10
    2254:	f1 1d       	adc	r31, r1
    2256:	80 81       	ld	r24, Z
    2258:	80 33       	cpi	r24, 0x30	; 48
    225a:	11 f4       	brne	.+4      	; 0x2260 <vfprintf+0x2de>
    225c:	39 7e       	andi	r19, 0xE9	; 233
    225e:	09 c0       	rjmp	.+18     	; 0x2272 <vfprintf+0x2f0>
    2260:	32 ff       	sbrs	r19, 2
    2262:	06 c0       	rjmp	.+12     	; 0x2270 <vfprintf+0x2ee>
    2264:	b3 94       	inc	r11
    2266:	b3 94       	inc	r11
    2268:	04 c0       	rjmp	.+8      	; 0x2272 <vfprintf+0x2f0>
    226a:	83 2f       	mov	r24, r19
    226c:	86 78       	andi	r24, 0x86	; 134
    226e:	09 f0       	breq	.+2      	; 0x2272 <vfprintf+0x2f0>
    2270:	b3 94       	inc	r11
    2272:	33 fd       	sbrc	r19, 3
    2274:	12 c0       	rjmp	.+36     	; 0x229a <vfprintf+0x318>
    2276:	30 ff       	sbrs	r19, 0
    2278:	06 c0       	rjmp	.+12     	; 0x2286 <vfprintf+0x304>
    227a:	5a 2c       	mov	r5, r10
    227c:	b3 14       	cp	r11, r3
    227e:	18 f4       	brcc	.+6      	; 0x2286 <vfprintf+0x304>
    2280:	53 0c       	add	r5, r3
    2282:	5b 18       	sub	r5, r11
    2284:	b3 2c       	mov	r11, r3
    2286:	b3 14       	cp	r11, r3
    2288:	60 f4       	brcc	.+24     	; 0x22a2 <vfprintf+0x320>
    228a:	b7 01       	movw	r22, r14
    228c:	80 e2       	ldi	r24, 0x20	; 32
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	3c 87       	std	Y+12, r19	; 0x0c
    2292:	75 d0       	rcall	.+234    	; 0x237e <fputc>
    2294:	b3 94       	inc	r11
    2296:	3c 85       	ldd	r19, Y+12	; 0x0c
    2298:	f6 cf       	rjmp	.-20     	; 0x2286 <vfprintf+0x304>
    229a:	b3 14       	cp	r11, r3
    229c:	10 f4       	brcc	.+4      	; 0x22a2 <vfprintf+0x320>
    229e:	3b 18       	sub	r3, r11
    22a0:	01 c0       	rjmp	.+2      	; 0x22a4 <vfprintf+0x322>
    22a2:	31 2c       	mov	r3, r1
    22a4:	34 ff       	sbrs	r19, 4
    22a6:	11 c0       	rjmp	.+34     	; 0x22ca <vfprintf+0x348>
    22a8:	b7 01       	movw	r22, r14
    22aa:	80 e3       	ldi	r24, 0x30	; 48
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	3c 87       	std	Y+12, r19	; 0x0c
    22b0:	66 d0       	rcall	.+204    	; 0x237e <fputc>
    22b2:	3c 85       	ldd	r19, Y+12	; 0x0c
    22b4:	32 ff       	sbrs	r19, 2
    22b6:	16 c0       	rjmp	.+44     	; 0x22e4 <vfprintf+0x362>
    22b8:	31 fd       	sbrc	r19, 1
    22ba:	03 c0       	rjmp	.+6      	; 0x22c2 <vfprintf+0x340>
    22bc:	88 e7       	ldi	r24, 0x78	; 120
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <vfprintf+0x344>
    22c2:	88 e5       	ldi	r24, 0x58	; 88
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	b7 01       	movw	r22, r14
    22c8:	0c c0       	rjmp	.+24     	; 0x22e2 <vfprintf+0x360>
    22ca:	83 2f       	mov	r24, r19
    22cc:	86 78       	andi	r24, 0x86	; 134
    22ce:	51 f0       	breq	.+20     	; 0x22e4 <vfprintf+0x362>
    22d0:	31 ff       	sbrs	r19, 1
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <vfprintf+0x356>
    22d4:	8b e2       	ldi	r24, 0x2B	; 43
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <vfprintf+0x358>
    22d8:	80 e2       	ldi	r24, 0x20	; 32
    22da:	37 fd       	sbrc	r19, 7
    22dc:	8d e2       	ldi	r24, 0x2D	; 45
    22de:	b7 01       	movw	r22, r14
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	4d d0       	rcall	.+154    	; 0x237e <fputc>
    22e4:	a5 14       	cp	r10, r5
    22e6:	30 f4       	brcc	.+12     	; 0x22f4 <vfprintf+0x372>
    22e8:	b7 01       	movw	r22, r14
    22ea:	80 e3       	ldi	r24, 0x30	; 48
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	47 d0       	rcall	.+142    	; 0x237e <fputc>
    22f0:	5a 94       	dec	r5
    22f2:	f8 cf       	rjmp	.-16     	; 0x22e4 <vfprintf+0x362>
    22f4:	aa 94       	dec	r10
    22f6:	f4 01       	movw	r30, r8
    22f8:	ea 0d       	add	r30, r10
    22fa:	f1 1d       	adc	r31, r1
    22fc:	80 81       	ld	r24, Z
    22fe:	b7 01       	movw	r22, r14
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	3d d0       	rcall	.+122    	; 0x237e <fputc>
    2304:	a1 10       	cpse	r10, r1
    2306:	f6 cf       	rjmp	.-20     	; 0x22f4 <vfprintf+0x372>
    2308:	33 20       	and	r3, r3
    230a:	09 f4       	brne	.+2      	; 0x230e <vfprintf+0x38c>
    230c:	5d ce       	rjmp	.-838    	; 0x1fc8 <vfprintf+0x46>
    230e:	b7 01       	movw	r22, r14
    2310:	80 e2       	ldi	r24, 0x20	; 32
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	34 d0       	rcall	.+104    	; 0x237e <fputc>
    2316:	3a 94       	dec	r3
    2318:	f7 cf       	rjmp	.-18     	; 0x2308 <vfprintf+0x386>
    231a:	f7 01       	movw	r30, r14
    231c:	86 81       	ldd	r24, Z+6	; 0x06
    231e:	97 81       	ldd	r25, Z+7	; 0x07
    2320:	02 c0       	rjmp	.+4      	; 0x2326 <vfprintf+0x3a4>
    2322:	8f ef       	ldi	r24, 0xFF	; 255
    2324:	9f ef       	ldi	r25, 0xFF	; 255
    2326:	2c 96       	adiw	r28, 0x0c	; 12
    2328:	cd bf       	out	0x3d, r28	; 61
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	ef 90       	pop	r14
    2338:	df 90       	pop	r13
    233a:	cf 90       	pop	r12
    233c:	bf 90       	pop	r11
    233e:	af 90       	pop	r10
    2340:	9f 90       	pop	r9
    2342:	8f 90       	pop	r8
    2344:	7f 90       	pop	r7
    2346:	6f 90       	pop	r6
    2348:	5f 90       	pop	r5
    234a:	4f 90       	pop	r4
    234c:	3f 90       	pop	r3
    234e:	2f 90       	pop	r2
    2350:	08 95       	ret

00002352 <strnlen_P>:
    2352:	fc 01       	movw	r30, r24
    2354:	05 90       	lpm	r0, Z+
    2356:	61 50       	subi	r22, 0x01	; 1
    2358:	70 40       	sbci	r23, 0x00	; 0
    235a:	01 10       	cpse	r0, r1
    235c:	d8 f7       	brcc	.-10     	; 0x2354 <strnlen_P+0x2>
    235e:	80 95       	com	r24
    2360:	90 95       	com	r25
    2362:	8e 0f       	add	r24, r30
    2364:	9f 1f       	adc	r25, r31
    2366:	08 95       	ret

00002368 <strnlen>:
    2368:	fc 01       	movw	r30, r24
    236a:	61 50       	subi	r22, 0x01	; 1
    236c:	70 40       	sbci	r23, 0x00	; 0
    236e:	01 90       	ld	r0, Z+
    2370:	01 10       	cpse	r0, r1
    2372:	d8 f7       	brcc	.-10     	; 0x236a <strnlen+0x2>
    2374:	80 95       	com	r24
    2376:	90 95       	com	r25
    2378:	8e 0f       	add	r24, r30
    237a:	9f 1f       	adc	r25, r31
    237c:	08 95       	ret

0000237e <fputc>:
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	fb 01       	movw	r30, r22
    2388:	23 81       	ldd	r18, Z+3	; 0x03
    238a:	21 fd       	sbrc	r18, 1
    238c:	03 c0       	rjmp	.+6      	; 0x2394 <fputc+0x16>
    238e:	8f ef       	ldi	r24, 0xFF	; 255
    2390:	9f ef       	ldi	r25, 0xFF	; 255
    2392:	28 c0       	rjmp	.+80     	; 0x23e4 <fputc+0x66>
    2394:	22 ff       	sbrs	r18, 2
    2396:	16 c0       	rjmp	.+44     	; 0x23c4 <fputc+0x46>
    2398:	46 81       	ldd	r20, Z+6	; 0x06
    239a:	57 81       	ldd	r21, Z+7	; 0x07
    239c:	24 81       	ldd	r18, Z+4	; 0x04
    239e:	35 81       	ldd	r19, Z+5	; 0x05
    23a0:	42 17       	cp	r20, r18
    23a2:	53 07       	cpc	r21, r19
    23a4:	44 f4       	brge	.+16     	; 0x23b6 <fputc+0x38>
    23a6:	a0 81       	ld	r26, Z
    23a8:	b1 81       	ldd	r27, Z+1	; 0x01
    23aa:	9d 01       	movw	r18, r26
    23ac:	2f 5f       	subi	r18, 0xFF	; 255
    23ae:	3f 4f       	sbci	r19, 0xFF	; 255
    23b0:	20 83       	st	Z, r18
    23b2:	31 83       	std	Z+1, r19	; 0x01
    23b4:	8c 93       	st	X, r24
    23b6:	26 81       	ldd	r18, Z+6	; 0x06
    23b8:	37 81       	ldd	r19, Z+7	; 0x07
    23ba:	2f 5f       	subi	r18, 0xFF	; 255
    23bc:	3f 4f       	sbci	r19, 0xFF	; 255
    23be:	26 83       	std	Z+6, r18	; 0x06
    23c0:	37 83       	std	Z+7, r19	; 0x07
    23c2:	10 c0       	rjmp	.+32     	; 0x23e4 <fputc+0x66>
    23c4:	eb 01       	movw	r28, r22
    23c6:	09 2f       	mov	r16, r25
    23c8:	18 2f       	mov	r17, r24
    23ca:	00 84       	ldd	r0, Z+8	; 0x08
    23cc:	f1 85       	ldd	r31, Z+9	; 0x09
    23ce:	e0 2d       	mov	r30, r0
    23d0:	19 95       	eicall
    23d2:	89 2b       	or	r24, r25
    23d4:	e1 f6       	brne	.-72     	; 0x238e <fputc+0x10>
    23d6:	8e 81       	ldd	r24, Y+6	; 0x06
    23d8:	9f 81       	ldd	r25, Y+7	; 0x07
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	8e 83       	std	Y+6, r24	; 0x06
    23de:	9f 83       	std	Y+7, r25	; 0x07
    23e0:	81 2f       	mov	r24, r17
    23e2:	90 2f       	mov	r25, r16
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	08 95       	ret

000023ee <__ultoa_invert>:
    23ee:	fa 01       	movw	r30, r20
    23f0:	aa 27       	eor	r26, r26
    23f2:	28 30       	cpi	r18, 0x08	; 8
    23f4:	51 f1       	breq	.+84     	; 0x244a <__ultoa_invert+0x5c>
    23f6:	20 31       	cpi	r18, 0x10	; 16
    23f8:	81 f1       	breq	.+96     	; 0x245a <__ultoa_invert+0x6c>
    23fa:	e8 94       	clt
    23fc:	6f 93       	push	r22
    23fe:	6e 7f       	andi	r22, 0xFE	; 254
    2400:	6e 5f       	subi	r22, 0xFE	; 254
    2402:	7f 4f       	sbci	r23, 0xFF	; 255
    2404:	8f 4f       	sbci	r24, 0xFF	; 255
    2406:	9f 4f       	sbci	r25, 0xFF	; 255
    2408:	af 4f       	sbci	r26, 0xFF	; 255
    240a:	b1 e0       	ldi	r27, 0x01	; 1
    240c:	3e d0       	rcall	.+124    	; 0x248a <__ultoa_invert+0x9c>
    240e:	b4 e0       	ldi	r27, 0x04	; 4
    2410:	3c d0       	rcall	.+120    	; 0x248a <__ultoa_invert+0x9c>
    2412:	67 0f       	add	r22, r23
    2414:	78 1f       	adc	r23, r24
    2416:	89 1f       	adc	r24, r25
    2418:	9a 1f       	adc	r25, r26
    241a:	a1 1d       	adc	r26, r1
    241c:	68 0f       	add	r22, r24
    241e:	79 1f       	adc	r23, r25
    2420:	8a 1f       	adc	r24, r26
    2422:	91 1d       	adc	r25, r1
    2424:	a1 1d       	adc	r26, r1
    2426:	6a 0f       	add	r22, r26
    2428:	71 1d       	adc	r23, r1
    242a:	81 1d       	adc	r24, r1
    242c:	91 1d       	adc	r25, r1
    242e:	a1 1d       	adc	r26, r1
    2430:	20 d0       	rcall	.+64     	; 0x2472 <__ultoa_invert+0x84>
    2432:	09 f4       	brne	.+2      	; 0x2436 <__ultoa_invert+0x48>
    2434:	68 94       	set
    2436:	3f 91       	pop	r19
    2438:	2a e0       	ldi	r18, 0x0A	; 10
    243a:	26 9f       	mul	r18, r22
    243c:	11 24       	eor	r1, r1
    243e:	30 19       	sub	r19, r0
    2440:	30 5d       	subi	r19, 0xD0	; 208
    2442:	31 93       	st	Z+, r19
    2444:	de f6       	brtc	.-74     	; 0x23fc <__ultoa_invert+0xe>
    2446:	cf 01       	movw	r24, r30
    2448:	08 95       	ret
    244a:	46 2f       	mov	r20, r22
    244c:	47 70       	andi	r20, 0x07	; 7
    244e:	40 5d       	subi	r20, 0xD0	; 208
    2450:	41 93       	st	Z+, r20
    2452:	b3 e0       	ldi	r27, 0x03	; 3
    2454:	0f d0       	rcall	.+30     	; 0x2474 <__ultoa_invert+0x86>
    2456:	c9 f7       	brne	.-14     	; 0x244a <__ultoa_invert+0x5c>
    2458:	f6 cf       	rjmp	.-20     	; 0x2446 <__ultoa_invert+0x58>
    245a:	46 2f       	mov	r20, r22
    245c:	4f 70       	andi	r20, 0x0F	; 15
    245e:	40 5d       	subi	r20, 0xD0	; 208
    2460:	4a 33       	cpi	r20, 0x3A	; 58
    2462:	18 f0       	brcs	.+6      	; 0x246a <__ultoa_invert+0x7c>
    2464:	49 5d       	subi	r20, 0xD9	; 217
    2466:	31 fd       	sbrc	r19, 1
    2468:	40 52       	subi	r20, 0x20	; 32
    246a:	41 93       	st	Z+, r20
    246c:	02 d0       	rcall	.+4      	; 0x2472 <__ultoa_invert+0x84>
    246e:	a9 f7       	brne	.-22     	; 0x245a <__ultoa_invert+0x6c>
    2470:	ea cf       	rjmp	.-44     	; 0x2446 <__ultoa_invert+0x58>
    2472:	b4 e0       	ldi	r27, 0x04	; 4
    2474:	a6 95       	lsr	r26
    2476:	97 95       	ror	r25
    2478:	87 95       	ror	r24
    247a:	77 95       	ror	r23
    247c:	67 95       	ror	r22
    247e:	ba 95       	dec	r27
    2480:	c9 f7       	brne	.-14     	; 0x2474 <__ultoa_invert+0x86>
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	61 05       	cpc	r22, r1
    2486:	71 05       	cpc	r23, r1
    2488:	08 95       	ret
    248a:	9b 01       	movw	r18, r22
    248c:	ac 01       	movw	r20, r24
    248e:	0a 2e       	mov	r0, r26
    2490:	06 94       	lsr	r0
    2492:	57 95       	ror	r21
    2494:	47 95       	ror	r20
    2496:	37 95       	ror	r19
    2498:	27 95       	ror	r18
    249a:	ba 95       	dec	r27
    249c:	c9 f7       	brne	.-14     	; 0x2490 <__ultoa_invert+0xa2>
    249e:	62 0f       	add	r22, r18
    24a0:	73 1f       	adc	r23, r19
    24a2:	84 1f       	adc	r24, r20
    24a4:	95 1f       	adc	r25, r21
    24a6:	a0 1d       	adc	r26, r0
    24a8:	08 95       	ret

000024aa <_exit>:
    24aa:	f8 94       	cli

000024ac <__stop_program>:
    24ac:	ff cf       	rjmp	.-2      	; 0x24ac <__stop_program>
