
GCC_Practice_001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00802000  00002a58  00002aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  00802026  00802026  00002b12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002b12  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000468  00000000  00000000  00002b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e70b  00000000  00000000  00002ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004da0  00000000  00000000  000116fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000681a  00000000  00000000  0001649b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001758  00000000  00000000  0001ccb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d0f6  00000000  00000000  0001e410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004ea6  00000000  00000000  0004b506  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003c8  00000000  00000000  000503ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000abfe  00000000  00000000  00050774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
       2:	00 00       	nop
       4:	1d c1       	rjmp	.+570    	; 0x240 <__bad_interrupt>
       6:	00 00       	nop
       8:	1b c1       	rjmp	.+566    	; 0x240 <__bad_interrupt>
       a:	00 00       	nop
       c:	19 c1       	rjmp	.+562    	; 0x240 <__bad_interrupt>
       e:	00 00       	nop
      10:	17 c1       	rjmp	.+558    	; 0x240 <__bad_interrupt>
      12:	00 00       	nop
      14:	15 c1       	rjmp	.+554    	; 0x240 <__bad_interrupt>
      16:	00 00       	nop
      18:	13 c1       	rjmp	.+550    	; 0x240 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	11 c1       	rjmp	.+546    	; 0x240 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0f c1       	rjmp	.+542    	; 0x240 <__bad_interrupt>
      22:	00 00       	nop
      24:	0d c1       	rjmp	.+538    	; 0x240 <__bad_interrupt>
      26:	00 00       	nop
      28:	a2 c6       	rjmp	.+3396   	; 0xd6e <__vector_10>
      2a:	00 00       	nop
      2c:	c3 c6       	rjmp	.+3462   	; 0xdb4 <__vector_11>
      2e:	00 00       	nop
      30:	07 c1       	rjmp	.+526    	; 0x240 <__bad_interrupt>
      32:	00 00       	nop
      34:	05 c1       	rjmp	.+522    	; 0x240 <__bad_interrupt>
      36:	00 00       	nop
      38:	41 c7       	rjmp	.+3714   	; 0xebc <__vector_14>
      3a:	00 00       	nop
      3c:	77 c7       	rjmp	.+3822   	; 0xf2c <__vector_15>
      3e:	00 00       	nop
      40:	ad c7       	rjmp	.+3930   	; 0xf9c <__vector_16>
      42:	00 00       	nop
      44:	e3 c7       	rjmp	.+4038   	; 0x100c <__vector_17>
      46:	00 00       	nop
      48:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__vector_18>
      4c:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_19>
      50:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__vector_20>
      54:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_21>
      58:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__vector_22>
      5c:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__vector_23>
      60:	ef c0       	rjmp	.+478    	; 0x240 <__bad_interrupt>
      62:	00 00       	nop
      64:	ed c0       	rjmp	.+474    	; 0x240 <__bad_interrupt>
      66:	00 00       	nop
      68:	eb c0       	rjmp	.+470    	; 0x240 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e9 c0       	rjmp	.+466    	; 0x240 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e7 c0       	rjmp	.+462    	; 0x240 <__bad_interrupt>
      72:	00 00       	nop
      74:	e5 c0       	rjmp	.+458    	; 0x240 <__bad_interrupt>
      76:	00 00       	nop
      78:	e3 c0       	rjmp	.+454    	; 0x240 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e1 c0       	rjmp	.+450    	; 0x240 <__bad_interrupt>
      7e:	00 00       	nop
      80:	df c0       	rjmp	.+446    	; 0x240 <__bad_interrupt>
      82:	00 00       	nop
      84:	dd c0       	rjmp	.+442    	; 0x240 <__bad_interrupt>
      86:	00 00       	nop
      88:	db c0       	rjmp	.+438    	; 0x240 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d9 c0       	rjmp	.+434    	; 0x240 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d7 c0       	rjmp	.+430    	; 0x240 <__bad_interrupt>
      92:	00 00       	nop
      94:	d5 c0       	rjmp	.+426    	; 0x240 <__bad_interrupt>
      96:	00 00       	nop
      98:	d3 c0       	rjmp	.+422    	; 0x240 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	2e c5       	rjmp	.+2652   	; 0xafa <__vector_39>
      9e:	00 00       	nop
      a0:	69 c5       	rjmp	.+2770   	; 0xb74 <__vector_40>
      a2:	00 00       	nop
      a4:	a4 c5       	rjmp	.+2888   	; 0xbee <__vector_41>
      a6:	00 00       	nop
      a8:	df c5       	rjmp	.+3006   	; 0xc68 <__vector_42>
      aa:	00 00       	nop
      ac:	c9 c0       	rjmp	.+402    	; 0x240 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c7 c0       	rjmp	.+398    	; 0x240 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c5 c0       	rjmp	.+394    	; 0x240 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c3 c0       	rjmp	.+390    	; 0x240 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__vector_47>
      c0:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_48>
      c4:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <__vector_49>
      c8:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__vector_50>
      cc:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__vector_51>
      d0:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_52>
      d4:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__vector_53>
      d8:	0c 94 46 0d 	jmp	0x1a8c	; 0x1a8c <__vector_54>
      dc:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <__vector_55>
      e0:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__vector_56>
      e4:	ad c0       	rjmp	.+346    	; 0x240 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	ab c0       	rjmp	.+342    	; 0x240 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a9 c0       	rjmp	.+338    	; 0x240 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a7 c0       	rjmp	.+334    	; 0x240 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a5 c0       	rjmp	.+330    	; 0x240 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a3 c0       	rjmp	.+326    	; 0x240 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a1 c0       	rjmp	.+322    	; 0x240 <__bad_interrupt>
      fe:	00 00       	nop
     100:	9f c0       	rjmp	.+318    	; 0x240 <__bad_interrupt>
     102:	00 00       	nop
     104:	9d c0       	rjmp	.+314    	; 0x240 <__bad_interrupt>
     106:	00 00       	nop
     108:	9b c0       	rjmp	.+310    	; 0x240 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	99 c0       	rjmp	.+306    	; 0x240 <__bad_interrupt>
     10e:	00 00       	nop
     110:	97 c0       	rjmp	.+302    	; 0x240 <__bad_interrupt>
     112:	00 00       	nop
     114:	95 c0       	rjmp	.+298    	; 0x240 <__bad_interrupt>
     116:	00 00       	nop
     118:	93 c0       	rjmp	.+294    	; 0x240 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	fa c3       	rjmp	.+2036   	; 0x912 <__vector_71>
     11e:	00 00       	nop
     120:	35 c4       	rjmp	.+2154   	; 0x98c <__vector_72>
     122:	00 00       	nop
     124:	70 c4       	rjmp	.+2272   	; 0xa06 <__vector_73>
     126:	00 00       	nop
     128:	ab c4       	rjmp	.+2390   	; 0xa80 <__vector_74>
     12a:	00 00       	nop
     12c:	89 c0       	rjmp	.+274    	; 0x240 <__bad_interrupt>
     12e:	00 00       	nop
     130:	87 c0       	rjmp	.+270    	; 0x240 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__vector_77>
     138:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__vector_78>
     13c:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <__vector_79>
     140:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__vector_80>
     144:	0c 94 6e 0a 	jmp	0x14dc	; 0x14dc <__vector_81>
     148:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_82>
     14c:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__vector_83>
     150:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_84>
     154:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__vector_85>
     158:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__vector_86>
     15c:	71 c0       	rjmp	.+226    	; 0x240 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6f c0       	rjmp	.+222    	; 0x240 <__bad_interrupt>
     162:	00 00       	nop
     164:	6d c0       	rjmp	.+218    	; 0x240 <__bad_interrupt>
     166:	00 00       	nop
     168:	6b c0       	rjmp	.+214    	; 0x240 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	69 c0       	rjmp	.+210    	; 0x240 <__bad_interrupt>
     16e:	00 00       	nop
     170:	67 c0       	rjmp	.+206    	; 0x240 <__bad_interrupt>
     172:	00 00       	nop
     174:	65 c0       	rjmp	.+202    	; 0x240 <__bad_interrupt>
     176:	00 00       	nop
     178:	63 c0       	rjmp	.+198    	; 0x240 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	61 c0       	rjmp	.+194    	; 0x240 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5f c0       	rjmp	.+190    	; 0x240 <__bad_interrupt>
     182:	00 00       	nop
     184:	5d c0       	rjmp	.+186    	; 0x240 <__bad_interrupt>
     186:	00 00       	nop
     188:	5b c0       	rjmp	.+182    	; 0x240 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	59 c0       	rjmp	.+178    	; 0x240 <__bad_interrupt>
     18e:	00 00       	nop
     190:	57 c0       	rjmp	.+174    	; 0x240 <__bad_interrupt>
     192:	00 00       	nop
     194:	55 c0       	rjmp	.+170    	; 0x240 <__bad_interrupt>
     196:	00 00       	nop
     198:	53 c0       	rjmp	.+166    	; 0x240 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	51 c0       	rjmp	.+162    	; 0x240 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4f c0       	rjmp	.+158    	; 0x240 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	4d c0       	rjmp	.+154    	; 0x240 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	4b c0       	rjmp	.+150    	; 0x240 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	49 c0       	rjmp	.+146    	; 0x240 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__vector_108>
     1b4:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__vector_109>
     1b8:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <__vector_110>
     1bc:	0c 94 96 0e 	jmp	0x1d2c	; 0x1d2c <__vector_111>
     1c0:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__vector_112>
     1c4:	0c 94 06 0f 	jmp	0x1e0c	; 0x1e0c <__vector_113>
     1c8:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <__vector_114>
     1cc:	0c 94 76 0f 	jmp	0x1eec	; 0x1eec <__vector_115>
     1d0:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__vector_116>
     1d4:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__vector_117>
     1d8:	33 c0       	rjmp	.+102    	; 0x240 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	31 c0       	rjmp	.+98     	; 0x240 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2f c0       	rjmp	.+94     	; 0x240 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	2d c0       	rjmp	.+90     	; 0x240 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	2b c0       	rjmp	.+86     	; 0x240 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	29 c0       	rjmp	.+82     	; 0x240 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	27 c0       	rjmp	.+78     	; 0x240 <__bad_interrupt>
	...

000001f4 <__ctors_end>:
     1f4:	11 24       	eor	r1, r1
     1f6:	1f be       	out	0x3f, r1	; 63
     1f8:	cf ef       	ldi	r28, 0xFF	; 255
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	df e3       	ldi	r29, 0x3F	; 63
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	00 e0       	ldi	r16, 0x00	; 0
     202:	0c bf       	out	0x3c, r16	; 60
     204:	18 be       	out	0x38, r1	; 56
     206:	19 be       	out	0x39, r1	; 57
     208:	1a be       	out	0x3a, r1	; 58
     20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
     20c:	10 e2       	ldi	r17, 0x20	; 32
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
     212:	e8 e5       	ldi	r30, 0x58	; 88
     214:	fa e2       	ldi	r31, 0x2A	; 42
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
     21e:	0d 92       	st	X+, r0
     220:	a6 32       	cpi	r26, 0x26	; 38
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
     226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
     228:	20 e2       	ldi	r18, 0x20	; 32
     22a:	a6 e2       	ldi	r26, 0x26	; 38
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
     230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
     232:	a2 39       	cpi	r26, 0x92	; 146
     234:	b2 07       	cpc	r27, r18
     236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
     238:	0e 94 62 11 	call	0x22c4	; 0x22c4 <main>
     23c:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <_exit>

00000240 <__bad_interrupt>:
     240:	df ce       	rjmp	.-578    	; 0x0 <__vectors>

00000242 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	1f 92       	push	r1
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     24c:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <stdio_base>
     250:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <stdio_base+0x1>
     254:	e0 91 76 20 	lds	r30, 0x2076	; 0x802076 <ptr_get>
     258:	f0 91 77 20 	lds	r31, 0x2077	; 0x802077 <ptr_get+0x1>
     25c:	be 01       	movw	r22, r28
     25e:	6f 5f       	subi	r22, 0xFF	; 255
     260:	7f 4f       	sbci	r23, 0xFF	; 255
     262:	19 95       	eicall
	return c;
     264:	89 81       	ldd	r24, Y+1	; 0x01
}
     266:	08 2e       	mov	r0, r24
     268:	00 0c       	add	r0, r0
     26a:	99 0b       	sbc	r25, r25
     26c:	0f 90       	pop	r0
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     274:	fc 01       	movw	r30, r24
     276:	91 81       	ldd	r25, Z+1	; 0x01
     278:	95 ff       	sbrs	r25, 5
     27a:	fd cf       	rjmp	.-6      	; 0x276 <usart_putchar+0x2>
     27c:	60 83       	st	Z, r22
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	08 95       	ret

00000284 <usart_getchar>:
     284:	fc 01       	movw	r30, r24
     286:	91 81       	ldd	r25, Z+1	; 0x01
     288:	99 23       	and	r25, r25
     28a:	ec f7       	brge	.-6      	; 0x286 <usart_getchar+0x2>
     28c:	80 81       	ld	r24, Z
     28e:	08 95       	ret

00000290 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     290:	4f 92       	push	r4
     292:	5f 92       	push	r5
     294:	6f 92       	push	r6
     296:	7f 92       	push	r7
     298:	8f 92       	push	r8
     29a:	9f 92       	push	r9
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	7c 01       	movw	r14, r24
     2ac:	4a 01       	movw	r8, r20
     2ae:	5b 01       	movw	r10, r22
     2b0:	28 01       	movw	r4, r16
     2b2:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     2b4:	fc 01       	movw	r30, r24
     2b6:	84 81       	ldd	r24, Z+4	; 0x04
     2b8:	82 ff       	sbrs	r24, 2
     2ba:	16 c0       	rjmp	.+44     	; 0x2e8 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     2bc:	d9 01       	movw	r26, r18
     2be:	c8 01       	movw	r24, r16
     2c0:	68 94       	set
     2c2:	12 f8       	bld	r1, 2
     2c4:	b6 95       	lsr	r27
     2c6:	a7 95       	ror	r26
     2c8:	97 95       	ror	r25
     2ca:	87 95       	ror	r24
     2cc:	16 94       	lsr	r1
     2ce:	d1 f7       	brne	.-12     	; 0x2c4 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     2d0:	b9 01       	movw	r22, r18
     2d2:	a8 01       	movw	r20, r16
     2d4:	03 2e       	mov	r0, r19
     2d6:	36 e1       	ldi	r19, 0x16	; 22
     2d8:	76 95       	lsr	r23
     2da:	67 95       	ror	r22
     2dc:	57 95       	ror	r21
     2de:	47 95       	ror	r20
     2e0:	3a 95       	dec	r19
     2e2:	d1 f7       	brne	.-12     	; 0x2d8 <usart_set_baudrate+0x48>
     2e4:	30 2d       	mov	r19, r0
     2e6:	15 c0       	rjmp	.+42     	; 0x312 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     2e8:	d9 01       	movw	r26, r18
     2ea:	c8 01       	movw	r24, r16
     2ec:	68 94       	set
     2ee:	13 f8       	bld	r1, 3
     2f0:	b6 95       	lsr	r27
     2f2:	a7 95       	ror	r26
     2f4:	97 95       	ror	r25
     2f6:	87 95       	ror	r24
     2f8:	16 94       	lsr	r1
     2fa:	d1 f7       	brne	.-12     	; 0x2f0 <usart_set_baudrate+0x60>
		min_rate /= 2;
     2fc:	b9 01       	movw	r22, r18
     2fe:	a8 01       	movw	r20, r16
     300:	03 2e       	mov	r0, r19
     302:	37 e1       	ldi	r19, 0x17	; 23
     304:	76 95       	lsr	r23
     306:	67 95       	ror	r22
     308:	57 95       	ror	r21
     30a:	47 95       	ror	r20
     30c:	3a 95       	dec	r19
     30e:	d1 f7       	brne	.-12     	; 0x304 <usart_set_baudrate+0x74>
     310:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     312:	88 15       	cp	r24, r8
     314:	99 05       	cpc	r25, r9
     316:	aa 05       	cpc	r26, r10
     318:	bb 05       	cpc	r27, r11
     31a:	08 f4       	brcc	.+2      	; 0x31e <usart_set_baudrate+0x8e>
     31c:	a6 c0       	rjmp	.+332    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     31e:	84 16       	cp	r8, r20
     320:	95 06       	cpc	r9, r21
     322:	a6 06       	cpc	r10, r22
     324:	b7 06       	cpc	r11, r23
     326:	08 f4       	brcc	.+2      	; 0x32a <usart_set_baudrate+0x9a>
     328:	a2 c0       	rjmp	.+324    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     32a:	f7 01       	movw	r30, r14
     32c:	84 81       	ldd	r24, Z+4	; 0x04
     32e:	82 fd       	sbrc	r24, 2
     330:	04 c0       	rjmp	.+8      	; 0x33a <usart_set_baudrate+0xaa>
		baud *= 2;
     332:	88 0c       	add	r8, r8
     334:	99 1c       	adc	r9, r9
     336:	aa 1c       	adc	r10, r10
     338:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     33a:	c3 01       	movw	r24, r6
     33c:	b2 01       	movw	r22, r4
     33e:	a5 01       	movw	r20, r10
     340:	94 01       	movw	r18, r8
     342:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     346:	2f 3f       	cpi	r18, 0xFF	; 255
     348:	31 05       	cpc	r19, r1
     34a:	41 05       	cpc	r20, r1
     34c:	51 05       	cpc	r21, r1
     34e:	08 f4       	brcc	.+2      	; 0x352 <usart_set_baudrate+0xc2>
     350:	90 c0       	rjmp	.+288    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	a0 e0       	ldi	r26, 0x00	; 0
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	c9 ef       	ldi	r28, 0xF9	; 249
     35c:	05 c0       	rjmp	.+10     	; 0x368 <usart_set_baudrate+0xd8>
     35e:	28 17       	cp	r18, r24
     360:	39 07       	cpc	r19, r25
     362:	4a 07       	cpc	r20, r26
     364:	5b 07       	cpc	r21, r27
     366:	58 f0       	brcs	.+22     	; 0x37e <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	aa 1f       	adc	r26, r26
     36e:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     370:	cd 3f       	cpi	r28, 0xFD	; 253
     372:	0c f4       	brge	.+2      	; 0x376 <usart_set_baudrate+0xe6>
			limit |= 1;
     374:	81 60       	ori	r24, 0x01	; 1
     376:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     378:	c7 30       	cpi	r28, 0x07	; 7
     37a:	89 f7       	brne	.-30     	; 0x35e <usart_set_baudrate+0xce>
     37c:	4f c0       	rjmp	.+158    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     37e:	cc 23       	and	r28, r28
     380:	0c f0       	brlt	.+2      	; 0x384 <usart_set_baudrate+0xf4>
     382:	4c c0       	rjmp	.+152    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     384:	d5 01       	movw	r26, r10
     386:	c4 01       	movw	r24, r8
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	aa 1f       	adc	r26, r26
     38e:	bb 1f       	adc	r27, r27
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	aa 1f       	adc	r26, r26
     396:	bb 1f       	adc	r27, r27
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	aa 1f       	adc	r26, r26
     39e:	bb 1f       	adc	r27, r27
     3a0:	48 1a       	sub	r4, r24
     3a2:	59 0a       	sbc	r5, r25
     3a4:	6a 0a       	sbc	r6, r26
     3a6:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     3a8:	ce 3f       	cpi	r28, 0xFE	; 254
     3aa:	f4 f4       	brge	.+60     	; 0x3e8 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     3ac:	8d ef       	ldi	r24, 0xFD	; 253
     3ae:	9f ef       	ldi	r25, 0xFF	; 255
     3b0:	8c 1b       	sub	r24, r28
     3b2:	91 09       	sbc	r25, r1
     3b4:	c7 fd       	sbrc	r28, 7
     3b6:	93 95       	inc	r25
     3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <usart_set_baudrate+0x132>
     3ba:	44 0c       	add	r4, r4
     3bc:	55 1c       	adc	r5, r5
     3be:	66 1c       	adc	r6, r6
     3c0:	77 1c       	adc	r7, r7
     3c2:	8a 95       	dec	r24
     3c4:	d2 f7       	brpl	.-12     	; 0x3ba <usart_set_baudrate+0x12a>
     3c6:	d5 01       	movw	r26, r10
     3c8:	c4 01       	movw	r24, r8
     3ca:	b6 95       	lsr	r27
     3cc:	a7 95       	ror	r26
     3ce:	97 95       	ror	r25
     3d0:	87 95       	ror	r24
     3d2:	bc 01       	movw	r22, r24
     3d4:	cd 01       	movw	r24, r26
     3d6:	64 0d       	add	r22, r4
     3d8:	75 1d       	adc	r23, r5
     3da:	86 1d       	adc	r24, r6
     3dc:	97 1d       	adc	r25, r7
     3de:	a5 01       	movw	r20, r10
     3e0:	94 01       	movw	r18, r8
     3e2:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__udivmodsi4>
     3e6:	37 c0       	rjmp	.+110    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		} else {
			baud <<= exp + 3;
     3e8:	83 e0       	ldi	r24, 0x03	; 3
     3ea:	8c 0f       	add	r24, r28
     3ec:	a5 01       	movw	r20, r10
     3ee:	94 01       	movw	r18, r8
     3f0:	04 c0       	rjmp	.+8      	; 0x3fa <usart_set_baudrate+0x16a>
     3f2:	22 0f       	add	r18, r18
     3f4:	33 1f       	adc	r19, r19
     3f6:	44 1f       	adc	r20, r20
     3f8:	55 1f       	adc	r21, r21
     3fa:	8a 95       	dec	r24
     3fc:	d2 f7       	brpl	.-12     	; 0x3f2 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     3fe:	da 01       	movw	r26, r20
     400:	c9 01       	movw	r24, r18
     402:	b6 95       	lsr	r27
     404:	a7 95       	ror	r26
     406:	97 95       	ror	r25
     408:	87 95       	ror	r24
     40a:	bc 01       	movw	r22, r24
     40c:	cd 01       	movw	r24, r26
     40e:	64 0d       	add	r22, r4
     410:	75 1d       	adc	r23, r5
     412:	86 1d       	adc	r24, r6
     414:	97 1d       	adc	r25, r7
     416:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__udivmodsi4>
     41a:	1d c0       	rjmp	.+58     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	8c 0f       	add	r24, r28
     420:	a5 01       	movw	r20, r10
     422:	94 01       	movw	r18, r8
     424:	04 c0       	rjmp	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	44 1f       	adc	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	8a 95       	dec	r24
     430:	d2 f7       	brpl	.-12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		div = (cpu_hz + baud / 2) / baud - 1;
     432:	da 01       	movw	r26, r20
     434:	c9 01       	movw	r24, r18
     436:	b6 95       	lsr	r27
     438:	a7 95       	ror	r26
     43a:	97 95       	ror	r25
     43c:	87 95       	ror	r24
     43e:	bc 01       	movw	r22, r24
     440:	cd 01       	movw	r24, r26
     442:	64 0d       	add	r22, r4
     444:	75 1d       	adc	r23, r5
     446:	86 1d       	adc	r24, r6
     448:	97 1d       	adc	r25, r7
     44a:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__udivmodsi4>
     44e:	21 50       	subi	r18, 0x01	; 1
     450:	31 09       	sbc	r19, r1
     452:	41 09       	sbc	r20, r1
     454:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     456:	83 2f       	mov	r24, r19
     458:	8f 70       	andi	r24, 0x0F	; 15
     45a:	c2 95       	swap	r28
     45c:	c0 7f       	andi	r28, 0xF0	; 240
     45e:	c8 2b       	or	r28, r24
     460:	f7 01       	movw	r30, r14
     462:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     464:	26 83       	std	Z+6, r18	; 0x06

	return true;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	18 c0       	rjmp	.+48     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	16 c0       	rjmp	.+44     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	14 c0       	rjmp	.+40     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     472:	d5 01       	movw	r26, r10
     474:	c4 01       	movw	r24, r8
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	aa 1f       	adc	r26, r26
     47c:	bb 1f       	adc	r27, r27
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	aa 1f       	adc	r26, r26
     484:	bb 1f       	adc	r27, r27
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	aa 1f       	adc	r26, r26
     48c:	bb 1f       	adc	r27, r27
     48e:	48 1a       	sub	r4, r24
     490:	59 0a       	sbc	r5, r25
     492:	6a 0a       	sbc	r6, r26
     494:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     496:	c9 ef       	ldi	r28, 0xF9	; 249
     498:	89 cf       	rjmp	.-238    	; 0x3ac <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     49a:	cf 91       	pop	r28
     49c:	1f 91       	pop	r17
     49e:	0f 91       	pop	r16
     4a0:	ff 90       	pop	r15
     4a2:	ef 90       	pop	r14
     4a4:	bf 90       	pop	r11
     4a6:	af 90       	pop	r10
     4a8:	9f 90       	pop	r9
     4aa:	8f 90       	pop	r8
     4ac:	7f 90       	pop	r7
     4ae:	6f 90       	pop	r6
     4b0:	5f 90       	pop	r5
     4b2:	4f 90       	pop	r4
     4b4:	08 95       	ret

000004b6 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	ec 01       	movw	r28, r24
     4c0:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     4c2:	00 97       	sbiw	r24, 0x00	; 0
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <usart_init_rs232+0x12>
     4c6:	36 c1       	rjmp	.+620    	; 0x734 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     4c8:	80 3c       	cpi	r24, 0xC0	; 192
     4ca:	91 05       	cpc	r25, r1
     4cc:	21 f4       	brne	.+8      	; 0x4d6 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     4ce:	60 e1       	ldi	r22, 0x10	; 16
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	41 d4       	rcall	.+2178   	; 0xd56 <sysclk_enable_module>
     4d4:	2f c1       	rjmp	.+606    	; 0x734 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     4d6:	c0 34       	cpi	r28, 0x40	; 64
     4d8:	84 e0       	ldi	r24, 0x04	; 4
     4da:	d8 07       	cpc	r29, r24
     4dc:	21 f4       	brne	.+8      	; 0x4e6 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     4de:	68 e0       	ldi	r22, 0x08	; 8
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	39 d4       	rcall	.+2162   	; 0xd56 <sysclk_enable_module>
     4e4:	27 c1       	rjmp	.+590    	; 0x734 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     4e6:	c1 15       	cp	r28, r1
     4e8:	e4 e0       	ldi	r30, 0x04	; 4
     4ea:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     4ec:	21 f4       	brne	.+8      	; 0x4f6 <usart_init_rs232+0x40>
     4ee:	64 e0       	ldi	r22, 0x04	; 4
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	31 d4       	rcall	.+2146   	; 0xd56 <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     4f4:	1f c1       	rjmp	.+574    	; 0x734 <usart_init_rs232+0x27e>
     4f6:	c0 38       	cpi	r28, 0x80	; 128
     4f8:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     4fa:	df 07       	cpc	r29, r31
     4fc:	21 f4       	brne	.+8      	; 0x506 <usart_init_rs232+0x50>
     4fe:	62 e0       	ldi	r22, 0x02	; 2
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	29 d4       	rcall	.+2130   	; 0xd56 <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     504:	17 c1       	rjmp	.+558    	; 0x734 <usart_init_rs232+0x27e>
     506:	c1 15       	cp	r28, r1
     508:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     50a:	d8 07       	cpc	r29, r24
     50c:	21 f4       	brne	.+8      	; 0x516 <usart_init_rs232+0x60>
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	21 d4       	rcall	.+2114   	; 0xd56 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     514:	0f c1       	rjmp	.+542    	; 0x734 <usart_init_rs232+0x27e>
     516:	c0 38       	cpi	r28, 0x80	; 128
     518:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     51a:	de 07       	cpc	r29, r30
     51c:	21 f4       	brne	.+8      	; 0x526 <usart_init_rs232+0x70>
     51e:	61 e0       	ldi	r22, 0x01	; 1
     520:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     522:	19 d4       	rcall	.+2098   	; 0xd56 <sysclk_enable_module>
     524:	07 c1       	rjmp	.+526    	; 0x734 <usart_init_rs232+0x27e>
     526:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     528:	f3 e0       	ldi	r31, 0x03	; 3
     52a:	df 07       	cpc	r29, r31
     52c:	21 f4       	brne	.+8      	; 0x536 <usart_init_rs232+0x80>
     52e:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	11 d4       	rcall	.+2082   	; 0xd56 <sysclk_enable_module>
     534:	ff c0       	rjmp	.+510    	; 0x734 <usart_init_rs232+0x27e>
     536:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	d8 07       	cpc	r29, r24
     53c:	21 f4       	brne	.+8      	; 0x546 <usart_init_rs232+0x90>
     53e:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	09 d4       	rcall	.+2066   	; 0xd56 <sysclk_enable_module>
     544:	f7 c0       	rjmp	.+494    	; 0x734 <usart_init_rs232+0x27e>
     546:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     548:	e2 e0       	ldi	r30, 0x02	; 2
     54a:	de 07       	cpc	r29, r30
     54c:	21 f4       	brne	.+8      	; 0x556 <usart_init_rs232+0xa0>
     54e:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	01 d4       	rcall	.+2050   	; 0xd56 <sysclk_enable_module>
     554:	ef c0       	rjmp	.+478    	; 0x734 <usart_init_rs232+0x27e>
     556:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     558:	f3 e0       	ldi	r31, 0x03	; 3
     55a:	df 07       	cpc	r29, r31
     55c:	21 f4       	brne	.+8      	; 0x566 <usart_init_rs232+0xb0>
     55e:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	f9 d3       	rcall	.+2034   	; 0xd56 <sysclk_enable_module>
     564:	e7 c0       	rjmp	.+462    	; 0x734 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     566:	c0 32       	cpi	r28, 0x20	; 32
     568:	83 e0       	ldi	r24, 0x03	; 3
     56a:	d8 07       	cpc	r29, r24
     56c:	21 f4       	brne	.+8      	; 0x576 <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     56e:	64 e0       	ldi	r22, 0x04	; 4
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	f1 d3       	rcall	.+2018   	; 0xd56 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     574:	df c0       	rjmp	.+446    	; 0x734 <usart_init_rs232+0x27e>
     576:	c1 15       	cp	r28, r1
     578:	e8 e0       	ldi	r30, 0x08	; 8
     57a:	de 07       	cpc	r29, r30
     57c:	21 f4       	brne	.+8      	; 0x586 <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	83 e0       	ldi	r24, 0x03	; 3
     582:	e9 d3       	rcall	.+2002   	; 0xd56 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     584:	d7 c0       	rjmp	.+430    	; 0x734 <usart_init_rs232+0x27e>
     586:	c1 15       	cp	r28, r1
     588:	f9 e0       	ldi	r31, 0x09	; 9
     58a:	df 07       	cpc	r29, r31
     58c:	21 f4       	brne	.+8      	; 0x596 <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	84 e0       	ldi	r24, 0x04	; 4
     592:	e1 d3       	rcall	.+1986   	; 0xd56 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     594:	cf c0       	rjmp	.+414    	; 0x734 <usart_init_rs232+0x27e>
     596:	c1 15       	cp	r28, r1
     598:	8a e0       	ldi	r24, 0x0A	; 10
     59a:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     59c:	21 f4       	brne	.+8      	; 0x5a6 <usart_init_rs232+0xf0>
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     5a2:	d9 d3       	rcall	.+1970   	; 0xd56 <sysclk_enable_module>
     5a4:	c7 c0       	rjmp	.+398    	; 0x734 <usart_init_rs232+0x27e>
     5a6:	c1 15       	cp	r28, r1
     5a8:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     5aa:	de 07       	cpc	r29, r30
     5ac:	21 f4       	brne	.+8      	; 0x5b6 <usart_init_rs232+0x100>
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     5b2:	d1 d3       	rcall	.+1954   	; 0xd56 <sysclk_enable_module>
     5b4:	bf c0       	rjmp	.+382    	; 0x734 <usart_init_rs232+0x27e>
     5b6:	c0 34       	cpi	r28, 0x40	; 64
     5b8:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     5ba:	df 07       	cpc	r29, r31
     5bc:	21 f4       	brne	.+8      	; 0x5c6 <usart_init_rs232+0x110>
     5be:	62 e0       	ldi	r22, 0x02	; 2
     5c0:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     5c2:	c9 d3       	rcall	.+1938   	; 0xd56 <sysclk_enable_module>
     5c4:	b7 c0       	rjmp	.+366    	; 0x734 <usart_init_rs232+0x27e>
     5c6:	c0 34       	cpi	r28, 0x40	; 64
     5c8:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     5ca:	d8 07       	cpc	r29, r24
     5cc:	21 f4       	brne	.+8      	; 0x5d6 <usart_init_rs232+0x120>
     5ce:	62 e0       	ldi	r22, 0x02	; 2
     5d0:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     5d2:	c1 d3       	rcall	.+1922   	; 0xd56 <sysclk_enable_module>
     5d4:	af c0       	rjmp	.+350    	; 0x734 <usart_init_rs232+0x27e>
     5d6:	c0 34       	cpi	r28, 0x40	; 64
     5d8:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     5da:	de 07       	cpc	r29, r30
     5dc:	21 f4       	brne	.+8      	; 0x5e6 <usart_init_rs232+0x130>
     5de:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     5e0:	85 e0       	ldi	r24, 0x05	; 5
     5e2:	b9 d3       	rcall	.+1906   	; 0xd56 <sysclk_enable_module>
     5e4:	a7 c0       	rjmp	.+334    	; 0x734 <usart_init_rs232+0x27e>
     5e6:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     5e8:	fb e0       	ldi	r31, 0x0B	; 11
     5ea:	df 07       	cpc	r29, r31
     5ec:	21 f4       	brne	.+8      	; 0x5f6 <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     5ee:	62 e0       	ldi	r22, 0x02	; 2
     5f0:	86 e0       	ldi	r24, 0x06	; 6
     5f2:	b1 d3       	rcall	.+1890   	; 0xd56 <sysclk_enable_module>
     5f4:	9f c0       	rjmp	.+318    	; 0x734 <usart_init_rs232+0x27e>
     5f6:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     5f8:	88 e0       	ldi	r24, 0x08	; 8
     5fa:	d8 07       	cpc	r29, r24
     5fc:	21 f4       	brne	.+8      	; 0x606 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     5fe:	64 e0       	ldi	r22, 0x04	; 4
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	a9 d3       	rcall	.+1874   	; 0xd56 <sysclk_enable_module>
     604:	97 c0       	rjmp	.+302    	; 0x734 <usart_init_rs232+0x27e>
     606:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     608:	e9 e0       	ldi	r30, 0x09	; 9
     60a:	de 07       	cpc	r29, r30
     60c:	21 f4       	brne	.+8      	; 0x616 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     60e:	64 e0       	ldi	r22, 0x04	; 4
     610:	84 e0       	ldi	r24, 0x04	; 4
     612:	a1 d3       	rcall	.+1858   	; 0xd56 <sysclk_enable_module>
     614:	8f c0       	rjmp	.+286    	; 0x734 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     616:	c0 39       	cpi	r28, 0x90	; 144
     618:	fa e0       	ldi	r31, 0x0A	; 10
     61a:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     61c:	21 f4       	brne	.+8      	; 0x626 <usart_init_rs232+0x170>
     61e:	64 e0       	ldi	r22, 0x04	; 4
     620:	85 e0       	ldi	r24, 0x05	; 5
     622:	99 d3       	rcall	.+1842   	; 0xd56 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     624:	87 c0       	rjmp	.+270    	; 0x734 <usart_init_rs232+0x27e>
     626:	c0 39       	cpi	r28, 0x90	; 144
     628:	8b e0       	ldi	r24, 0x0B	; 11
     62a:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     62c:	21 f4       	brne	.+8      	; 0x636 <usart_init_rs232+0x180>
     62e:	64 e0       	ldi	r22, 0x04	; 4
     630:	86 e0       	ldi	r24, 0x06	; 6
     632:	91 d3       	rcall	.+1826   	; 0xd56 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     634:	7f c0       	rjmp	.+254    	; 0x734 <usart_init_rs232+0x27e>
     636:	c0 3c       	cpi	r28, 0xC0	; 192
     638:	e8 e0       	ldi	r30, 0x08	; 8
     63a:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     63c:	21 f4       	brne	.+8      	; 0x646 <usart_init_rs232+0x190>
     63e:	68 e0       	ldi	r22, 0x08	; 8
     640:	83 e0       	ldi	r24, 0x03	; 3
     642:	89 d3       	rcall	.+1810   	; 0xd56 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     644:	77 c0       	rjmp	.+238    	; 0x734 <usart_init_rs232+0x27e>
     646:	c0 3c       	cpi	r28, 0xC0	; 192
     648:	f9 e0       	ldi	r31, 0x09	; 9
     64a:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     64c:	21 f4       	brne	.+8      	; 0x656 <usart_init_rs232+0x1a0>
     64e:	68 e0       	ldi	r22, 0x08	; 8
     650:	84 e0       	ldi	r24, 0x04	; 4
     652:	81 d3       	rcall	.+1794   	; 0xd56 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     654:	6f c0       	rjmp	.+222    	; 0x734 <usart_init_rs232+0x27e>
     656:	c0 3c       	cpi	r28, 0xC0	; 192
     658:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     65a:	d8 07       	cpc	r29, r24
     65c:	21 f4       	brne	.+8      	; 0x666 <usart_init_rs232+0x1b0>
     65e:	68 e0       	ldi	r22, 0x08	; 8
     660:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     662:	79 d3       	rcall	.+1778   	; 0xd56 <sysclk_enable_module>
     664:	67 c0       	rjmp	.+206    	; 0x734 <usart_init_rs232+0x27e>
     666:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     668:	eb e0       	ldi	r30, 0x0B	; 11
     66a:	de 07       	cpc	r29, r30
     66c:	21 f4       	brne	.+8      	; 0x676 <usart_init_rs232+0x1c0>
     66e:	68 e0       	ldi	r22, 0x08	; 8
     670:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     672:	71 d3       	rcall	.+1762   	; 0xd56 <sysclk_enable_module>
     674:	5f c0       	rjmp	.+190    	; 0x734 <usart_init_rs232+0x27e>
     676:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     678:	f8 e0       	ldi	r31, 0x08	; 8
     67a:	df 07       	cpc	r29, r31
     67c:	21 f4       	brne	.+8      	; 0x686 <usart_init_rs232+0x1d0>
     67e:	60 e1       	ldi	r22, 0x10	; 16
     680:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     682:	69 d3       	rcall	.+1746   	; 0xd56 <sysclk_enable_module>
     684:	57 c0       	rjmp	.+174    	; 0x734 <usart_init_rs232+0x27e>
     686:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     688:	89 e0       	ldi	r24, 0x09	; 9
     68a:	d8 07       	cpc	r29, r24
     68c:	21 f4       	brne	.+8      	; 0x696 <usart_init_rs232+0x1e0>
     68e:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     690:	84 e0       	ldi	r24, 0x04	; 4
     692:	61 d3       	rcall	.+1730   	; 0xd56 <sysclk_enable_module>
     694:	4f c0       	rjmp	.+158    	; 0x734 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     696:	c0 3a       	cpi	r28, 0xA0	; 160
     698:	ea e0       	ldi	r30, 0x0A	; 10
     69a:	de 07       	cpc	r29, r30
     69c:	21 f4       	brne	.+8      	; 0x6a6 <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     69e:	60 e1       	ldi	r22, 0x10	; 16
     6a0:	85 e0       	ldi	r24, 0x05	; 5
     6a2:	59 d3       	rcall	.+1714   	; 0xd56 <sysclk_enable_module>
     6a4:	47 c0       	rjmp	.+142    	; 0x734 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     6a6:	c0 3a       	cpi	r28, 0xA0	; 160
     6a8:	fb e0       	ldi	r31, 0x0B	; 11
     6aa:	df 07       	cpc	r29, r31
     6ac:	21 f4       	brne	.+8      	; 0x6b6 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     6ae:	60 e1       	ldi	r22, 0x10	; 16
     6b0:	86 e0       	ldi	r24, 0x06	; 6
     6b2:	51 d3       	rcall	.+1698   	; 0xd56 <sysclk_enable_module>
     6b4:	3f c0       	rjmp	.+126    	; 0x734 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     6b6:	c0 3b       	cpi	r28, 0xB0	; 176
     6b8:	88 e0       	ldi	r24, 0x08	; 8
     6ba:	d8 07       	cpc	r29, r24
     6bc:	21 f4       	brne	.+8      	; 0x6c6 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     6be:	60 e2       	ldi	r22, 0x20	; 32
     6c0:	83 e0       	ldi	r24, 0x03	; 3
     6c2:	49 d3       	rcall	.+1682   	; 0xd56 <sysclk_enable_module>
     6c4:	37 c0       	rjmp	.+110    	; 0x734 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     6c6:	c0 3b       	cpi	r28, 0xB0	; 176
     6c8:	e9 e0       	ldi	r30, 0x09	; 9
     6ca:	de 07       	cpc	r29, r30
     6cc:	21 f4       	brne	.+8      	; 0x6d6 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     6ce:	60 e2       	ldi	r22, 0x20	; 32
     6d0:	84 e0       	ldi	r24, 0x04	; 4
     6d2:	41 d3       	rcall	.+1666   	; 0xd56 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     6d4:	2f c0       	rjmp	.+94     	; 0x734 <usart_init_rs232+0x27e>
     6d6:	c0 3b       	cpi	r28, 0xB0	; 176
     6d8:	fa e0       	ldi	r31, 0x0A	; 10
     6da:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     6dc:	21 f4       	brne	.+8      	; 0x6e6 <usart_init_rs232+0x230>
     6de:	60 e2       	ldi	r22, 0x20	; 32
     6e0:	85 e0       	ldi	r24, 0x05	; 5
     6e2:	39 d3       	rcall	.+1650   	; 0xd56 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     6e4:	27 c0       	rjmp	.+78     	; 0x734 <usart_init_rs232+0x27e>
     6e6:	c0 3b       	cpi	r28, 0xB0	; 176
     6e8:	8b e0       	ldi	r24, 0x0B	; 11
     6ea:	d8 07       	cpc	r29, r24
     6ec:	21 f4       	brne	.+8      	; 0x6f6 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     6ee:	60 e2       	ldi	r22, 0x20	; 32
     6f0:	86 e0       	ldi	r24, 0x06	; 6
     6f2:	31 d3       	rcall	.+1634   	; 0xd56 <sysclk_enable_module>
     6f4:	1f c0       	rjmp	.+62     	; 0x734 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     6f6:	c0 38       	cpi	r28, 0x80	; 128
     6f8:	e4 e0       	ldi	r30, 0x04	; 4
     6fa:	de 07       	cpc	r29, r30
     6fc:	21 f4       	brne	.+8      	; 0x706 <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     6fe:	60 e4       	ldi	r22, 0x40	; 64
     700:	83 e0       	ldi	r24, 0x03	; 3
     702:	29 d3       	rcall	.+1618   	; 0xd56 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     704:	17 c0       	rjmp	.+46     	; 0x734 <usart_init_rs232+0x27e>
     706:	c0 39       	cpi	r28, 0x90	; 144
     708:	f4 e0       	ldi	r31, 0x04	; 4
     70a:	df 07       	cpc	r29, r31
     70c:	21 f4       	brne	.+8      	; 0x716 <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     70e:	60 e4       	ldi	r22, 0x40	; 64
     710:	84 e0       	ldi	r24, 0x04	; 4
     712:	21 d3       	rcall	.+1602   	; 0xd56 <sysclk_enable_module>
     714:	0f c0       	rjmp	.+30     	; 0x734 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     716:	c0 3a       	cpi	r28, 0xA0	; 160
     718:	84 e0       	ldi	r24, 0x04	; 4
     71a:	d8 07       	cpc	r29, r24
     71c:	21 f4       	brne	.+8      	; 0x726 <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     71e:	60 e4       	ldi	r22, 0x40	; 64
     720:	85 e0       	ldi	r24, 0x05	; 5
     722:	19 d3       	rcall	.+1586   	; 0xd56 <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     724:	07 c0       	rjmp	.+14     	; 0x734 <usart_init_rs232+0x27e>
     726:	c0 3b       	cpi	r28, 0xB0	; 176
     728:	e4 e0       	ldi	r30, 0x04	; 4
     72a:	de 07       	cpc	r29, r30
     72c:	19 f4       	brne	.+6      	; 0x734 <usart_init_rs232+0x27e>
     72e:	60 e4       	ldi	r22, 0x40	; 64
     730:	86 e0       	ldi	r24, 0x06	; 6
     732:	11 d3       	rcall	.+1570   	; 0xd56 <sysclk_enable_module>
     734:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     736:	8f 73       	andi	r24, 0x3F	; 63
     738:	8d 83       	std	Y+5, r24	; 0x05
     73a:	f8 01       	movw	r30, r16
     73c:	95 81       	ldd	r25, Z+5	; 0x05
     73e:	84 81       	ldd	r24, Z+4	; 0x04
     740:	89 2b       	or	r24, r25
     742:	96 81       	ldd	r25, Z+6	; 0x06
     744:	91 11       	cpse	r25, r1
     746:	98 e0       	ldi	r25, 0x08	; 8
     748:	89 2b       	or	r24, r25
     74a:	8d 83       	std	Y+5, r24	; 0x05
     74c:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     74e:	40 81       	ld	r20, Z
     750:	51 81       	ldd	r21, Z+1	; 0x01
     752:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     754:	73 81       	ldd	r23, Z+3	; 0x03
     756:	00 e0       	ldi	r16, 0x00	; 0
     758:	18 e4       	ldi	r17, 0x48	; 72
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     75a:	28 ee       	ldi	r18, 0xE8	; 232
     75c:	31 e0       	ldi	r19, 0x01	; 1
     75e:	ce 01       	movw	r24, r28
     760:	97 dd       	rcall	.-1234   	; 0x290 <usart_set_baudrate>
     762:	9c 81       	ldd	r25, Y+4	; 0x04
     764:	98 60       	ori	r25, 0x08	; 8
     766:	9c 83       	std	Y+4, r25	; 0x04
     768:	9c 81       	ldd	r25, Y+4	; 0x04
     76a:	90 61       	ori	r25, 0x10	; 16
     76c:	9c 83       	std	Y+4, r25	; 0x04
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	08 95       	ret

00000778 <initLED>:
	TCE0.CCB = TCE0.CCA;
	TCE0.CCC = TCE0.CCA;
	TCE0.CCD = TCE0.CCA;
	
	TCE0.CTRLA = 0b00000111; //prescaler 1024
}
     778:	61 e0       	ldi	r22, 0x01	; 1
     77a:	85 e0       	ldi	r24, 0x05	; 5
     77c:	ec d2       	rcall	.+1496   	; 0xd56 <sysclk_enable_module>
     77e:	64 e0       	ldi	r22, 0x04	; 4
     780:	85 e0       	ldi	r24, 0x05	; 5
     782:	e9 d2       	rcall	.+1490   	; 0xd56 <sysclk_enable_module>
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
     78a:	e0 e0       	ldi	r30, 0x00	; 0
     78c:	fa e0       	ldi	r31, 0x0A	; 10
     78e:	87 e0       	ldi	r24, 0x07	; 7
     790:	80 83       	st	Z, r24
     792:	83 ef       	ldi	r24, 0xF3	; 243
     794:	81 83       	std	Z+1, r24	; 0x01
     796:	08 95       	ret

00000798 <flashLED>:
     798:	4f 92       	push	r4
     79a:	5f 92       	push	r5
     79c:	6f 92       	push	r6
     79e:	7f 92       	push	r7
     7a0:	8f 92       	push	r8
     7a2:	9f 92       	push	r9
     7a4:	af 92       	push	r10
     7a6:	bf 92       	push	r11
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	68 97       	sbiw	r28, 0x18	; 24
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	7c 01       	movw	r14, r24
     7c4:	00 e0       	ldi	r16, 0x00	; 0
     7c6:	1a e0       	ldi	r17, 0x0A	; 10
     7c8:	f8 01       	movw	r30, r16
     7ca:	10 a2       	std	Z+32, r1	; 0x20
     7cc:	11 a2       	std	Z+33, r1	; 0x21
     7ce:	80 e1       	ldi	r24, 0x10	; 16
     7d0:	ed e0       	ldi	r30, 0x0D	; 13
     7d2:	f0 e2       	ldi	r31, 0x20	; 32
     7d4:	de 01       	movw	r26, r28
     7d6:	11 96       	adiw	r26, 0x01	; 1
     7d8:	01 90       	ld	r0, Z+
     7da:	0d 92       	st	X+, r0
     7dc:	8a 95       	dec	r24
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <flashLED+0x40>
     7e0:	88 e0       	ldi	r24, 0x08	; 8
     7e2:	ed e1       	ldi	r30, 0x1D	; 29
     7e4:	f0 e2       	ldi	r31, 0x20	; 32
     7e6:	de 01       	movw	r26, r28
     7e8:	51 96       	adiw	r26, 0x11	; 17
     7ea:	01 90       	ld	r0, Z+
     7ec:	0d 92       	st	X+, r0
     7ee:	8a 95       	dec	r24
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <flashLED+0x52>
     7f2:	f7 01       	movw	r30, r14
     7f4:	ee 0f       	add	r30, r30
     7f6:	ff 1f       	adc	r31, r31
     7f8:	ee 0f       	add	r30, r30
     7fa:	ff 1f       	adc	r31, r31
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	8c 0f       	add	r24, r28
     802:	9d 1f       	adc	r25, r29
     804:	e8 0f       	add	r30, r24
     806:	f9 1f       	adc	r31, r25
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	40 e8       	ldi	r20, 0x80	; 128
     80e:	54 e4       	ldi	r21, 0x44	; 68
     810:	60 81       	ld	r22, Z
     812:	71 81       	ldd	r23, Z+1	; 0x01
     814:	82 81       	ldd	r24, Z+2	; 0x02
     816:	93 81       	ldd	r25, Z+3	; 0x03
     818:	0e 94 19 13 	call	0x2632	; 0x2632 <__mulsf3>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	74 e2       	ldi	r23, 0x24	; 36
     824:	84 ef       	ldi	r24, 0xF4	; 244
     826:	9b e4       	ldi	r25, 0x4B	; 75
     828:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	40 e8       	ldi	r20, 0x80	; 128
     832:	5f e3       	ldi	r21, 0x3F	; 63
     834:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     838:	0e 94 5f 12 	call	0x24be	; 0x24be <__fixunssfsi>
     83c:	f8 01       	movw	r30, r16
     83e:	66 a3       	std	Z+38, r22	; 0x26
     840:	77 a3       	std	Z+39, r23	; 0x27
     842:	66 a1       	ldd	r22, Z+38	; 0x26
     844:	77 a1       	ldd	r23, Z+39	; 0x27
     846:	c6 a0       	ldd	r12, Z+38	; 0x26
     848:	d7 a0       	ldd	r13, Z+39	; 0x27
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
     852:	4b 01       	movw	r8, r22
     854:	5c 01       	movw	r10, r24
     856:	b6 01       	movw	r22, r12
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 8b 12 	call	0x2516	; 0x2516 <__floatunsisf>
     860:	2b 01       	movw	r4, r22
     862:	3c 01       	movw	r6, r24
     864:	ee 0c       	add	r14, r14
     866:	ff 1c       	adc	r15, r15
     868:	e1 e0       	ldi	r30, 0x01	; 1
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	ec 0f       	add	r30, r28
     86e:	fd 1f       	adc	r31, r29
     870:	ee 0d       	add	r30, r14
     872:	ff 1d       	adc	r31, r15
     874:	60 89       	ldd	r22, Z+16	; 0x10
     876:	71 89       	ldd	r23, Z+17	; 0x11
     878:	07 2e       	mov	r0, r23
     87a:	00 0c       	add	r0, r0
     87c:	88 0b       	sbc	r24, r24
     87e:	99 0b       	sbc	r25, r25
     880:	0e 94 8d 12 	call	0x251a	; 0x251a <__floatsisf>
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	48 ec       	ldi	r20, 0xC8	; 200
     88a:	52 e4       	ldi	r21, 0x42	; 66
     88c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
     890:	9b 01       	movw	r18, r22
     892:	ac 01       	movw	r20, r24
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e8       	ldi	r24, 0x80	; 128
     89a:	9f e3       	ldi	r25, 0x3F	; 63
     89c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
     8a0:	9b 01       	movw	r18, r22
     8a2:	ac 01       	movw	r20, r24
     8a4:	c3 01       	movw	r24, r6
     8a6:	b2 01       	movw	r22, r4
     8a8:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
     8ac:	9b 01       	movw	r18, r22
     8ae:	ac 01       	movw	r20, r24
     8b0:	c5 01       	movw	r24, r10
     8b2:	b4 01       	movw	r22, r8
     8b4:	0e 94 92 11 	call	0x2324	; 0x2324 <__subsf3>
     8b8:	0e 94 5f 12 	call	0x24be	; 0x24be <__fixunssfsi>
     8bc:	f8 01       	movw	r30, r16
     8be:	60 a7       	std	Z+40, r22	; 0x28
     8c0:	71 a7       	std	Z+41, r23	; 0x29
     8c2:	80 a5       	ldd	r24, Z+40	; 0x28
     8c4:	91 a5       	ldd	r25, Z+41	; 0x29
     8c6:	82 a7       	std	Z+42, r24	; 0x2a
     8c8:	93 a7       	std	Z+43, r25	; 0x2b
     8ca:	80 a5       	ldd	r24, Z+40	; 0x28
     8cc:	91 a5       	ldd	r25, Z+41	; 0x29
     8ce:	84 a7       	std	Z+44, r24	; 0x2c
     8d0:	95 a7       	std	Z+45, r25	; 0x2d
     8d2:	80 a5       	ldd	r24, Z+40	; 0x28
     8d4:	91 a5       	ldd	r25, Z+41	; 0x29
     8d6:	86 a7       	std	Z+46, r24	; 0x2e
     8d8:	97 a7       	std	Z+47, r25	; 0x2f
     8da:	87 e0       	ldi	r24, 0x07	; 7
     8dc:	80 83       	st	Z, r24
     8de:	68 96       	adiw	r28, 0x18	; 24
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	ff 90       	pop	r15
     8ee:	ef 90       	pop	r14
     8f0:	df 90       	pop	r13
     8f2:	cf 90       	pop	r12
     8f4:	bf 90       	pop	r11
     8f6:	af 90       	pop	r10
     8f8:	9f 90       	pop	r9
     8fa:	8f 90       	pop	r8
     8fc:	7f 90       	pop	r7
     8fe:	6f 90       	pop	r6
     900:	5f 90       	pop	r5
     902:	4f 90       	pop	r4
     904:	08 95       	ret

00000906 <offLED>:

void offLED(void)
{
	TCE0.CTRLA = 0b00000000;
     906:	e0 e0       	ldi	r30, 0x00	; 0
     908:	fa e0       	ldi	r31, 0x0A	; 10
     90a:	10 82       	st	Z, r1
	TCE0.CNT = 0;
     90c:	10 a2       	std	Z+32, r1	; 0x20
     90e:	11 a2       	std	Z+33, r1	; 0x21
     910:	08 95       	ret

00000912 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     912:	1f 92       	push	r1
     914:	0f 92       	push	r0
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	0f 92       	push	r0
     91a:	11 24       	eor	r1, r1
     91c:	08 b6       	in	r0, 0x38	; 56
     91e:	0f 92       	push	r0
     920:	18 be       	out	0x38, r1	; 56
     922:	09 b6       	in	r0, 0x39	; 57
     924:	0f 92       	push	r0
     926:	19 be       	out	0x39, r1	; 57
     928:	0b b6       	in	r0, 0x3b	; 59
     92a:	0f 92       	push	r0
     92c:	1b be       	out	0x3b, r1	; 59
     92e:	2f 93       	push	r18
     930:	3f 93       	push	r19
     932:	4f 93       	push	r20
     934:	5f 93       	push	r21
     936:	6f 93       	push	r22
     938:	7f 93       	push	r23
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	af 93       	push	r26
     940:	bf 93       	push	r27
     942:	ef 93       	push	r30
     944:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     946:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     94a:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     94e:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <adca_callback>
     952:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <adca_callback+0x1>
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	19 95       	eicall
}
     95e:	ff 91       	pop	r31
     960:	ef 91       	pop	r30
     962:	bf 91       	pop	r27
     964:	af 91       	pop	r26
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	7f 91       	pop	r23
     96c:	6f 91       	pop	r22
     96e:	5f 91       	pop	r21
     970:	4f 91       	pop	r20
     972:	3f 91       	pop	r19
     974:	2f 91       	pop	r18
     976:	0f 90       	pop	r0
     978:	0b be       	out	0x3b, r0	; 59
     97a:	0f 90       	pop	r0
     97c:	09 be       	out	0x39, r0	; 57
     97e:	0f 90       	pop	r0
     980:	08 be       	out	0x38, r0	; 56
     982:	0f 90       	pop	r0
     984:	0f be       	out	0x3f, r0	; 63
     986:	0f 90       	pop	r0
     988:	1f 90       	pop	r1
     98a:	18 95       	reti

0000098c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	08 b6       	in	r0, 0x38	; 56
     998:	0f 92       	push	r0
     99a:	18 be       	out	0x38, r1	; 56
     99c:	09 b6       	in	r0, 0x39	; 57
     99e:	0f 92       	push	r0
     9a0:	19 be       	out	0x39, r1	; 57
     9a2:	0b b6       	in	r0, 0x3b	; 59
     9a4:	0f 92       	push	r0
     9a6:	1b be       	out	0x3b, r1	; 59
     9a8:	2f 93       	push	r18
     9aa:	3f 93       	push	r19
     9ac:	4f 93       	push	r20
     9ae:	5f 93       	push	r21
     9b0:	6f 93       	push	r22
     9b2:	7f 93       	push	r23
     9b4:	8f 93       	push	r24
     9b6:	9f 93       	push	r25
     9b8:	af 93       	push	r26
     9ba:	bf 93       	push	r27
     9bc:	ef 93       	push	r30
     9be:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     9c0:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     9c4:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     9c8:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <adca_callback>
     9cc:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <adca_callback+0x1>
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	19 95       	eicall
}
     9d8:	ff 91       	pop	r31
     9da:	ef 91       	pop	r30
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	0b be       	out	0x3b, r0	; 59
     9f4:	0f 90       	pop	r0
     9f6:	09 be       	out	0x39, r0	; 57
     9f8:	0f 90       	pop	r0
     9fa:	08 be       	out	0x38, r0	; 56
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     a06:	1f 92       	push	r1
     a08:	0f 92       	push	r0
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	0f 92       	push	r0
     a0e:	11 24       	eor	r1, r1
     a10:	08 b6       	in	r0, 0x38	; 56
     a12:	0f 92       	push	r0
     a14:	18 be       	out	0x38, r1	; 56
     a16:	09 b6       	in	r0, 0x39	; 57
     a18:	0f 92       	push	r0
     a1a:	19 be       	out	0x39, r1	; 57
     a1c:	0b b6       	in	r0, 0x3b	; 59
     a1e:	0f 92       	push	r0
     a20:	1b be       	out	0x3b, r1	; 59
     a22:	2f 93       	push	r18
     a24:	3f 93       	push	r19
     a26:	4f 93       	push	r20
     a28:	5f 93       	push	r21
     a2a:	6f 93       	push	r22
     a2c:	7f 93       	push	r23
     a2e:	8f 93       	push	r24
     a30:	9f 93       	push	r25
     a32:	af 93       	push	r26
     a34:	bf 93       	push	r27
     a36:	ef 93       	push	r30
     a38:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     a3a:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     a3e:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     a42:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <adca_callback>
     a46:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <adca_callback+0x1>
     a4a:	64 e0       	ldi	r22, 0x04	; 4
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	19 95       	eicall
}
     a52:	ff 91       	pop	r31
     a54:	ef 91       	pop	r30
     a56:	bf 91       	pop	r27
     a58:	af 91       	pop	r26
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	7f 91       	pop	r23
     a60:	6f 91       	pop	r22
     a62:	5f 91       	pop	r21
     a64:	4f 91       	pop	r20
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	0f 90       	pop	r0
     a6c:	0b be       	out	0x3b, r0	; 59
     a6e:	0f 90       	pop	r0
     a70:	09 be       	out	0x39, r0	; 57
     a72:	0f 90       	pop	r0
     a74:	08 be       	out	0x38, r0	; 56
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	0f 90       	pop	r0
     a7c:	1f 90       	pop	r1
     a7e:	18 95       	reti

00000a80 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	08 b6       	in	r0, 0x38	; 56
     a8c:	0f 92       	push	r0
     a8e:	18 be       	out	0x38, r1	; 56
     a90:	09 b6       	in	r0, 0x39	; 57
     a92:	0f 92       	push	r0
     a94:	19 be       	out	0x39, r1	; 57
     a96:	0b b6       	in	r0, 0x3b	; 59
     a98:	0f 92       	push	r0
     a9a:	1b be       	out	0x3b, r1	; 59
     a9c:	2f 93       	push	r18
     a9e:	3f 93       	push	r19
     aa0:	4f 93       	push	r20
     aa2:	5f 93       	push	r21
     aa4:	6f 93       	push	r22
     aa6:	7f 93       	push	r23
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	af 93       	push	r26
     aae:	bf 93       	push	r27
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     ab4:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     ab8:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     abc:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <adca_callback>
     ac0:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <adca_callback+0x1>
     ac4:	68 e0       	ldi	r22, 0x08	; 8
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	19 95       	eicall
}
     acc:	ff 91       	pop	r31
     ace:	ef 91       	pop	r30
     ad0:	bf 91       	pop	r27
     ad2:	af 91       	pop	r26
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	7f 91       	pop	r23
     ada:	6f 91       	pop	r22
     adc:	5f 91       	pop	r21
     ade:	4f 91       	pop	r20
     ae0:	3f 91       	pop	r19
     ae2:	2f 91       	pop	r18
     ae4:	0f 90       	pop	r0
     ae6:	0b be       	out	0x3b, r0	; 59
     ae8:	0f 90       	pop	r0
     aea:	09 be       	out	0x39, r0	; 57
     aec:	0f 90       	pop	r0
     aee:	08 be       	out	0x38, r0	; 56
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     afa:	1f 92       	push	r1
     afc:	0f 92       	push	r0
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	0f 92       	push	r0
     b02:	11 24       	eor	r1, r1
     b04:	08 b6       	in	r0, 0x38	; 56
     b06:	0f 92       	push	r0
     b08:	18 be       	out	0x38, r1	; 56
     b0a:	09 b6       	in	r0, 0x39	; 57
     b0c:	0f 92       	push	r0
     b0e:	19 be       	out	0x39, r1	; 57
     b10:	0b b6       	in	r0, 0x3b	; 59
     b12:	0f 92       	push	r0
     b14:	1b be       	out	0x3b, r1	; 59
     b16:	2f 93       	push	r18
     b18:	3f 93       	push	r19
     b1a:	4f 93       	push	r20
     b1c:	5f 93       	push	r21
     b1e:	6f 93       	push	r22
     b20:	7f 93       	push	r23
     b22:	8f 93       	push	r24
     b24:	9f 93       	push	r25
     b26:	af 93       	push	r26
     b28:	bf 93       	push	r27
     b2a:	ef 93       	push	r30
     b2c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     b2e:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     b32:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     b36:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <adcb_callback>
     b3a:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <adcb_callback+0x1>
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	80 e4       	ldi	r24, 0x40	; 64
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	19 95       	eicall
}
     b46:	ff 91       	pop	r31
     b48:	ef 91       	pop	r30
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	0f 90       	pop	r0
     b60:	0b be       	out	0x3b, r0	; 59
     b62:	0f 90       	pop	r0
     b64:	09 be       	out	0x39, r0	; 57
     b66:	0f 90       	pop	r0
     b68:	08 be       	out	0x38, r0	; 56
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     b74:	1f 92       	push	r1
     b76:	0f 92       	push	r0
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	0f 92       	push	r0
     b7c:	11 24       	eor	r1, r1
     b7e:	08 b6       	in	r0, 0x38	; 56
     b80:	0f 92       	push	r0
     b82:	18 be       	out	0x38, r1	; 56
     b84:	09 b6       	in	r0, 0x39	; 57
     b86:	0f 92       	push	r0
     b88:	19 be       	out	0x39, r1	; 57
     b8a:	0b b6       	in	r0, 0x3b	; 59
     b8c:	0f 92       	push	r0
     b8e:	1b be       	out	0x3b, r1	; 59
     b90:	2f 93       	push	r18
     b92:	3f 93       	push	r19
     b94:	4f 93       	push	r20
     b96:	5f 93       	push	r21
     b98:	6f 93       	push	r22
     b9a:	7f 93       	push	r23
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	af 93       	push	r26
     ba2:	bf 93       	push	r27
     ba4:	ef 93       	push	r30
     ba6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     ba8:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     bac:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     bb0:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <adcb_callback>
     bb4:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <adcb_callback+0x1>
     bb8:	62 e0       	ldi	r22, 0x02	; 2
     bba:	80 e4       	ldi	r24, 0x40	; 64
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	19 95       	eicall
}
     bc0:	ff 91       	pop	r31
     bc2:	ef 91       	pop	r30
     bc4:	bf 91       	pop	r27
     bc6:	af 91       	pop	r26
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	7f 91       	pop	r23
     bce:	6f 91       	pop	r22
     bd0:	5f 91       	pop	r21
     bd2:	4f 91       	pop	r20
     bd4:	3f 91       	pop	r19
     bd6:	2f 91       	pop	r18
     bd8:	0f 90       	pop	r0
     bda:	0b be       	out	0x3b, r0	; 59
     bdc:	0f 90       	pop	r0
     bde:	09 be       	out	0x39, r0	; 57
     be0:	0f 90       	pop	r0
     be2:	08 be       	out	0x38, r0	; 56
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	08 b6       	in	r0, 0x38	; 56
     bfa:	0f 92       	push	r0
     bfc:	18 be       	out	0x38, r1	; 56
     bfe:	09 b6       	in	r0, 0x39	; 57
     c00:	0f 92       	push	r0
     c02:	19 be       	out	0x39, r1	; 57
     c04:	0b b6       	in	r0, 0x3b	; 59
     c06:	0f 92       	push	r0
     c08:	1b be       	out	0x3b, r1	; 59
     c0a:	2f 93       	push	r18
     c0c:	3f 93       	push	r19
     c0e:	4f 93       	push	r20
     c10:	5f 93       	push	r21
     c12:	6f 93       	push	r22
     c14:	7f 93       	push	r23
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	af 93       	push	r26
     c1c:	bf 93       	push	r27
     c1e:	ef 93       	push	r30
     c20:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     c22:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     c26:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     c2a:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <adcb_callback>
     c2e:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <adcb_callback+0x1>
     c32:	64 e0       	ldi	r22, 0x04	; 4
     c34:	80 e4       	ldi	r24, 0x40	; 64
     c36:	92 e0       	ldi	r25, 0x02	; 2
     c38:	19 95       	eicall
}
     c3a:	ff 91       	pop	r31
     c3c:	ef 91       	pop	r30
     c3e:	bf 91       	pop	r27
     c40:	af 91       	pop	r26
     c42:	9f 91       	pop	r25
     c44:	8f 91       	pop	r24
     c46:	7f 91       	pop	r23
     c48:	6f 91       	pop	r22
     c4a:	5f 91       	pop	r21
     c4c:	4f 91       	pop	r20
     c4e:	3f 91       	pop	r19
     c50:	2f 91       	pop	r18
     c52:	0f 90       	pop	r0
     c54:	0b be       	out	0x3b, r0	; 59
     c56:	0f 90       	pop	r0
     c58:	09 be       	out	0x39, r0	; 57
     c5a:	0f 90       	pop	r0
     c5c:	08 be       	out	0x38, r0	; 56
     c5e:	0f 90       	pop	r0
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	0f 90       	pop	r0
     c64:	1f 90       	pop	r1
     c66:	18 95       	reti

00000c68 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     c68:	1f 92       	push	r1
     c6a:	0f 92       	push	r0
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	0f 92       	push	r0
     c70:	11 24       	eor	r1, r1
     c72:	08 b6       	in	r0, 0x38	; 56
     c74:	0f 92       	push	r0
     c76:	18 be       	out	0x38, r1	; 56
     c78:	09 b6       	in	r0, 0x39	; 57
     c7a:	0f 92       	push	r0
     c7c:	19 be       	out	0x39, r1	; 57
     c7e:	0b b6       	in	r0, 0x3b	; 59
     c80:	0f 92       	push	r0
     c82:	1b be       	out	0x3b, r1	; 59
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     c9c:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     ca0:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     ca4:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <adcb_callback>
     ca8:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <adcb_callback+0x1>
     cac:	68 e0       	ldi	r22, 0x08	; 8
     cae:	80 e4       	ldi	r24, 0x40	; 64
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	19 95       	eicall
}
     cb4:	ff 91       	pop	r31
     cb6:	ef 91       	pop	r30
     cb8:	bf 91       	pop	r27
     cba:	af 91       	pop	r26
     cbc:	9f 91       	pop	r25
     cbe:	8f 91       	pop	r24
     cc0:	7f 91       	pop	r23
     cc2:	6f 91       	pop	r22
     cc4:	5f 91       	pop	r21
     cc6:	4f 91       	pop	r20
     cc8:	3f 91       	pop	r19
     cca:	2f 91       	pop	r18
     ccc:	0f 90       	pop	r0
     cce:	0b be       	out	0x3b, r0	; 59
     cd0:	0f 90       	pop	r0
     cd2:	09 be       	out	0x39, r0	; 57
     cd4:	0f 90       	pop	r0
     cd6:	08 be       	out	0x38, r0	; 56
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	0f 90       	pop	r0
     cde:	1f 90       	pop	r1
     ce0:	18 95       	reti

00000ce2 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     ce2:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     ce4:	80 91 7e 20 	lds	r24, 0x207E	; 0x80207e <stdio_base>
     ce8:	90 91 7f 20 	lds	r25, 0x207F	; 0x80207f <stdio_base+0x1>
     cec:	e0 91 7c 20 	lds	r30, 0x207C	; 0x80207c <ptr_put>
     cf0:	f0 91 7d 20 	lds	r31, 0x207D	; 0x80207d <ptr_put+0x1>
     cf4:	19 95       	eicall
     cf6:	99 23       	and	r25, r25
     cf8:	1c f0       	brlt	.+6      	; 0xd00 <_write+0x1e>
		return -1;
	}
	return 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     d00:	8f ef       	ldi	r24, 0xFF	; 255
     d02:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     d04:	08 95       	ret

00000d06 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     d06:	8f ef       	ldi	r24, 0xFF	; 255
     d08:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     d0c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     d10:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     d14:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     d18:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     d1c:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     d20:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d24:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     d26:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     d28:	e0 e5       	ldi	r30, 0x50	; 80
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	82 60       	ori	r24, 0x02	; 2
     d30:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d32:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     d34:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     d36:	81 ff       	sbrs	r24, 1
     d38:	fd cf       	rjmp	.-6      	; 0xd34 <sysclk_init+0x2e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	80 e4       	ldi	r24, 0x40	; 64
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 1e 10 	call	0x203c	; 0x203c <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d44:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     d46:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     d48:	e0 e5       	ldi	r30, 0x50	; 80
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8e 7f       	andi	r24, 0xFE	; 254
     d50:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d52:	9f bf       	out	0x3f, r25	; 63
     d54:	08 95       	ret

00000d56 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d56:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     d58:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     d5a:	e8 2f       	mov	r30, r24
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	e0 59       	subi	r30, 0x90	; 144
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	60 95       	com	r22
     d64:	80 81       	ld	r24, Z
     d66:	68 23       	and	r22, r24
     d68:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     d6a:	9f bf       	out	0x3f, r25	; 63
     d6c:	08 95       	ret

00000d6e <__vector_10>:
/**
 * \internal
 * \brief Overflow interrupt handling high counter
 */
ISR(RTC_OVF_vect)
{
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	08 b6       	in	r0, 0x38	; 56
     d7a:	0f 92       	push	r0
     d7c:	18 be       	out	0x38, r1	; 56
     d7e:	0b b6       	in	r0, 0x3b	; 59
     d80:	0f 92       	push	r0
     d82:	1b be       	out	0x3b, r1	; 59
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	ef 93       	push	r30
     d8a:	ff 93       	push	r31
	rtc_data.counter_high++;
     d8c:	e0 e8       	ldi	r30, 0x80	; 128
     d8e:	f0 e2       	ldi	r31, 0x20	; 32
     d90:	80 81       	ld	r24, Z
     d92:	91 81       	ldd	r25, Z+1	; 0x01
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	80 83       	st	Z, r24
     d98:	91 83       	std	Z+1, r25	; 0x01
}
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	9f 91       	pop	r25
     da0:	8f 91       	pop	r24
     da2:	0f 90       	pop	r0
     da4:	0b be       	out	0x3b, r0	; 59
     da6:	0f 90       	pop	r0
     da8:	08 be       	out	0x38, r0	; 56
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	0f 90       	pop	r0
     db0:	1f 90       	pop	r1
     db2:	18 95       	reti

00000db4 <__vector_11>:
/**
 * \internal
 * \brief Compare interrupt used for alarm
 */
ISR(RTC_COMP_vect)
{
     db4:	1f 92       	push	r1
     db6:	0f 92       	push	r0
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	0f 92       	push	r0
     dbc:	11 24       	eor	r1, r1
     dbe:	08 b6       	in	r0, 0x38	; 56
     dc0:	0f 92       	push	r0
     dc2:	18 be       	out	0x38, r1	; 56
     dc4:	09 b6       	in	r0, 0x39	; 57
     dc6:	0f 92       	push	r0
     dc8:	19 be       	out	0x39, r1	; 57
     dca:	0b b6       	in	r0, 0x3b	; 59
     dcc:	0f 92       	push	r0
     dce:	1b be       	out	0x3b, r1	; 59
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
     df4:	e0 e8       	ldi	r30, 0x80	; 128
     df6:	f0 e2       	ldi	r31, 0x20	; 32
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	22 81       	ldd	r18, Z+2	; 0x02
     dfe:	33 81       	ldd	r19, Z+3	; 0x03
     e00:	82 17       	cp	r24, r18
     e02:	93 07       	cpc	r25, r19
     e04:	f0 f1       	brcs	.+124    	; 0xe82 <__vector_11+0xce>
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
     e06:	21 e0       	ldi	r18, 0x01	; 1
     e08:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <__TEXT_REGION_LENGTH__+0x700402>
		if (rtc_data.callback) {
     e0c:	e0 91 86 20 	lds	r30, 0x2086	; 0x802086 <rtc_data+0x6>
     e10:	f0 91 87 20 	lds	r31, 0x2087	; 0x802087 <rtc_data+0x7>
     e14:	30 97       	sbiw	r30, 0x00	; 0
     e16:	a9 f1       	breq	.+106    	; 0xe82 <__vector_11+0xce>
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
					| RTC.CNT;
     e18:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x700408>
     e1c:	70 91 09 04 	lds	r23, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x700409>
ISR(RTC_COMP_vect)
{
	if (rtc_data.counter_high >= rtc_data.alarm_high) {
		RTC.INTCTRL = RTC_OVERFLOW_INT_LEVEL;
		if (rtc_data.callback) {
			uint32_t count = ((uint32_t)rtc_data.counter_high << 16)
     e20:	a0 e0       	ldi	r26, 0x00	; 0
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	dc 01       	movw	r26, r24
     e26:	99 27       	eor	r25, r25
     e28:	88 27       	eor	r24, r24
     e2a:	ab 01       	movw	r20, r22
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	8c 01       	movw	r16, r24
     e32:	9d 01       	movw	r18, r26
     e34:	04 2b       	or	r16, r20
     e36:	15 2b       	or	r17, r21
     e38:	26 2b       	or	r18, r22
     e3a:	37 2b       	or	r19, r23
     e3c:	c9 01       	movw	r24, r18
     e3e:	b8 01       	movw	r22, r16
					| RTC.CNT;
			uint32_t alarm = ((uint32_t)rtc_data.alarm_high << 16)
     e40:	a0 e8       	ldi	r26, 0x80	; 128
     e42:	b0 e2       	ldi	r27, 0x20	; 32
     e44:	12 96       	adiw	r26, 0x02	; 2
     e46:	0d 91       	ld	r16, X+
     e48:	1c 91       	ld	r17, X
     e4a:	13 97       	sbiw	r26, 0x03	; 3
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	98 01       	movw	r18, r16
     e52:	11 27       	eor	r17, r17
     e54:	00 27       	eor	r16, r16
     e56:	14 96       	adiw	r26, 0x04	; 4
     e58:	cd 90       	ld	r12, X+
     e5a:	dc 90       	ld	r13, X
     e5c:	15 97       	sbiw	r26, 0x05	; 5
     e5e:	e1 2c       	mov	r14, r1
     e60:	f1 2c       	mov	r15, r1
     e62:	0c 29       	or	r16, r12
     e64:	1d 29       	or	r17, r13
     e66:	2e 29       	or	r18, r14
     e68:	3f 29       	or	r19, r15
					| rtc_data.alarm_low;
			/* Workaround for errata. Count might not be updated
			 * when waking up from sleep, so in this case use alarm
			 * time plus one.
			 */
			if (alarm >= count)
     e6a:	06 17       	cp	r16, r22
     e6c:	17 07       	cpc	r17, r23
     e6e:	28 07       	cpc	r18, r24
     e70:	39 07       	cpc	r19, r25
     e72:	30 f0       	brcs	.+12     	; 0xe80 <__vector_11+0xcc>
				count = alarm + 1;
     e74:	c9 01       	movw	r24, r18
     e76:	b8 01       	movw	r22, r16
     e78:	6f 5f       	subi	r22, 0xFF	; 255
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
     e7c:	8f 4f       	sbci	r24, 0xFF	; 255
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
			rtc_data.callback(count);
     e80:	19 95       	eicall
		}
	}
}
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	bf 91       	pop	r27
     e88:	af 91       	pop	r26
     e8a:	9f 91       	pop	r25
     e8c:	8f 91       	pop	r24
     e8e:	7f 91       	pop	r23
     e90:	6f 91       	pop	r22
     e92:	5f 91       	pop	r21
     e94:	4f 91       	pop	r20
     e96:	3f 91       	pop	r19
     e98:	2f 91       	pop	r18
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	0f 90       	pop	r0
     ea8:	0b be       	out	0x3b, r0	; 59
     eaa:	0f 90       	pop	r0
     eac:	09 be       	out	0x39, r0	; 57
     eae:	0f 90       	pop	r0
     eb0:	08 be       	out	0x38, r0	; 56
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	0f 90       	pop	r0
     eb8:	1f 90       	pop	r1
     eba:	18 95       	reti

00000ebc <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     ebc:	1f 92       	push	r1
     ebe:	0f 92       	push	r0
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	0f 92       	push	r0
     ec4:	11 24       	eor	r1, r1
     ec6:	08 b6       	in	r0, 0x38	; 56
     ec8:	0f 92       	push	r0
     eca:	18 be       	out	0x38, r1	; 56
     ecc:	09 b6       	in	r0, 0x39	; 57
     ece:	0f 92       	push	r0
     ed0:	19 be       	out	0x39, r1	; 57
     ed2:	0b b6       	in	r0, 0x3b	; 59
     ed4:	0f 92       	push	r0
     ed6:	1b be       	out	0x3b, r1	; 59
     ed8:	2f 93       	push	r18
     eda:	3f 93       	push	r19
     edc:	4f 93       	push	r20
     ede:	5f 93       	push	r21
     ee0:	6f 93       	push	r22
     ee2:	7f 93       	push	r23
     ee4:	8f 93       	push	r24
     ee6:	9f 93       	push	r25
     ee8:	af 93       	push	r26
     eea:	bf 93       	push	r27
     eec:	ef 93       	push	r30
     eee:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     ef0:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <tc_tcc0_ovf_callback>
     ef4:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <tc_tcc0_ovf_callback+0x1>
     ef8:	30 97       	sbiw	r30, 0x00	; 0
     efa:	09 f0       	breq	.+2      	; 0xefe <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     efc:	19 95       	eicall
	}
}
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0b be       	out	0x3b, r0	; 59
     f1a:	0f 90       	pop	r0
     f1c:	09 be       	out	0x39, r0	; 57
     f1e:	0f 90       	pop	r0
     f20:	08 be       	out	0x38, r0	; 56
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	08 b6       	in	r0, 0x38	; 56
     f38:	0f 92       	push	r0
     f3a:	18 be       	out	0x38, r1	; 56
     f3c:	09 b6       	in	r0, 0x39	; 57
     f3e:	0f 92       	push	r0
     f40:	19 be       	out	0x39, r1	; 57
     f42:	0b b6       	in	r0, 0x3b	; 59
     f44:	0f 92       	push	r0
     f46:	1b be       	out	0x3b, r1	; 59
     f48:	2f 93       	push	r18
     f4a:	3f 93       	push	r19
     f4c:	4f 93       	push	r20
     f4e:	5f 93       	push	r21
     f50:	6f 93       	push	r22
     f52:	7f 93       	push	r23
     f54:	8f 93       	push	r24
     f56:	9f 93       	push	r25
     f58:	af 93       	push	r26
     f5a:	bf 93       	push	r27
     f5c:	ef 93       	push	r30
     f5e:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     f60:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <tc_tcc0_err_callback>
     f64:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <tc_tcc0_err_callback+0x1>
     f68:	30 97       	sbiw	r30, 0x00	; 0
     f6a:	09 f0       	breq	.+2      	; 0xf6e <__vector_15+0x42>
		tc_tcc0_err_callback();
     f6c:	19 95       	eicall
	}
}
     f6e:	ff 91       	pop	r31
     f70:	ef 91       	pop	r30
     f72:	bf 91       	pop	r27
     f74:	af 91       	pop	r26
     f76:	9f 91       	pop	r25
     f78:	8f 91       	pop	r24
     f7a:	7f 91       	pop	r23
     f7c:	6f 91       	pop	r22
     f7e:	5f 91       	pop	r21
     f80:	4f 91       	pop	r20
     f82:	3f 91       	pop	r19
     f84:	2f 91       	pop	r18
     f86:	0f 90       	pop	r0
     f88:	0b be       	out	0x3b, r0	; 59
     f8a:	0f 90       	pop	r0
     f8c:	09 be       	out	0x39, r0	; 57
     f8e:	0f 90       	pop	r0
     f90:	08 be       	out	0x38, r0	; 56
     f92:	0f 90       	pop	r0
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	0f 90       	pop	r0
     f98:	1f 90       	pop	r1
     f9a:	18 95       	reti

00000f9c <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     f9c:	1f 92       	push	r1
     f9e:	0f 92       	push	r0
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	08 b6       	in	r0, 0x38	; 56
     fa8:	0f 92       	push	r0
     faa:	18 be       	out	0x38, r1	; 56
     fac:	09 b6       	in	r0, 0x39	; 57
     fae:	0f 92       	push	r0
     fb0:	19 be       	out	0x39, r1	; 57
     fb2:	0b b6       	in	r0, 0x3b	; 59
     fb4:	0f 92       	push	r0
     fb6:	1b be       	out	0x3b, r1	; 59
     fb8:	2f 93       	push	r18
     fba:	3f 93       	push	r19
     fbc:	4f 93       	push	r20
     fbe:	5f 93       	push	r21
     fc0:	6f 93       	push	r22
     fc2:	7f 93       	push	r23
     fc4:	8f 93       	push	r24
     fc6:	9f 93       	push	r25
     fc8:	af 93       	push	r26
     fca:	bf 93       	push	r27
     fcc:	ef 93       	push	r30
     fce:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     fd0:	e0 91 70 20 	lds	r30, 0x2070	; 0x802070 <tc_tcc0_cca_callback>
     fd4:	f0 91 71 20 	lds	r31, 0x2071	; 0x802071 <tc_tcc0_cca_callback+0x1>
     fd8:	30 97       	sbiw	r30, 0x00	; 0
     fda:	09 f0       	breq	.+2      	; 0xfde <__vector_16+0x42>
		tc_tcc0_cca_callback();
     fdc:	19 95       	eicall
	}
}
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0b be       	out	0x3b, r0	; 59
     ffa:	0f 90       	pop	r0
     ffc:	09 be       	out	0x39, r0	; 57
     ffe:	0f 90       	pop	r0
    1000:	08 be       	out	0x38, r0	; 56
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	0f 90       	pop	r0
    1008:	1f 90       	pop	r1
    100a:	18 95       	reti

0000100c <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    100c:	1f 92       	push	r1
    100e:	0f 92       	push	r0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	0f 92       	push	r0
    1014:	11 24       	eor	r1, r1
    1016:	08 b6       	in	r0, 0x38	; 56
    1018:	0f 92       	push	r0
    101a:	18 be       	out	0x38, r1	; 56
    101c:	09 b6       	in	r0, 0x39	; 57
    101e:	0f 92       	push	r0
    1020:	19 be       	out	0x39, r1	; 57
    1022:	0b b6       	in	r0, 0x3b	; 59
    1024:	0f 92       	push	r0
    1026:	1b be       	out	0x3b, r1	; 59
    1028:	2f 93       	push	r18
    102a:	3f 93       	push	r19
    102c:	4f 93       	push	r20
    102e:	5f 93       	push	r21
    1030:	6f 93       	push	r22
    1032:	7f 93       	push	r23
    1034:	8f 93       	push	r24
    1036:	9f 93       	push	r25
    1038:	af 93       	push	r26
    103a:	bf 93       	push	r27
    103c:	ef 93       	push	r30
    103e:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    1040:	e0 91 6e 20 	lds	r30, 0x206E	; 0x80206e <tc_tcc0_ccb_callback>
    1044:	f0 91 6f 20 	lds	r31, 0x206F	; 0x80206f <tc_tcc0_ccb_callback+0x1>
    1048:	30 97       	sbiw	r30, 0x00	; 0
    104a:	09 f0       	breq	.+2      	; 0x104e <__vector_17+0x42>
		tc_tcc0_ccb_callback();
    104c:	19 95       	eicall
	}
}
    104e:	ff 91       	pop	r31
    1050:	ef 91       	pop	r30
    1052:	bf 91       	pop	r27
    1054:	af 91       	pop	r26
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	7f 91       	pop	r23
    105c:	6f 91       	pop	r22
    105e:	5f 91       	pop	r21
    1060:	4f 91       	pop	r20
    1062:	3f 91       	pop	r19
    1064:	2f 91       	pop	r18
    1066:	0f 90       	pop	r0
    1068:	0b be       	out	0x3b, r0	; 59
    106a:	0f 90       	pop	r0
    106c:	09 be       	out	0x39, r0	; 57
    106e:	0f 90       	pop	r0
    1070:	08 be       	out	0x38, r0	; 56
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	11 24       	eor	r1, r1
    1086:	08 b6       	in	r0, 0x38	; 56
    1088:	0f 92       	push	r0
    108a:	18 be       	out	0x38, r1	; 56
    108c:	09 b6       	in	r0, 0x39	; 57
    108e:	0f 92       	push	r0
    1090:	19 be       	out	0x39, r1	; 57
    1092:	0b b6       	in	r0, 0x3b	; 59
    1094:	0f 92       	push	r0
    1096:	1b be       	out	0x3b, r1	; 59
    1098:	2f 93       	push	r18
    109a:	3f 93       	push	r19
    109c:	4f 93       	push	r20
    109e:	5f 93       	push	r21
    10a0:	6f 93       	push	r22
    10a2:	7f 93       	push	r23
    10a4:	8f 93       	push	r24
    10a6:	9f 93       	push	r25
    10a8:	af 93       	push	r26
    10aa:	bf 93       	push	r27
    10ac:	ef 93       	push	r30
    10ae:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    10b0:	e0 91 6c 20 	lds	r30, 0x206C	; 0x80206c <tc_tcc0_ccc_callback>
    10b4:	f0 91 6d 20 	lds	r31, 0x206D	; 0x80206d <tc_tcc0_ccc_callback+0x1>
    10b8:	30 97       	sbiw	r30, 0x00	; 0
    10ba:	09 f0       	breq	.+2      	; 0x10be <__vector_18+0x42>
		tc_tcc0_ccc_callback();
    10bc:	19 95       	eicall
	}
}
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0b be       	out	0x3b, r0	; 59
    10da:	0f 90       	pop	r0
    10dc:	09 be       	out	0x39, r0	; 57
    10de:	0f 90       	pop	r0
    10e0:	08 be       	out	0x38, r0	; 56
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	08 b6       	in	r0, 0x38	; 56
    10f8:	0f 92       	push	r0
    10fa:	18 be       	out	0x38, r1	; 56
    10fc:	09 b6       	in	r0, 0x39	; 57
    10fe:	0f 92       	push	r0
    1100:	19 be       	out	0x39, r1	; 57
    1102:	0b b6       	in	r0, 0x3b	; 59
    1104:	0f 92       	push	r0
    1106:	1b be       	out	0x3b, r1	; 59
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    1120:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <tc_tcc0_ccd_callback>
    1124:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <tc_tcc0_ccd_callback+0x1>
    1128:	30 97       	sbiw	r30, 0x00	; 0
    112a:	09 f0       	breq	.+2      	; 0x112e <__vector_19+0x42>
		tc_tcc0_ccd_callback();
    112c:	19 95       	eicall
	}
}
    112e:	ff 91       	pop	r31
    1130:	ef 91       	pop	r30
    1132:	bf 91       	pop	r27
    1134:	af 91       	pop	r26
    1136:	9f 91       	pop	r25
    1138:	8f 91       	pop	r24
    113a:	7f 91       	pop	r23
    113c:	6f 91       	pop	r22
    113e:	5f 91       	pop	r21
    1140:	4f 91       	pop	r20
    1142:	3f 91       	pop	r19
    1144:	2f 91       	pop	r18
    1146:	0f 90       	pop	r0
    1148:	0b be       	out	0x3b, r0	; 59
    114a:	0f 90       	pop	r0
    114c:	09 be       	out	0x39, r0	; 57
    114e:	0f 90       	pop	r0
    1150:	08 be       	out	0x38, r0	; 56
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	08 b6       	in	r0, 0x38	; 56
    1168:	0f 92       	push	r0
    116a:	18 be       	out	0x38, r1	; 56
    116c:	09 b6       	in	r0, 0x39	; 57
    116e:	0f 92       	push	r0
    1170:	19 be       	out	0x39, r1	; 57
    1172:	0b b6       	in	r0, 0x3b	; 59
    1174:	0f 92       	push	r0
    1176:	1b be       	out	0x3b, r1	; 59
    1178:	2f 93       	push	r18
    117a:	3f 93       	push	r19
    117c:	4f 93       	push	r20
    117e:	5f 93       	push	r21
    1180:	6f 93       	push	r22
    1182:	7f 93       	push	r23
    1184:	8f 93       	push	r24
    1186:	9f 93       	push	r25
    1188:	af 93       	push	r26
    118a:	bf 93       	push	r27
    118c:	ef 93       	push	r30
    118e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    1190:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <tc_tcc1_ovf_callback>
    1194:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <tc_tcc1_ovf_callback+0x1>
    1198:	30 97       	sbiw	r30, 0x00	; 0
    119a:	09 f0       	breq	.+2      	; 0x119e <__vector_20+0x42>
		tc_tcc1_ovf_callback();
    119c:	19 95       	eicall
	}
}
    119e:	ff 91       	pop	r31
    11a0:	ef 91       	pop	r30
    11a2:	bf 91       	pop	r27
    11a4:	af 91       	pop	r26
    11a6:	9f 91       	pop	r25
    11a8:	8f 91       	pop	r24
    11aa:	7f 91       	pop	r23
    11ac:	6f 91       	pop	r22
    11ae:	5f 91       	pop	r21
    11b0:	4f 91       	pop	r20
    11b2:	3f 91       	pop	r19
    11b4:	2f 91       	pop	r18
    11b6:	0f 90       	pop	r0
    11b8:	0b be       	out	0x3b, r0	; 59
    11ba:	0f 90       	pop	r0
    11bc:	09 be       	out	0x39, r0	; 57
    11be:	0f 90       	pop	r0
    11c0:	08 be       	out	0x38, r0	; 56
    11c2:	0f 90       	pop	r0
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	0f 90       	pop	r0
    11c8:	1f 90       	pop	r1
    11ca:	18 95       	reti

000011cc <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	08 b6       	in	r0, 0x38	; 56
    11d8:	0f 92       	push	r0
    11da:	18 be       	out	0x38, r1	; 56
    11dc:	09 b6       	in	r0, 0x39	; 57
    11de:	0f 92       	push	r0
    11e0:	19 be       	out	0x39, r1	; 57
    11e2:	0b b6       	in	r0, 0x3b	; 59
    11e4:	0f 92       	push	r0
    11e6:	1b be       	out	0x3b, r1	; 59
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	4f 93       	push	r20
    11ee:	5f 93       	push	r21
    11f0:	6f 93       	push	r22
    11f2:	7f 93       	push	r23
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	af 93       	push	r26
    11fa:	bf 93       	push	r27
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1200:	e0 91 66 20 	lds	r30, 0x2066	; 0x802066 <tc_tcc1_err_callback>
    1204:	f0 91 67 20 	lds	r31, 0x2067	; 0x802067 <tc_tcc1_err_callback+0x1>
    1208:	30 97       	sbiw	r30, 0x00	; 0
    120a:	09 f0       	breq	.+2      	; 0x120e <__vector_21+0x42>
		tc_tcc1_err_callback();
    120c:	19 95       	eicall
	}
}
    120e:	ff 91       	pop	r31
    1210:	ef 91       	pop	r30
    1212:	bf 91       	pop	r27
    1214:	af 91       	pop	r26
    1216:	9f 91       	pop	r25
    1218:	8f 91       	pop	r24
    121a:	7f 91       	pop	r23
    121c:	6f 91       	pop	r22
    121e:	5f 91       	pop	r21
    1220:	4f 91       	pop	r20
    1222:	3f 91       	pop	r19
    1224:	2f 91       	pop	r18
    1226:	0f 90       	pop	r0
    1228:	0b be       	out	0x3b, r0	; 59
    122a:	0f 90       	pop	r0
    122c:	09 be       	out	0x39, r0	; 57
    122e:	0f 90       	pop	r0
    1230:	08 be       	out	0x38, r0	; 56
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	0f 90       	pop	r0
    1238:	1f 90       	pop	r1
    123a:	18 95       	reti

0000123c <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    123c:	1f 92       	push	r1
    123e:	0f 92       	push	r0
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	0f 92       	push	r0
    1244:	11 24       	eor	r1, r1
    1246:	08 b6       	in	r0, 0x38	; 56
    1248:	0f 92       	push	r0
    124a:	18 be       	out	0x38, r1	; 56
    124c:	09 b6       	in	r0, 0x39	; 57
    124e:	0f 92       	push	r0
    1250:	19 be       	out	0x39, r1	; 57
    1252:	0b b6       	in	r0, 0x3b	; 59
    1254:	0f 92       	push	r0
    1256:	1b be       	out	0x3b, r1	; 59
    1258:	2f 93       	push	r18
    125a:	3f 93       	push	r19
    125c:	4f 93       	push	r20
    125e:	5f 93       	push	r21
    1260:	6f 93       	push	r22
    1262:	7f 93       	push	r23
    1264:	8f 93       	push	r24
    1266:	9f 93       	push	r25
    1268:	af 93       	push	r26
    126a:	bf 93       	push	r27
    126c:	ef 93       	push	r30
    126e:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    1270:	e0 91 64 20 	lds	r30, 0x2064	; 0x802064 <tc_tcc1_cca_callback>
    1274:	f0 91 65 20 	lds	r31, 0x2065	; 0x802065 <tc_tcc1_cca_callback+0x1>
    1278:	30 97       	sbiw	r30, 0x00	; 0
    127a:	09 f0       	breq	.+2      	; 0x127e <__vector_22+0x42>
		tc_tcc1_cca_callback();
    127c:	19 95       	eicall
	}
}
    127e:	ff 91       	pop	r31
    1280:	ef 91       	pop	r30
    1282:	bf 91       	pop	r27
    1284:	af 91       	pop	r26
    1286:	9f 91       	pop	r25
    1288:	8f 91       	pop	r24
    128a:	7f 91       	pop	r23
    128c:	6f 91       	pop	r22
    128e:	5f 91       	pop	r21
    1290:	4f 91       	pop	r20
    1292:	3f 91       	pop	r19
    1294:	2f 91       	pop	r18
    1296:	0f 90       	pop	r0
    1298:	0b be       	out	0x3b, r0	; 59
    129a:	0f 90       	pop	r0
    129c:	09 be       	out	0x39, r0	; 57
    129e:	0f 90       	pop	r0
    12a0:	08 be       	out	0x38, r0	; 56
    12a2:	0f 90       	pop	r0
    12a4:	0f be       	out	0x3f, r0	; 63
    12a6:	0f 90       	pop	r0
    12a8:	1f 90       	pop	r1
    12aa:	18 95       	reti

000012ac <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    12ac:	1f 92       	push	r1
    12ae:	0f 92       	push	r0
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	0f 92       	push	r0
    12b4:	11 24       	eor	r1, r1
    12b6:	08 b6       	in	r0, 0x38	; 56
    12b8:	0f 92       	push	r0
    12ba:	18 be       	out	0x38, r1	; 56
    12bc:	09 b6       	in	r0, 0x39	; 57
    12be:	0f 92       	push	r0
    12c0:	19 be       	out	0x39, r1	; 57
    12c2:	0b b6       	in	r0, 0x3b	; 59
    12c4:	0f 92       	push	r0
    12c6:	1b be       	out	0x3b, r1	; 59
    12c8:	2f 93       	push	r18
    12ca:	3f 93       	push	r19
    12cc:	4f 93       	push	r20
    12ce:	5f 93       	push	r21
    12d0:	6f 93       	push	r22
    12d2:	7f 93       	push	r23
    12d4:	8f 93       	push	r24
    12d6:	9f 93       	push	r25
    12d8:	af 93       	push	r26
    12da:	bf 93       	push	r27
    12dc:	ef 93       	push	r30
    12de:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    12e0:	e0 91 62 20 	lds	r30, 0x2062	; 0x802062 <tc_tcc1_ccb_callback>
    12e4:	f0 91 63 20 	lds	r31, 0x2063	; 0x802063 <tc_tcc1_ccb_callback+0x1>
    12e8:	30 97       	sbiw	r30, 0x00	; 0
    12ea:	09 f0       	breq	.+2      	; 0x12ee <__vector_23+0x42>
		tc_tcc1_ccb_callback();
    12ec:	19 95       	eicall
	}
}
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0b be       	out	0x3b, r0	; 59
    130a:	0f 90       	pop	r0
    130c:	09 be       	out	0x39, r0	; 57
    130e:	0f 90       	pop	r0
    1310:	08 be       	out	0x38, r0	; 56
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    131c:	1f 92       	push	r1
    131e:	0f 92       	push	r0
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	0f 92       	push	r0
    1324:	11 24       	eor	r1, r1
    1326:	08 b6       	in	r0, 0x38	; 56
    1328:	0f 92       	push	r0
    132a:	18 be       	out	0x38, r1	; 56
    132c:	09 b6       	in	r0, 0x39	; 57
    132e:	0f 92       	push	r0
    1330:	19 be       	out	0x39, r1	; 57
    1332:	0b b6       	in	r0, 0x3b	; 59
    1334:	0f 92       	push	r0
    1336:	1b be       	out	0x3b, r1	; 59
    1338:	2f 93       	push	r18
    133a:	3f 93       	push	r19
    133c:	4f 93       	push	r20
    133e:	5f 93       	push	r21
    1340:	6f 93       	push	r22
    1342:	7f 93       	push	r23
    1344:	8f 93       	push	r24
    1346:	9f 93       	push	r25
    1348:	af 93       	push	r26
    134a:	bf 93       	push	r27
    134c:	ef 93       	push	r30
    134e:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    1350:	e0 91 60 20 	lds	r30, 0x2060	; 0x802060 <tc_tcd0_ovf_callback>
    1354:	f0 91 61 20 	lds	r31, 0x2061	; 0x802061 <tc_tcd0_ovf_callback+0x1>
    1358:	30 97       	sbiw	r30, 0x00	; 0
    135a:	09 f0       	breq	.+2      	; 0x135e <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    135c:	19 95       	eicall
	}
}
    135e:	ff 91       	pop	r31
    1360:	ef 91       	pop	r30
    1362:	bf 91       	pop	r27
    1364:	af 91       	pop	r26
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	3f 91       	pop	r19
    1374:	2f 91       	pop	r18
    1376:	0f 90       	pop	r0
    1378:	0b be       	out	0x3b, r0	; 59
    137a:	0f 90       	pop	r0
    137c:	09 be       	out	0x39, r0	; 57
    137e:	0f 90       	pop	r0
    1380:	08 be       	out	0x38, r0	; 56
    1382:	0f 90       	pop	r0
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	0f 90       	pop	r0
    1388:	1f 90       	pop	r1
    138a:	18 95       	reti

0000138c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    138c:	1f 92       	push	r1
    138e:	0f 92       	push	r0
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	0f 92       	push	r0
    1394:	11 24       	eor	r1, r1
    1396:	08 b6       	in	r0, 0x38	; 56
    1398:	0f 92       	push	r0
    139a:	18 be       	out	0x38, r1	; 56
    139c:	09 b6       	in	r0, 0x39	; 57
    139e:	0f 92       	push	r0
    13a0:	19 be       	out	0x39, r1	; 57
    13a2:	0b b6       	in	r0, 0x3b	; 59
    13a4:	0f 92       	push	r0
    13a6:	1b be       	out	0x3b, r1	; 59
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    13c0:	e0 91 5e 20 	lds	r30, 0x205E	; 0x80205e <tc_tcd0_err_callback>
    13c4:	f0 91 5f 20 	lds	r31, 0x205F	; 0x80205f <tc_tcd0_err_callback+0x1>
    13c8:	30 97       	sbiw	r30, 0x00	; 0
    13ca:	09 f0       	breq	.+2      	; 0x13ce <__vector_78+0x42>
		tc_tcd0_err_callback();
    13cc:	19 95       	eicall
	}
}
    13ce:	ff 91       	pop	r31
    13d0:	ef 91       	pop	r30
    13d2:	bf 91       	pop	r27
    13d4:	af 91       	pop	r26
    13d6:	9f 91       	pop	r25
    13d8:	8f 91       	pop	r24
    13da:	7f 91       	pop	r23
    13dc:	6f 91       	pop	r22
    13de:	5f 91       	pop	r21
    13e0:	4f 91       	pop	r20
    13e2:	3f 91       	pop	r19
    13e4:	2f 91       	pop	r18
    13e6:	0f 90       	pop	r0
    13e8:	0b be       	out	0x3b, r0	; 59
    13ea:	0f 90       	pop	r0
    13ec:	09 be       	out	0x39, r0	; 57
    13ee:	0f 90       	pop	r0
    13f0:	08 be       	out	0x38, r0	; 56
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

000013fc <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    13fc:	1f 92       	push	r1
    13fe:	0f 92       	push	r0
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	0f 92       	push	r0
    1404:	11 24       	eor	r1, r1
    1406:	08 b6       	in	r0, 0x38	; 56
    1408:	0f 92       	push	r0
    140a:	18 be       	out	0x38, r1	; 56
    140c:	09 b6       	in	r0, 0x39	; 57
    140e:	0f 92       	push	r0
    1410:	19 be       	out	0x39, r1	; 57
    1412:	0b b6       	in	r0, 0x3b	; 59
    1414:	0f 92       	push	r0
    1416:	1b be       	out	0x3b, r1	; 59
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1430:	e0 91 5c 20 	lds	r30, 0x205C	; 0x80205c <tc_tcd0_cca_callback>
    1434:	f0 91 5d 20 	lds	r31, 0x205D	; 0x80205d <tc_tcd0_cca_callback+0x1>
    1438:	30 97       	sbiw	r30, 0x00	; 0
    143a:	09 f0       	breq	.+2      	; 0x143e <__vector_79+0x42>
		tc_tcd0_cca_callback();
    143c:	19 95       	eicall
	}
}
    143e:	ff 91       	pop	r31
    1440:	ef 91       	pop	r30
    1442:	bf 91       	pop	r27
    1444:	af 91       	pop	r26
    1446:	9f 91       	pop	r25
    1448:	8f 91       	pop	r24
    144a:	7f 91       	pop	r23
    144c:	6f 91       	pop	r22
    144e:	5f 91       	pop	r21
    1450:	4f 91       	pop	r20
    1452:	3f 91       	pop	r19
    1454:	2f 91       	pop	r18
    1456:	0f 90       	pop	r0
    1458:	0b be       	out	0x3b, r0	; 59
    145a:	0f 90       	pop	r0
    145c:	09 be       	out	0x39, r0	; 57
    145e:	0f 90       	pop	r0
    1460:	08 be       	out	0x38, r0	; 56
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	0f 90       	pop	r0
    1468:	1f 90       	pop	r1
    146a:	18 95       	reti

0000146c <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    146c:	1f 92       	push	r1
    146e:	0f 92       	push	r0
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	0f 92       	push	r0
    1474:	11 24       	eor	r1, r1
    1476:	08 b6       	in	r0, 0x38	; 56
    1478:	0f 92       	push	r0
    147a:	18 be       	out	0x38, r1	; 56
    147c:	09 b6       	in	r0, 0x39	; 57
    147e:	0f 92       	push	r0
    1480:	19 be       	out	0x39, r1	; 57
    1482:	0b b6       	in	r0, 0x3b	; 59
    1484:	0f 92       	push	r0
    1486:	1b be       	out	0x3b, r1	; 59
    1488:	2f 93       	push	r18
    148a:	3f 93       	push	r19
    148c:	4f 93       	push	r20
    148e:	5f 93       	push	r21
    1490:	6f 93       	push	r22
    1492:	7f 93       	push	r23
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	af 93       	push	r26
    149a:	bf 93       	push	r27
    149c:	ef 93       	push	r30
    149e:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    14a0:	e0 91 5a 20 	lds	r30, 0x205A	; 0x80205a <tc_tcd0_ccb_callback>
    14a4:	f0 91 5b 20 	lds	r31, 0x205B	; 0x80205b <tc_tcd0_ccb_callback+0x1>
    14a8:	30 97       	sbiw	r30, 0x00	; 0
    14aa:	09 f0       	breq	.+2      	; 0x14ae <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    14ac:	19 95       	eicall
	}
}
    14ae:	ff 91       	pop	r31
    14b0:	ef 91       	pop	r30
    14b2:	bf 91       	pop	r27
    14b4:	af 91       	pop	r26
    14b6:	9f 91       	pop	r25
    14b8:	8f 91       	pop	r24
    14ba:	7f 91       	pop	r23
    14bc:	6f 91       	pop	r22
    14be:	5f 91       	pop	r21
    14c0:	4f 91       	pop	r20
    14c2:	3f 91       	pop	r19
    14c4:	2f 91       	pop	r18
    14c6:	0f 90       	pop	r0
    14c8:	0b be       	out	0x3b, r0	; 59
    14ca:	0f 90       	pop	r0
    14cc:	09 be       	out	0x39, r0	; 57
    14ce:	0f 90       	pop	r0
    14d0:	08 be       	out	0x38, r0	; 56
    14d2:	0f 90       	pop	r0
    14d4:	0f be       	out	0x3f, r0	; 63
    14d6:	0f 90       	pop	r0
    14d8:	1f 90       	pop	r1
    14da:	18 95       	reti

000014dc <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    14dc:	1f 92       	push	r1
    14de:	0f 92       	push	r0
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	0f 92       	push	r0
    14e4:	11 24       	eor	r1, r1
    14e6:	08 b6       	in	r0, 0x38	; 56
    14e8:	0f 92       	push	r0
    14ea:	18 be       	out	0x38, r1	; 56
    14ec:	09 b6       	in	r0, 0x39	; 57
    14ee:	0f 92       	push	r0
    14f0:	19 be       	out	0x39, r1	; 57
    14f2:	0b b6       	in	r0, 0x3b	; 59
    14f4:	0f 92       	push	r0
    14f6:	1b be       	out	0x3b, r1	; 59
    14f8:	2f 93       	push	r18
    14fa:	3f 93       	push	r19
    14fc:	4f 93       	push	r20
    14fe:	5f 93       	push	r21
    1500:	6f 93       	push	r22
    1502:	7f 93       	push	r23
    1504:	8f 93       	push	r24
    1506:	9f 93       	push	r25
    1508:	af 93       	push	r26
    150a:	bf 93       	push	r27
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1510:	e0 91 58 20 	lds	r30, 0x2058	; 0x802058 <tc_tcd0_ccc_callback>
    1514:	f0 91 59 20 	lds	r31, 0x2059	; 0x802059 <tc_tcd0_ccc_callback+0x1>
    1518:	30 97       	sbiw	r30, 0x00	; 0
    151a:	09 f0       	breq	.+2      	; 0x151e <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    151c:	19 95       	eicall
	}
}
    151e:	ff 91       	pop	r31
    1520:	ef 91       	pop	r30
    1522:	bf 91       	pop	r27
    1524:	af 91       	pop	r26
    1526:	9f 91       	pop	r25
    1528:	8f 91       	pop	r24
    152a:	7f 91       	pop	r23
    152c:	6f 91       	pop	r22
    152e:	5f 91       	pop	r21
    1530:	4f 91       	pop	r20
    1532:	3f 91       	pop	r19
    1534:	2f 91       	pop	r18
    1536:	0f 90       	pop	r0
    1538:	0b be       	out	0x3b, r0	; 59
    153a:	0f 90       	pop	r0
    153c:	09 be       	out	0x39, r0	; 57
    153e:	0f 90       	pop	r0
    1540:	08 be       	out	0x38, r0	; 56
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	08 b6       	in	r0, 0x38	; 56
    1558:	0f 92       	push	r0
    155a:	18 be       	out	0x38, r1	; 56
    155c:	09 b6       	in	r0, 0x39	; 57
    155e:	0f 92       	push	r0
    1560:	19 be       	out	0x39, r1	; 57
    1562:	0b b6       	in	r0, 0x3b	; 59
    1564:	0f 92       	push	r0
    1566:	1b be       	out	0x3b, r1	; 59
    1568:	2f 93       	push	r18
    156a:	3f 93       	push	r19
    156c:	4f 93       	push	r20
    156e:	5f 93       	push	r21
    1570:	6f 93       	push	r22
    1572:	7f 93       	push	r23
    1574:	8f 93       	push	r24
    1576:	9f 93       	push	r25
    1578:	af 93       	push	r26
    157a:	bf 93       	push	r27
    157c:	ef 93       	push	r30
    157e:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1580:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <tc_tcd0_ccd_callback>
    1584:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <tc_tcd0_ccd_callback+0x1>
    1588:	30 97       	sbiw	r30, 0x00	; 0
    158a:	09 f0       	breq	.+2      	; 0x158e <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    158c:	19 95       	eicall
	}
}
    158e:	ff 91       	pop	r31
    1590:	ef 91       	pop	r30
    1592:	bf 91       	pop	r27
    1594:	af 91       	pop	r26
    1596:	9f 91       	pop	r25
    1598:	8f 91       	pop	r24
    159a:	7f 91       	pop	r23
    159c:	6f 91       	pop	r22
    159e:	5f 91       	pop	r21
    15a0:	4f 91       	pop	r20
    15a2:	3f 91       	pop	r19
    15a4:	2f 91       	pop	r18
    15a6:	0f 90       	pop	r0
    15a8:	0b be       	out	0x3b, r0	; 59
    15aa:	0f 90       	pop	r0
    15ac:	09 be       	out	0x39, r0	; 57
    15ae:	0f 90       	pop	r0
    15b0:	08 be       	out	0x38, r0	; 56
    15b2:	0f 90       	pop	r0
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	0f 90       	pop	r0
    15b8:	1f 90       	pop	r1
    15ba:	18 95       	reti

000015bc <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    15bc:	1f 92       	push	r1
    15be:	0f 92       	push	r0
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	0f 92       	push	r0
    15c4:	11 24       	eor	r1, r1
    15c6:	08 b6       	in	r0, 0x38	; 56
    15c8:	0f 92       	push	r0
    15ca:	18 be       	out	0x38, r1	; 56
    15cc:	09 b6       	in	r0, 0x39	; 57
    15ce:	0f 92       	push	r0
    15d0:	19 be       	out	0x39, r1	; 57
    15d2:	0b b6       	in	r0, 0x3b	; 59
    15d4:	0f 92       	push	r0
    15d6:	1b be       	out	0x3b, r1	; 59
    15d8:	2f 93       	push	r18
    15da:	3f 93       	push	r19
    15dc:	4f 93       	push	r20
    15de:	5f 93       	push	r21
    15e0:	6f 93       	push	r22
    15e2:	7f 93       	push	r23
    15e4:	8f 93       	push	r24
    15e6:	9f 93       	push	r25
    15e8:	af 93       	push	r26
    15ea:	bf 93       	push	r27
    15ec:	ef 93       	push	r30
    15ee:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    15f0:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <tc_tcd1_ovf_callback>
    15f4:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <tc_tcd1_ovf_callback+0x1>
    15f8:	30 97       	sbiw	r30, 0x00	; 0
    15fa:	09 f0       	breq	.+2      	; 0x15fe <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    15fc:	19 95       	eicall
	}
}
    15fe:	ff 91       	pop	r31
    1600:	ef 91       	pop	r30
    1602:	bf 91       	pop	r27
    1604:	af 91       	pop	r26
    1606:	9f 91       	pop	r25
    1608:	8f 91       	pop	r24
    160a:	7f 91       	pop	r23
    160c:	6f 91       	pop	r22
    160e:	5f 91       	pop	r21
    1610:	4f 91       	pop	r20
    1612:	3f 91       	pop	r19
    1614:	2f 91       	pop	r18
    1616:	0f 90       	pop	r0
    1618:	0b be       	out	0x3b, r0	; 59
    161a:	0f 90       	pop	r0
    161c:	09 be       	out	0x39, r0	; 57
    161e:	0f 90       	pop	r0
    1620:	08 be       	out	0x38, r0	; 56
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	0f 90       	pop	r0
    1628:	1f 90       	pop	r1
    162a:	18 95       	reti

0000162c <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	08 b6       	in	r0, 0x38	; 56
    1638:	0f 92       	push	r0
    163a:	18 be       	out	0x38, r1	; 56
    163c:	09 b6       	in	r0, 0x39	; 57
    163e:	0f 92       	push	r0
    1640:	19 be       	out	0x39, r1	; 57
    1642:	0b b6       	in	r0, 0x3b	; 59
    1644:	0f 92       	push	r0
    1646:	1b be       	out	0x3b, r1	; 59
    1648:	2f 93       	push	r18
    164a:	3f 93       	push	r19
    164c:	4f 93       	push	r20
    164e:	5f 93       	push	r21
    1650:	6f 93       	push	r22
    1652:	7f 93       	push	r23
    1654:	8f 93       	push	r24
    1656:	9f 93       	push	r25
    1658:	af 93       	push	r26
    165a:	bf 93       	push	r27
    165c:	ef 93       	push	r30
    165e:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1660:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <tc_tcd1_err_callback>
    1664:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <tc_tcd1_err_callback+0x1>
    1668:	30 97       	sbiw	r30, 0x00	; 0
    166a:	09 f0       	breq	.+2      	; 0x166e <__vector_84+0x42>
		tc_tcd1_err_callback();
    166c:	19 95       	eicall
	}
}
    166e:	ff 91       	pop	r31
    1670:	ef 91       	pop	r30
    1672:	bf 91       	pop	r27
    1674:	af 91       	pop	r26
    1676:	9f 91       	pop	r25
    1678:	8f 91       	pop	r24
    167a:	7f 91       	pop	r23
    167c:	6f 91       	pop	r22
    167e:	5f 91       	pop	r21
    1680:	4f 91       	pop	r20
    1682:	3f 91       	pop	r19
    1684:	2f 91       	pop	r18
    1686:	0f 90       	pop	r0
    1688:	0b be       	out	0x3b, r0	; 59
    168a:	0f 90       	pop	r0
    168c:	09 be       	out	0x39, r0	; 57
    168e:	0f 90       	pop	r0
    1690:	08 be       	out	0x38, r0	; 56
    1692:	0f 90       	pop	r0
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	0f 90       	pop	r0
    1698:	1f 90       	pop	r1
    169a:	18 95       	reti

0000169c <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    169c:	1f 92       	push	r1
    169e:	0f 92       	push	r0
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	0f 92       	push	r0
    16a4:	11 24       	eor	r1, r1
    16a6:	08 b6       	in	r0, 0x38	; 56
    16a8:	0f 92       	push	r0
    16aa:	18 be       	out	0x38, r1	; 56
    16ac:	09 b6       	in	r0, 0x39	; 57
    16ae:	0f 92       	push	r0
    16b0:	19 be       	out	0x39, r1	; 57
    16b2:	0b b6       	in	r0, 0x3b	; 59
    16b4:	0f 92       	push	r0
    16b6:	1b be       	out	0x3b, r1	; 59
    16b8:	2f 93       	push	r18
    16ba:	3f 93       	push	r19
    16bc:	4f 93       	push	r20
    16be:	5f 93       	push	r21
    16c0:	6f 93       	push	r22
    16c2:	7f 93       	push	r23
    16c4:	8f 93       	push	r24
    16c6:	9f 93       	push	r25
    16c8:	af 93       	push	r26
    16ca:	bf 93       	push	r27
    16cc:	ef 93       	push	r30
    16ce:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    16d0:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <tc_tcd1_cca_callback>
    16d4:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <tc_tcd1_cca_callback+0x1>
    16d8:	30 97       	sbiw	r30, 0x00	; 0
    16da:	09 f0       	breq	.+2      	; 0x16de <__vector_85+0x42>
		tc_tcd1_cca_callback();
    16dc:	19 95       	eicall
	}
}
    16de:	ff 91       	pop	r31
    16e0:	ef 91       	pop	r30
    16e2:	bf 91       	pop	r27
    16e4:	af 91       	pop	r26
    16e6:	9f 91       	pop	r25
    16e8:	8f 91       	pop	r24
    16ea:	7f 91       	pop	r23
    16ec:	6f 91       	pop	r22
    16ee:	5f 91       	pop	r21
    16f0:	4f 91       	pop	r20
    16f2:	3f 91       	pop	r19
    16f4:	2f 91       	pop	r18
    16f6:	0f 90       	pop	r0
    16f8:	0b be       	out	0x3b, r0	; 59
    16fa:	0f 90       	pop	r0
    16fc:	09 be       	out	0x39, r0	; 57
    16fe:	0f 90       	pop	r0
    1700:	08 be       	out	0x38, r0	; 56
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    170c:	1f 92       	push	r1
    170e:	0f 92       	push	r0
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	0f 92       	push	r0
    1714:	11 24       	eor	r1, r1
    1716:	08 b6       	in	r0, 0x38	; 56
    1718:	0f 92       	push	r0
    171a:	18 be       	out	0x38, r1	; 56
    171c:	09 b6       	in	r0, 0x39	; 57
    171e:	0f 92       	push	r0
    1720:	19 be       	out	0x39, r1	; 57
    1722:	0b b6       	in	r0, 0x3b	; 59
    1724:	0f 92       	push	r0
    1726:	1b be       	out	0x3b, r1	; 59
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	ef 93       	push	r30
    173e:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1740:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <tc_tcd1_ccb_callback>
    1744:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <tc_tcd1_ccb_callback+0x1>
    1748:	30 97       	sbiw	r30, 0x00	; 0
    174a:	09 f0       	breq	.+2      	; 0x174e <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    174c:	19 95       	eicall
	}
}
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	bf 91       	pop	r27
    1754:	af 91       	pop	r26
    1756:	9f 91       	pop	r25
    1758:	8f 91       	pop	r24
    175a:	7f 91       	pop	r23
    175c:	6f 91       	pop	r22
    175e:	5f 91       	pop	r21
    1760:	4f 91       	pop	r20
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	0f 90       	pop	r0
    1768:	0b be       	out	0x3b, r0	; 59
    176a:	0f 90       	pop	r0
    176c:	09 be       	out	0x39, r0	; 57
    176e:	0f 90       	pop	r0
    1770:	08 be       	out	0x38, r0	; 56
    1772:	0f 90       	pop	r0
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	0f 90       	pop	r0
    1778:	1f 90       	pop	r1
    177a:	18 95       	reti

0000177c <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    177c:	1f 92       	push	r1
    177e:	0f 92       	push	r0
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	0f 92       	push	r0
    1784:	11 24       	eor	r1, r1
    1786:	08 b6       	in	r0, 0x38	; 56
    1788:	0f 92       	push	r0
    178a:	18 be       	out	0x38, r1	; 56
    178c:	09 b6       	in	r0, 0x39	; 57
    178e:	0f 92       	push	r0
    1790:	19 be       	out	0x39, r1	; 57
    1792:	0b b6       	in	r0, 0x3b	; 59
    1794:	0f 92       	push	r0
    1796:	1b be       	out	0x3b, r1	; 59
    1798:	2f 93       	push	r18
    179a:	3f 93       	push	r19
    179c:	4f 93       	push	r20
    179e:	5f 93       	push	r21
    17a0:	6f 93       	push	r22
    17a2:	7f 93       	push	r23
    17a4:	8f 93       	push	r24
    17a6:	9f 93       	push	r25
    17a8:	af 93       	push	r26
    17aa:	bf 93       	push	r27
    17ac:	ef 93       	push	r30
    17ae:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    17b0:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <tc_tce0_ovf_callback>
    17b4:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <tc_tce0_ovf_callback+0x1>
    17b8:	30 97       	sbiw	r30, 0x00	; 0
    17ba:	09 f0       	breq	.+2      	; 0x17be <__vector_47+0x42>
		tc_tce0_ovf_callback();
    17bc:	19 95       	eicall
	}
}
    17be:	ff 91       	pop	r31
    17c0:	ef 91       	pop	r30
    17c2:	bf 91       	pop	r27
    17c4:	af 91       	pop	r26
    17c6:	9f 91       	pop	r25
    17c8:	8f 91       	pop	r24
    17ca:	7f 91       	pop	r23
    17cc:	6f 91       	pop	r22
    17ce:	5f 91       	pop	r21
    17d0:	4f 91       	pop	r20
    17d2:	3f 91       	pop	r19
    17d4:	2f 91       	pop	r18
    17d6:	0f 90       	pop	r0
    17d8:	0b be       	out	0x3b, r0	; 59
    17da:	0f 90       	pop	r0
    17dc:	09 be       	out	0x39, r0	; 57
    17de:	0f 90       	pop	r0
    17e0:	08 be       	out	0x38, r0	; 56
    17e2:	0f 90       	pop	r0
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	0f 90       	pop	r0
    17e8:	1f 90       	pop	r1
    17ea:	18 95       	reti

000017ec <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	08 b6       	in	r0, 0x38	; 56
    17f8:	0f 92       	push	r0
    17fa:	18 be       	out	0x38, r1	; 56
    17fc:	09 b6       	in	r0, 0x39	; 57
    17fe:	0f 92       	push	r0
    1800:	19 be       	out	0x39, r1	; 57
    1802:	0b b6       	in	r0, 0x3b	; 59
    1804:	0f 92       	push	r0
    1806:	1b be       	out	0x3b, r1	; 59
    1808:	2f 93       	push	r18
    180a:	3f 93       	push	r19
    180c:	4f 93       	push	r20
    180e:	5f 93       	push	r21
    1810:	6f 93       	push	r22
    1812:	7f 93       	push	r23
    1814:	8f 93       	push	r24
    1816:	9f 93       	push	r25
    1818:	af 93       	push	r26
    181a:	bf 93       	push	r27
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1820:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <tc_tce0_err_callback>
    1824:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <tc_tce0_err_callback+0x1>
    1828:	30 97       	sbiw	r30, 0x00	; 0
    182a:	09 f0       	breq	.+2      	; 0x182e <__vector_48+0x42>
		tc_tce0_err_callback();
    182c:	19 95       	eicall
	}
}
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	bf 91       	pop	r27
    1834:	af 91       	pop	r26
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	7f 91       	pop	r23
    183c:	6f 91       	pop	r22
    183e:	5f 91       	pop	r21
    1840:	4f 91       	pop	r20
    1842:	3f 91       	pop	r19
    1844:	2f 91       	pop	r18
    1846:	0f 90       	pop	r0
    1848:	0b be       	out	0x3b, r0	; 59
    184a:	0f 90       	pop	r0
    184c:	09 be       	out	0x39, r0	; 57
    184e:	0f 90       	pop	r0
    1850:	08 be       	out	0x38, r0	; 56
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    185c:	1f 92       	push	r1
    185e:	0f 92       	push	r0
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	0f 92       	push	r0
    1864:	11 24       	eor	r1, r1
    1866:	08 b6       	in	r0, 0x38	; 56
    1868:	0f 92       	push	r0
    186a:	18 be       	out	0x38, r1	; 56
    186c:	09 b6       	in	r0, 0x39	; 57
    186e:	0f 92       	push	r0
    1870:	19 be       	out	0x39, r1	; 57
    1872:	0b b6       	in	r0, 0x3b	; 59
    1874:	0f 92       	push	r0
    1876:	1b be       	out	0x3b, r1	; 59
    1878:	2f 93       	push	r18
    187a:	3f 93       	push	r19
    187c:	4f 93       	push	r20
    187e:	5f 93       	push	r21
    1880:	6f 93       	push	r22
    1882:	7f 93       	push	r23
    1884:	8f 93       	push	r24
    1886:	9f 93       	push	r25
    1888:	af 93       	push	r26
    188a:	bf 93       	push	r27
    188c:	ef 93       	push	r30
    188e:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1890:	e0 91 48 20 	lds	r30, 0x2048	; 0x802048 <tc_tce0_cca_callback>
    1894:	f0 91 49 20 	lds	r31, 0x2049	; 0x802049 <tc_tce0_cca_callback+0x1>
    1898:	30 97       	sbiw	r30, 0x00	; 0
    189a:	09 f0       	breq	.+2      	; 0x189e <__vector_49+0x42>
		tc_tce0_cca_callback();
    189c:	19 95       	eicall
	}
}
    189e:	ff 91       	pop	r31
    18a0:	ef 91       	pop	r30
    18a2:	bf 91       	pop	r27
    18a4:	af 91       	pop	r26
    18a6:	9f 91       	pop	r25
    18a8:	8f 91       	pop	r24
    18aa:	7f 91       	pop	r23
    18ac:	6f 91       	pop	r22
    18ae:	5f 91       	pop	r21
    18b0:	4f 91       	pop	r20
    18b2:	3f 91       	pop	r19
    18b4:	2f 91       	pop	r18
    18b6:	0f 90       	pop	r0
    18b8:	0b be       	out	0x3b, r0	; 59
    18ba:	0f 90       	pop	r0
    18bc:	09 be       	out	0x39, r0	; 57
    18be:	0f 90       	pop	r0
    18c0:	08 be       	out	0x38, r0	; 56
    18c2:	0f 90       	pop	r0
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	0f 90       	pop	r0
    18c8:	1f 90       	pop	r1
    18ca:	18 95       	reti

000018cc <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    18cc:	1f 92       	push	r1
    18ce:	0f 92       	push	r0
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	0f 92       	push	r0
    18d4:	11 24       	eor	r1, r1
    18d6:	08 b6       	in	r0, 0x38	; 56
    18d8:	0f 92       	push	r0
    18da:	18 be       	out	0x38, r1	; 56
    18dc:	09 b6       	in	r0, 0x39	; 57
    18de:	0f 92       	push	r0
    18e0:	19 be       	out	0x39, r1	; 57
    18e2:	0b b6       	in	r0, 0x3b	; 59
    18e4:	0f 92       	push	r0
    18e6:	1b be       	out	0x3b, r1	; 59
    18e8:	2f 93       	push	r18
    18ea:	3f 93       	push	r19
    18ec:	4f 93       	push	r20
    18ee:	5f 93       	push	r21
    18f0:	6f 93       	push	r22
    18f2:	7f 93       	push	r23
    18f4:	8f 93       	push	r24
    18f6:	9f 93       	push	r25
    18f8:	af 93       	push	r26
    18fa:	bf 93       	push	r27
    18fc:	ef 93       	push	r30
    18fe:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1900:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tce0_ccb_callback>
    1904:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tce0_ccb_callback+0x1>
    1908:	30 97       	sbiw	r30, 0x00	; 0
    190a:	09 f0       	breq	.+2      	; 0x190e <__vector_50+0x42>
		tc_tce0_ccb_callback();
    190c:	19 95       	eicall
	}
}
    190e:	ff 91       	pop	r31
    1910:	ef 91       	pop	r30
    1912:	bf 91       	pop	r27
    1914:	af 91       	pop	r26
    1916:	9f 91       	pop	r25
    1918:	8f 91       	pop	r24
    191a:	7f 91       	pop	r23
    191c:	6f 91       	pop	r22
    191e:	5f 91       	pop	r21
    1920:	4f 91       	pop	r20
    1922:	3f 91       	pop	r19
    1924:	2f 91       	pop	r18
    1926:	0f 90       	pop	r0
    1928:	0b be       	out	0x3b, r0	; 59
    192a:	0f 90       	pop	r0
    192c:	09 be       	out	0x39, r0	; 57
    192e:	0f 90       	pop	r0
    1930:	08 be       	out	0x38, r0	; 56
    1932:	0f 90       	pop	r0
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	0f 90       	pop	r0
    1938:	1f 90       	pop	r1
    193a:	18 95       	reti

0000193c <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    193c:	1f 92       	push	r1
    193e:	0f 92       	push	r0
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	0f 92       	push	r0
    1944:	11 24       	eor	r1, r1
    1946:	08 b6       	in	r0, 0x38	; 56
    1948:	0f 92       	push	r0
    194a:	18 be       	out	0x38, r1	; 56
    194c:	09 b6       	in	r0, 0x39	; 57
    194e:	0f 92       	push	r0
    1950:	19 be       	out	0x39, r1	; 57
    1952:	0b b6       	in	r0, 0x3b	; 59
    1954:	0f 92       	push	r0
    1956:	1b be       	out	0x3b, r1	; 59
    1958:	2f 93       	push	r18
    195a:	3f 93       	push	r19
    195c:	4f 93       	push	r20
    195e:	5f 93       	push	r21
    1960:	6f 93       	push	r22
    1962:	7f 93       	push	r23
    1964:	8f 93       	push	r24
    1966:	9f 93       	push	r25
    1968:	af 93       	push	r26
    196a:	bf 93       	push	r27
    196c:	ef 93       	push	r30
    196e:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1970:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tce0_ccc_callback>
    1974:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tce0_ccc_callback+0x1>
    1978:	30 97       	sbiw	r30, 0x00	; 0
    197a:	09 f0       	breq	.+2      	; 0x197e <__vector_51+0x42>
		tc_tce0_ccc_callback();
    197c:	19 95       	eicall
	}
}
    197e:	ff 91       	pop	r31
    1980:	ef 91       	pop	r30
    1982:	bf 91       	pop	r27
    1984:	af 91       	pop	r26
    1986:	9f 91       	pop	r25
    1988:	8f 91       	pop	r24
    198a:	7f 91       	pop	r23
    198c:	6f 91       	pop	r22
    198e:	5f 91       	pop	r21
    1990:	4f 91       	pop	r20
    1992:	3f 91       	pop	r19
    1994:	2f 91       	pop	r18
    1996:	0f 90       	pop	r0
    1998:	0b be       	out	0x3b, r0	; 59
    199a:	0f 90       	pop	r0
    199c:	09 be       	out	0x39, r0	; 57
    199e:	0f 90       	pop	r0
    19a0:	08 be       	out	0x38, r0	; 56
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	0f 90       	pop	r0
    19a8:	1f 90       	pop	r1
    19aa:	18 95       	reti

000019ac <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	08 b6       	in	r0, 0x38	; 56
    19b8:	0f 92       	push	r0
    19ba:	18 be       	out	0x38, r1	; 56
    19bc:	09 b6       	in	r0, 0x39	; 57
    19be:	0f 92       	push	r0
    19c0:	19 be       	out	0x39, r1	; 57
    19c2:	0b b6       	in	r0, 0x3b	; 59
    19c4:	0f 92       	push	r0
    19c6:	1b be       	out	0x3b, r1	; 59
    19c8:	2f 93       	push	r18
    19ca:	3f 93       	push	r19
    19cc:	4f 93       	push	r20
    19ce:	5f 93       	push	r21
    19d0:	6f 93       	push	r22
    19d2:	7f 93       	push	r23
    19d4:	8f 93       	push	r24
    19d6:	9f 93       	push	r25
    19d8:	af 93       	push	r26
    19da:	bf 93       	push	r27
    19dc:	ef 93       	push	r30
    19de:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    19e0:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tce0_ccd_callback>
    19e4:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tce0_ccd_callback+0x1>
    19e8:	30 97       	sbiw	r30, 0x00	; 0
    19ea:	09 f0       	breq	.+2      	; 0x19ee <__vector_52+0x42>
		tc_tce0_ccd_callback();
    19ec:	19 95       	eicall
	}
}
    19ee:	ff 91       	pop	r31
    19f0:	ef 91       	pop	r30
    19f2:	bf 91       	pop	r27
    19f4:	af 91       	pop	r26
    19f6:	9f 91       	pop	r25
    19f8:	8f 91       	pop	r24
    19fa:	7f 91       	pop	r23
    19fc:	6f 91       	pop	r22
    19fe:	5f 91       	pop	r21
    1a00:	4f 91       	pop	r20
    1a02:	3f 91       	pop	r19
    1a04:	2f 91       	pop	r18
    1a06:	0f 90       	pop	r0
    1a08:	0b be       	out	0x3b, r0	; 59
    1a0a:	0f 90       	pop	r0
    1a0c:	09 be       	out	0x39, r0	; 57
    1a0e:	0f 90       	pop	r0
    1a10:	08 be       	out	0x38, r0	; 56
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	0f 90       	pop	r0
    1a18:	1f 90       	pop	r1
    1a1a:	18 95       	reti

00001a1c <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    1a1c:	1f 92       	push	r1
    1a1e:	0f 92       	push	r0
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	0f 92       	push	r0
    1a24:	11 24       	eor	r1, r1
    1a26:	08 b6       	in	r0, 0x38	; 56
    1a28:	0f 92       	push	r0
    1a2a:	18 be       	out	0x38, r1	; 56
    1a2c:	09 b6       	in	r0, 0x39	; 57
    1a2e:	0f 92       	push	r0
    1a30:	19 be       	out	0x39, r1	; 57
    1a32:	0b b6       	in	r0, 0x3b	; 59
    1a34:	0f 92       	push	r0
    1a36:	1b be       	out	0x3b, r1	; 59
    1a38:	2f 93       	push	r18
    1a3a:	3f 93       	push	r19
    1a3c:	4f 93       	push	r20
    1a3e:	5f 93       	push	r21
    1a40:	6f 93       	push	r22
    1a42:	7f 93       	push	r23
    1a44:	8f 93       	push	r24
    1a46:	9f 93       	push	r25
    1a48:	af 93       	push	r26
    1a4a:	bf 93       	push	r27
    1a4c:	ef 93       	push	r30
    1a4e:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1a50:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <tc_tce1_ovf_callback>
    1a54:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <tc_tce1_ovf_callback+0x1>
    1a58:	30 97       	sbiw	r30, 0x00	; 0
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <__vector_53+0x42>
		tc_tce1_ovf_callback();
    1a5c:	19 95       	eicall
	}
}
    1a5e:	ff 91       	pop	r31
    1a60:	ef 91       	pop	r30
    1a62:	bf 91       	pop	r27
    1a64:	af 91       	pop	r26
    1a66:	9f 91       	pop	r25
    1a68:	8f 91       	pop	r24
    1a6a:	7f 91       	pop	r23
    1a6c:	6f 91       	pop	r22
    1a6e:	5f 91       	pop	r21
    1a70:	4f 91       	pop	r20
    1a72:	3f 91       	pop	r19
    1a74:	2f 91       	pop	r18
    1a76:	0f 90       	pop	r0
    1a78:	0b be       	out	0x3b, r0	; 59
    1a7a:	0f 90       	pop	r0
    1a7c:	09 be       	out	0x39, r0	; 57
    1a7e:	0f 90       	pop	r0
    1a80:	08 be       	out	0x38, r0	; 56
    1a82:	0f 90       	pop	r0
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	0f 90       	pop	r0
    1a88:	1f 90       	pop	r1
    1a8a:	18 95       	reti

00001a8c <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1a8c:	1f 92       	push	r1
    1a8e:	0f 92       	push	r0
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	0f 92       	push	r0
    1a94:	11 24       	eor	r1, r1
    1a96:	08 b6       	in	r0, 0x38	; 56
    1a98:	0f 92       	push	r0
    1a9a:	18 be       	out	0x38, r1	; 56
    1a9c:	09 b6       	in	r0, 0x39	; 57
    1a9e:	0f 92       	push	r0
    1aa0:	19 be       	out	0x39, r1	; 57
    1aa2:	0b b6       	in	r0, 0x3b	; 59
    1aa4:	0f 92       	push	r0
    1aa6:	1b be       	out	0x3b, r1	; 59
    1aa8:	2f 93       	push	r18
    1aaa:	3f 93       	push	r19
    1aac:	4f 93       	push	r20
    1aae:	5f 93       	push	r21
    1ab0:	6f 93       	push	r22
    1ab2:	7f 93       	push	r23
    1ab4:	8f 93       	push	r24
    1ab6:	9f 93       	push	r25
    1ab8:	af 93       	push	r26
    1aba:	bf 93       	push	r27
    1abc:	ef 93       	push	r30
    1abe:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1ac0:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <tc_tce1_err_callback>
    1ac4:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <tc_tce1_err_callback+0x1>
    1ac8:	30 97       	sbiw	r30, 0x00	; 0
    1aca:	09 f0       	breq	.+2      	; 0x1ace <__vector_54+0x42>
		tc_tce1_err_callback();
    1acc:	19 95       	eicall
	}
}
    1ace:	ff 91       	pop	r31
    1ad0:	ef 91       	pop	r30
    1ad2:	bf 91       	pop	r27
    1ad4:	af 91       	pop	r26
    1ad6:	9f 91       	pop	r25
    1ad8:	8f 91       	pop	r24
    1ada:	7f 91       	pop	r23
    1adc:	6f 91       	pop	r22
    1ade:	5f 91       	pop	r21
    1ae0:	4f 91       	pop	r20
    1ae2:	3f 91       	pop	r19
    1ae4:	2f 91       	pop	r18
    1ae6:	0f 90       	pop	r0
    1ae8:	0b be       	out	0x3b, r0	; 59
    1aea:	0f 90       	pop	r0
    1aec:	09 be       	out	0x39, r0	; 57
    1aee:	0f 90       	pop	r0
    1af0:	08 be       	out	0x38, r0	; 56
    1af2:	0f 90       	pop	r0
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	0f 90       	pop	r0
    1af8:	1f 90       	pop	r1
    1afa:	18 95       	reti

00001afc <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1afc:	1f 92       	push	r1
    1afe:	0f 92       	push	r0
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	0f 92       	push	r0
    1b04:	11 24       	eor	r1, r1
    1b06:	08 b6       	in	r0, 0x38	; 56
    1b08:	0f 92       	push	r0
    1b0a:	18 be       	out	0x38, r1	; 56
    1b0c:	09 b6       	in	r0, 0x39	; 57
    1b0e:	0f 92       	push	r0
    1b10:	19 be       	out	0x39, r1	; 57
    1b12:	0b b6       	in	r0, 0x3b	; 59
    1b14:	0f 92       	push	r0
    1b16:	1b be       	out	0x3b, r1	; 59
    1b18:	2f 93       	push	r18
    1b1a:	3f 93       	push	r19
    1b1c:	4f 93       	push	r20
    1b1e:	5f 93       	push	r21
    1b20:	6f 93       	push	r22
    1b22:	7f 93       	push	r23
    1b24:	8f 93       	push	r24
    1b26:	9f 93       	push	r25
    1b28:	af 93       	push	r26
    1b2a:	bf 93       	push	r27
    1b2c:	ef 93       	push	r30
    1b2e:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1b30:	e0 91 3c 20 	lds	r30, 0x203C	; 0x80203c <tc_tce1_cca_callback>
    1b34:	f0 91 3d 20 	lds	r31, 0x203D	; 0x80203d <tc_tce1_cca_callback+0x1>
    1b38:	30 97       	sbiw	r30, 0x00	; 0
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <__vector_55+0x42>
		tc_tce1_cca_callback();
    1b3c:	19 95       	eicall
	}
}
    1b3e:	ff 91       	pop	r31
    1b40:	ef 91       	pop	r30
    1b42:	bf 91       	pop	r27
    1b44:	af 91       	pop	r26
    1b46:	9f 91       	pop	r25
    1b48:	8f 91       	pop	r24
    1b4a:	7f 91       	pop	r23
    1b4c:	6f 91       	pop	r22
    1b4e:	5f 91       	pop	r21
    1b50:	4f 91       	pop	r20
    1b52:	3f 91       	pop	r19
    1b54:	2f 91       	pop	r18
    1b56:	0f 90       	pop	r0
    1b58:	0b be       	out	0x3b, r0	; 59
    1b5a:	0f 90       	pop	r0
    1b5c:	09 be       	out	0x39, r0	; 57
    1b5e:	0f 90       	pop	r0
    1b60:	08 be       	out	0x38, r0	; 56
    1b62:	0f 90       	pop	r0
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	0f 90       	pop	r0
    1b68:	1f 90       	pop	r1
    1b6a:	18 95       	reti

00001b6c <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1b6c:	1f 92       	push	r1
    1b6e:	0f 92       	push	r0
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	0f 92       	push	r0
    1b74:	11 24       	eor	r1, r1
    1b76:	08 b6       	in	r0, 0x38	; 56
    1b78:	0f 92       	push	r0
    1b7a:	18 be       	out	0x38, r1	; 56
    1b7c:	09 b6       	in	r0, 0x39	; 57
    1b7e:	0f 92       	push	r0
    1b80:	19 be       	out	0x39, r1	; 57
    1b82:	0b b6       	in	r0, 0x3b	; 59
    1b84:	0f 92       	push	r0
    1b86:	1b be       	out	0x3b, r1	; 59
    1b88:	2f 93       	push	r18
    1b8a:	3f 93       	push	r19
    1b8c:	4f 93       	push	r20
    1b8e:	5f 93       	push	r21
    1b90:	6f 93       	push	r22
    1b92:	7f 93       	push	r23
    1b94:	8f 93       	push	r24
    1b96:	9f 93       	push	r25
    1b98:	af 93       	push	r26
    1b9a:	bf 93       	push	r27
    1b9c:	ef 93       	push	r30
    1b9e:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1ba0:	e0 91 3a 20 	lds	r30, 0x203A	; 0x80203a <tc_tce1_ccb_callback>
    1ba4:	f0 91 3b 20 	lds	r31, 0x203B	; 0x80203b <tc_tce1_ccb_callback+0x1>
    1ba8:	30 97       	sbiw	r30, 0x00	; 0
    1baa:	09 f0       	breq	.+2      	; 0x1bae <__vector_56+0x42>
		tc_tce1_ccb_callback();
    1bac:	19 95       	eicall
	}
}
    1bae:	ff 91       	pop	r31
    1bb0:	ef 91       	pop	r30
    1bb2:	bf 91       	pop	r27
    1bb4:	af 91       	pop	r26
    1bb6:	9f 91       	pop	r25
    1bb8:	8f 91       	pop	r24
    1bba:	7f 91       	pop	r23
    1bbc:	6f 91       	pop	r22
    1bbe:	5f 91       	pop	r21
    1bc0:	4f 91       	pop	r20
    1bc2:	3f 91       	pop	r19
    1bc4:	2f 91       	pop	r18
    1bc6:	0f 90       	pop	r0
    1bc8:	0b be       	out	0x3b, r0	; 59
    1bca:	0f 90       	pop	r0
    1bcc:	09 be       	out	0x39, r0	; 57
    1bce:	0f 90       	pop	r0
    1bd0:	08 be       	out	0x38, r0	; 56
    1bd2:	0f 90       	pop	r0
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	0f 90       	pop	r0
    1bd8:	1f 90       	pop	r1
    1bda:	18 95       	reti

00001bdc <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1bdc:	1f 92       	push	r1
    1bde:	0f 92       	push	r0
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	0f 92       	push	r0
    1be4:	11 24       	eor	r1, r1
    1be6:	08 b6       	in	r0, 0x38	; 56
    1be8:	0f 92       	push	r0
    1bea:	18 be       	out	0x38, r1	; 56
    1bec:	09 b6       	in	r0, 0x39	; 57
    1bee:	0f 92       	push	r0
    1bf0:	19 be       	out	0x39, r1	; 57
    1bf2:	0b b6       	in	r0, 0x3b	; 59
    1bf4:	0f 92       	push	r0
    1bf6:	1b be       	out	0x3b, r1	; 59
    1bf8:	2f 93       	push	r18
    1bfa:	3f 93       	push	r19
    1bfc:	4f 93       	push	r20
    1bfe:	5f 93       	push	r21
    1c00:	6f 93       	push	r22
    1c02:	7f 93       	push	r23
    1c04:	8f 93       	push	r24
    1c06:	9f 93       	push	r25
    1c08:	af 93       	push	r26
    1c0a:	bf 93       	push	r27
    1c0c:	ef 93       	push	r30
    1c0e:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1c10:	e0 91 38 20 	lds	r30, 0x2038	; 0x802038 <tc_tcf0_ovf_callback>
    1c14:	f0 91 39 20 	lds	r31, 0x2039	; 0x802039 <tc_tcf0_ovf_callback+0x1>
    1c18:	30 97       	sbiw	r30, 0x00	; 0
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    1c1c:	19 95       	eicall
	}
}
    1c1e:	ff 91       	pop	r31
    1c20:	ef 91       	pop	r30
    1c22:	bf 91       	pop	r27
    1c24:	af 91       	pop	r26
    1c26:	9f 91       	pop	r25
    1c28:	8f 91       	pop	r24
    1c2a:	7f 91       	pop	r23
    1c2c:	6f 91       	pop	r22
    1c2e:	5f 91       	pop	r21
    1c30:	4f 91       	pop	r20
    1c32:	3f 91       	pop	r19
    1c34:	2f 91       	pop	r18
    1c36:	0f 90       	pop	r0
    1c38:	0b be       	out	0x3b, r0	; 59
    1c3a:	0f 90       	pop	r0
    1c3c:	09 be       	out	0x39, r0	; 57
    1c3e:	0f 90       	pop	r0
    1c40:	08 be       	out	0x38, r0	; 56
    1c42:	0f 90       	pop	r0
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	0f 90       	pop	r0
    1c48:	1f 90       	pop	r1
    1c4a:	18 95       	reti

00001c4c <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1c4c:	1f 92       	push	r1
    1c4e:	0f 92       	push	r0
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	0f 92       	push	r0
    1c54:	11 24       	eor	r1, r1
    1c56:	08 b6       	in	r0, 0x38	; 56
    1c58:	0f 92       	push	r0
    1c5a:	18 be       	out	0x38, r1	; 56
    1c5c:	09 b6       	in	r0, 0x39	; 57
    1c5e:	0f 92       	push	r0
    1c60:	19 be       	out	0x39, r1	; 57
    1c62:	0b b6       	in	r0, 0x3b	; 59
    1c64:	0f 92       	push	r0
    1c66:	1b be       	out	0x3b, r1	; 59
    1c68:	2f 93       	push	r18
    1c6a:	3f 93       	push	r19
    1c6c:	4f 93       	push	r20
    1c6e:	5f 93       	push	r21
    1c70:	6f 93       	push	r22
    1c72:	7f 93       	push	r23
    1c74:	8f 93       	push	r24
    1c76:	9f 93       	push	r25
    1c78:	af 93       	push	r26
    1c7a:	bf 93       	push	r27
    1c7c:	ef 93       	push	r30
    1c7e:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1c80:	e0 91 36 20 	lds	r30, 0x2036	; 0x802036 <tc_tcf0_err_callback>
    1c84:	f0 91 37 20 	lds	r31, 0x2037	; 0x802037 <tc_tcf0_err_callback+0x1>
    1c88:	30 97       	sbiw	r30, 0x00	; 0
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <__vector_109+0x42>
		tc_tcf0_err_callback();
    1c8c:	19 95       	eicall
	}
}
    1c8e:	ff 91       	pop	r31
    1c90:	ef 91       	pop	r30
    1c92:	bf 91       	pop	r27
    1c94:	af 91       	pop	r26
    1c96:	9f 91       	pop	r25
    1c98:	8f 91       	pop	r24
    1c9a:	7f 91       	pop	r23
    1c9c:	6f 91       	pop	r22
    1c9e:	5f 91       	pop	r21
    1ca0:	4f 91       	pop	r20
    1ca2:	3f 91       	pop	r19
    1ca4:	2f 91       	pop	r18
    1ca6:	0f 90       	pop	r0
    1ca8:	0b be       	out	0x3b, r0	; 59
    1caa:	0f 90       	pop	r0
    1cac:	09 be       	out	0x39, r0	; 57
    1cae:	0f 90       	pop	r0
    1cb0:	08 be       	out	0x38, r0	; 56
    1cb2:	0f 90       	pop	r0
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	0f 90       	pop	r0
    1cb8:	1f 90       	pop	r1
    1cba:	18 95       	reti

00001cbc <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1cbc:	1f 92       	push	r1
    1cbe:	0f 92       	push	r0
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	0f 92       	push	r0
    1cc4:	11 24       	eor	r1, r1
    1cc6:	08 b6       	in	r0, 0x38	; 56
    1cc8:	0f 92       	push	r0
    1cca:	18 be       	out	0x38, r1	; 56
    1ccc:	09 b6       	in	r0, 0x39	; 57
    1cce:	0f 92       	push	r0
    1cd0:	19 be       	out	0x39, r1	; 57
    1cd2:	0b b6       	in	r0, 0x3b	; 59
    1cd4:	0f 92       	push	r0
    1cd6:	1b be       	out	0x3b, r1	; 59
    1cd8:	2f 93       	push	r18
    1cda:	3f 93       	push	r19
    1cdc:	4f 93       	push	r20
    1cde:	5f 93       	push	r21
    1ce0:	6f 93       	push	r22
    1ce2:	7f 93       	push	r23
    1ce4:	8f 93       	push	r24
    1ce6:	9f 93       	push	r25
    1ce8:	af 93       	push	r26
    1cea:	bf 93       	push	r27
    1cec:	ef 93       	push	r30
    1cee:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1cf0:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <tc_tcf0_cca_callback>
    1cf4:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <tc_tcf0_cca_callback+0x1>
    1cf8:	30 97       	sbiw	r30, 0x00	; 0
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <__vector_110+0x42>
		tc_tcf0_cca_callback();
    1cfc:	19 95       	eicall
	}
}
    1cfe:	ff 91       	pop	r31
    1d00:	ef 91       	pop	r30
    1d02:	bf 91       	pop	r27
    1d04:	af 91       	pop	r26
    1d06:	9f 91       	pop	r25
    1d08:	8f 91       	pop	r24
    1d0a:	7f 91       	pop	r23
    1d0c:	6f 91       	pop	r22
    1d0e:	5f 91       	pop	r21
    1d10:	4f 91       	pop	r20
    1d12:	3f 91       	pop	r19
    1d14:	2f 91       	pop	r18
    1d16:	0f 90       	pop	r0
    1d18:	0b be       	out	0x3b, r0	; 59
    1d1a:	0f 90       	pop	r0
    1d1c:	09 be       	out	0x39, r0	; 57
    1d1e:	0f 90       	pop	r0
    1d20:	08 be       	out	0x38, r0	; 56
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	0f 90       	pop	r0
    1d28:	1f 90       	pop	r1
    1d2a:	18 95       	reti

00001d2c <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1d2c:	1f 92       	push	r1
    1d2e:	0f 92       	push	r0
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	0f 92       	push	r0
    1d34:	11 24       	eor	r1, r1
    1d36:	08 b6       	in	r0, 0x38	; 56
    1d38:	0f 92       	push	r0
    1d3a:	18 be       	out	0x38, r1	; 56
    1d3c:	09 b6       	in	r0, 0x39	; 57
    1d3e:	0f 92       	push	r0
    1d40:	19 be       	out	0x39, r1	; 57
    1d42:	0b b6       	in	r0, 0x3b	; 59
    1d44:	0f 92       	push	r0
    1d46:	1b be       	out	0x3b, r1	; 59
    1d48:	2f 93       	push	r18
    1d4a:	3f 93       	push	r19
    1d4c:	4f 93       	push	r20
    1d4e:	5f 93       	push	r21
    1d50:	6f 93       	push	r22
    1d52:	7f 93       	push	r23
    1d54:	8f 93       	push	r24
    1d56:	9f 93       	push	r25
    1d58:	af 93       	push	r26
    1d5a:	bf 93       	push	r27
    1d5c:	ef 93       	push	r30
    1d5e:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1d60:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <tc_tcf0_ccb_callback>
    1d64:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <tc_tcf0_ccb_callback+0x1>
    1d68:	30 97       	sbiw	r30, 0x00	; 0
    1d6a:	09 f0       	breq	.+2      	; 0x1d6e <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1d6c:	19 95       	eicall
	}
}
    1d6e:	ff 91       	pop	r31
    1d70:	ef 91       	pop	r30
    1d72:	bf 91       	pop	r27
    1d74:	af 91       	pop	r26
    1d76:	9f 91       	pop	r25
    1d78:	8f 91       	pop	r24
    1d7a:	7f 91       	pop	r23
    1d7c:	6f 91       	pop	r22
    1d7e:	5f 91       	pop	r21
    1d80:	4f 91       	pop	r20
    1d82:	3f 91       	pop	r19
    1d84:	2f 91       	pop	r18
    1d86:	0f 90       	pop	r0
    1d88:	0b be       	out	0x3b, r0	; 59
    1d8a:	0f 90       	pop	r0
    1d8c:	09 be       	out	0x39, r0	; 57
    1d8e:	0f 90       	pop	r0
    1d90:	08 be       	out	0x38, r0	; 56
    1d92:	0f 90       	pop	r0
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	0f 90       	pop	r0
    1d98:	1f 90       	pop	r1
    1d9a:	18 95       	reti

00001d9c <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1d9c:	1f 92       	push	r1
    1d9e:	0f 92       	push	r0
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	0f 92       	push	r0
    1da4:	11 24       	eor	r1, r1
    1da6:	08 b6       	in	r0, 0x38	; 56
    1da8:	0f 92       	push	r0
    1daa:	18 be       	out	0x38, r1	; 56
    1dac:	09 b6       	in	r0, 0x39	; 57
    1dae:	0f 92       	push	r0
    1db0:	19 be       	out	0x39, r1	; 57
    1db2:	0b b6       	in	r0, 0x3b	; 59
    1db4:	0f 92       	push	r0
    1db6:	1b be       	out	0x3b, r1	; 59
    1db8:	2f 93       	push	r18
    1dba:	3f 93       	push	r19
    1dbc:	4f 93       	push	r20
    1dbe:	5f 93       	push	r21
    1dc0:	6f 93       	push	r22
    1dc2:	7f 93       	push	r23
    1dc4:	8f 93       	push	r24
    1dc6:	9f 93       	push	r25
    1dc8:	af 93       	push	r26
    1dca:	bf 93       	push	r27
    1dcc:	ef 93       	push	r30
    1dce:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1dd0:	e0 91 30 20 	lds	r30, 0x2030	; 0x802030 <tc_tcf0_ccc_callback>
    1dd4:	f0 91 31 20 	lds	r31, 0x2031	; 0x802031 <tc_tcf0_ccc_callback+0x1>
    1dd8:	30 97       	sbiw	r30, 0x00	; 0
    1dda:	09 f0       	breq	.+2      	; 0x1dde <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    1ddc:	19 95       	eicall
	}
}
    1dde:	ff 91       	pop	r31
    1de0:	ef 91       	pop	r30
    1de2:	bf 91       	pop	r27
    1de4:	af 91       	pop	r26
    1de6:	9f 91       	pop	r25
    1de8:	8f 91       	pop	r24
    1dea:	7f 91       	pop	r23
    1dec:	6f 91       	pop	r22
    1dee:	5f 91       	pop	r21
    1df0:	4f 91       	pop	r20
    1df2:	3f 91       	pop	r19
    1df4:	2f 91       	pop	r18
    1df6:	0f 90       	pop	r0
    1df8:	0b be       	out	0x3b, r0	; 59
    1dfa:	0f 90       	pop	r0
    1dfc:	09 be       	out	0x39, r0	; 57
    1dfe:	0f 90       	pop	r0
    1e00:	08 be       	out	0x38, r0	; 56
    1e02:	0f 90       	pop	r0
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	0f 90       	pop	r0
    1e08:	1f 90       	pop	r1
    1e0a:	18 95       	reti

00001e0c <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1e0c:	1f 92       	push	r1
    1e0e:	0f 92       	push	r0
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	0f 92       	push	r0
    1e14:	11 24       	eor	r1, r1
    1e16:	08 b6       	in	r0, 0x38	; 56
    1e18:	0f 92       	push	r0
    1e1a:	18 be       	out	0x38, r1	; 56
    1e1c:	09 b6       	in	r0, 0x39	; 57
    1e1e:	0f 92       	push	r0
    1e20:	19 be       	out	0x39, r1	; 57
    1e22:	0b b6       	in	r0, 0x3b	; 59
    1e24:	0f 92       	push	r0
    1e26:	1b be       	out	0x3b, r1	; 59
    1e28:	2f 93       	push	r18
    1e2a:	3f 93       	push	r19
    1e2c:	4f 93       	push	r20
    1e2e:	5f 93       	push	r21
    1e30:	6f 93       	push	r22
    1e32:	7f 93       	push	r23
    1e34:	8f 93       	push	r24
    1e36:	9f 93       	push	r25
    1e38:	af 93       	push	r26
    1e3a:	bf 93       	push	r27
    1e3c:	ef 93       	push	r30
    1e3e:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1e40:	e0 91 2e 20 	lds	r30, 0x202E	; 0x80202e <tc_tcf0_ccd_callback>
    1e44:	f0 91 2f 20 	lds	r31, 0x202F	; 0x80202f <tc_tcf0_ccd_callback+0x1>
    1e48:	30 97       	sbiw	r30, 0x00	; 0
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1e4c:	19 95       	eicall
	}
}
    1e4e:	ff 91       	pop	r31
    1e50:	ef 91       	pop	r30
    1e52:	bf 91       	pop	r27
    1e54:	af 91       	pop	r26
    1e56:	9f 91       	pop	r25
    1e58:	8f 91       	pop	r24
    1e5a:	7f 91       	pop	r23
    1e5c:	6f 91       	pop	r22
    1e5e:	5f 91       	pop	r21
    1e60:	4f 91       	pop	r20
    1e62:	3f 91       	pop	r19
    1e64:	2f 91       	pop	r18
    1e66:	0f 90       	pop	r0
    1e68:	0b be       	out	0x3b, r0	; 59
    1e6a:	0f 90       	pop	r0
    1e6c:	09 be       	out	0x39, r0	; 57
    1e6e:	0f 90       	pop	r0
    1e70:	08 be       	out	0x38, r0	; 56
    1e72:	0f 90       	pop	r0
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	0f 90       	pop	r0
    1e78:	1f 90       	pop	r1
    1e7a:	18 95       	reti

00001e7c <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1e7c:	1f 92       	push	r1
    1e7e:	0f 92       	push	r0
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	0f 92       	push	r0
    1e84:	11 24       	eor	r1, r1
    1e86:	08 b6       	in	r0, 0x38	; 56
    1e88:	0f 92       	push	r0
    1e8a:	18 be       	out	0x38, r1	; 56
    1e8c:	09 b6       	in	r0, 0x39	; 57
    1e8e:	0f 92       	push	r0
    1e90:	19 be       	out	0x39, r1	; 57
    1e92:	0b b6       	in	r0, 0x3b	; 59
    1e94:	0f 92       	push	r0
    1e96:	1b be       	out	0x3b, r1	; 59
    1e98:	2f 93       	push	r18
    1e9a:	3f 93       	push	r19
    1e9c:	4f 93       	push	r20
    1e9e:	5f 93       	push	r21
    1ea0:	6f 93       	push	r22
    1ea2:	7f 93       	push	r23
    1ea4:	8f 93       	push	r24
    1ea6:	9f 93       	push	r25
    1ea8:	af 93       	push	r26
    1eaa:	bf 93       	push	r27
    1eac:	ef 93       	push	r30
    1eae:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1eb0:	e0 91 2c 20 	lds	r30, 0x202C	; 0x80202c <tc_tcf1_ovf_callback>
    1eb4:	f0 91 2d 20 	lds	r31, 0x202D	; 0x80202d <tc_tcf1_ovf_callback+0x1>
    1eb8:	30 97       	sbiw	r30, 0x00	; 0
    1eba:	09 f0       	breq	.+2      	; 0x1ebe <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1ebc:	19 95       	eicall
	}
}
    1ebe:	ff 91       	pop	r31
    1ec0:	ef 91       	pop	r30
    1ec2:	bf 91       	pop	r27
    1ec4:	af 91       	pop	r26
    1ec6:	9f 91       	pop	r25
    1ec8:	8f 91       	pop	r24
    1eca:	7f 91       	pop	r23
    1ecc:	6f 91       	pop	r22
    1ece:	5f 91       	pop	r21
    1ed0:	4f 91       	pop	r20
    1ed2:	3f 91       	pop	r19
    1ed4:	2f 91       	pop	r18
    1ed6:	0f 90       	pop	r0
    1ed8:	0b be       	out	0x3b, r0	; 59
    1eda:	0f 90       	pop	r0
    1edc:	09 be       	out	0x39, r0	; 57
    1ede:	0f 90       	pop	r0
    1ee0:	08 be       	out	0x38, r0	; 56
    1ee2:	0f 90       	pop	r0
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	0f 90       	pop	r0
    1ee8:	1f 90       	pop	r1
    1eea:	18 95       	reti

00001eec <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    1eec:	1f 92       	push	r1
    1eee:	0f 92       	push	r0
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	0f 92       	push	r0
    1ef4:	11 24       	eor	r1, r1
    1ef6:	08 b6       	in	r0, 0x38	; 56
    1ef8:	0f 92       	push	r0
    1efa:	18 be       	out	0x38, r1	; 56
    1efc:	09 b6       	in	r0, 0x39	; 57
    1efe:	0f 92       	push	r0
    1f00:	19 be       	out	0x39, r1	; 57
    1f02:	0b b6       	in	r0, 0x3b	; 59
    1f04:	0f 92       	push	r0
    1f06:	1b be       	out	0x3b, r1	; 59
    1f08:	2f 93       	push	r18
    1f0a:	3f 93       	push	r19
    1f0c:	4f 93       	push	r20
    1f0e:	5f 93       	push	r21
    1f10:	6f 93       	push	r22
    1f12:	7f 93       	push	r23
    1f14:	8f 93       	push	r24
    1f16:	9f 93       	push	r25
    1f18:	af 93       	push	r26
    1f1a:	bf 93       	push	r27
    1f1c:	ef 93       	push	r30
    1f1e:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    1f20:	e0 91 2a 20 	lds	r30, 0x202A	; 0x80202a <tc_tcf1_err_callback>
    1f24:	f0 91 2b 20 	lds	r31, 0x202B	; 0x80202b <tc_tcf1_err_callback+0x1>
    1f28:	30 97       	sbiw	r30, 0x00	; 0
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <__vector_115+0x42>
		tc_tcf1_err_callback();
    1f2c:	19 95       	eicall
	}
}
    1f2e:	ff 91       	pop	r31
    1f30:	ef 91       	pop	r30
    1f32:	bf 91       	pop	r27
    1f34:	af 91       	pop	r26
    1f36:	9f 91       	pop	r25
    1f38:	8f 91       	pop	r24
    1f3a:	7f 91       	pop	r23
    1f3c:	6f 91       	pop	r22
    1f3e:	5f 91       	pop	r21
    1f40:	4f 91       	pop	r20
    1f42:	3f 91       	pop	r19
    1f44:	2f 91       	pop	r18
    1f46:	0f 90       	pop	r0
    1f48:	0b be       	out	0x3b, r0	; 59
    1f4a:	0f 90       	pop	r0
    1f4c:	09 be       	out	0x39, r0	; 57
    1f4e:	0f 90       	pop	r0
    1f50:	08 be       	out	0x38, r0	; 56
    1f52:	0f 90       	pop	r0
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	0f 90       	pop	r0
    1f58:	1f 90       	pop	r1
    1f5a:	18 95       	reti

00001f5c <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1f5c:	1f 92       	push	r1
    1f5e:	0f 92       	push	r0
    1f60:	0f b6       	in	r0, 0x3f	; 63
    1f62:	0f 92       	push	r0
    1f64:	11 24       	eor	r1, r1
    1f66:	08 b6       	in	r0, 0x38	; 56
    1f68:	0f 92       	push	r0
    1f6a:	18 be       	out	0x38, r1	; 56
    1f6c:	09 b6       	in	r0, 0x39	; 57
    1f6e:	0f 92       	push	r0
    1f70:	19 be       	out	0x39, r1	; 57
    1f72:	0b b6       	in	r0, 0x3b	; 59
    1f74:	0f 92       	push	r0
    1f76:	1b be       	out	0x3b, r1	; 59
    1f78:	2f 93       	push	r18
    1f7a:	3f 93       	push	r19
    1f7c:	4f 93       	push	r20
    1f7e:	5f 93       	push	r21
    1f80:	6f 93       	push	r22
    1f82:	7f 93       	push	r23
    1f84:	8f 93       	push	r24
    1f86:	9f 93       	push	r25
    1f88:	af 93       	push	r26
    1f8a:	bf 93       	push	r27
    1f8c:	ef 93       	push	r30
    1f8e:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1f90:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <tc_tcf1_cca_callback>
    1f94:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <tc_tcf1_cca_callback+0x1>
    1f98:	30 97       	sbiw	r30, 0x00	; 0
    1f9a:	09 f0       	breq	.+2      	; 0x1f9e <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1f9c:	19 95       	eicall
	}
}
    1f9e:	ff 91       	pop	r31
    1fa0:	ef 91       	pop	r30
    1fa2:	bf 91       	pop	r27
    1fa4:	af 91       	pop	r26
    1fa6:	9f 91       	pop	r25
    1fa8:	8f 91       	pop	r24
    1faa:	7f 91       	pop	r23
    1fac:	6f 91       	pop	r22
    1fae:	5f 91       	pop	r21
    1fb0:	4f 91       	pop	r20
    1fb2:	3f 91       	pop	r19
    1fb4:	2f 91       	pop	r18
    1fb6:	0f 90       	pop	r0
    1fb8:	0b be       	out	0x3b, r0	; 59
    1fba:	0f 90       	pop	r0
    1fbc:	09 be       	out	0x39, r0	; 57
    1fbe:	0f 90       	pop	r0
    1fc0:	08 be       	out	0x38, r0	; 56
    1fc2:	0f 90       	pop	r0
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	0f 90       	pop	r0
    1fc8:	1f 90       	pop	r1
    1fca:	18 95       	reti

00001fcc <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1fcc:	1f 92       	push	r1
    1fce:	0f 92       	push	r0
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	0f 92       	push	r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	08 b6       	in	r0, 0x38	; 56
    1fd8:	0f 92       	push	r0
    1fda:	18 be       	out	0x38, r1	; 56
    1fdc:	09 b6       	in	r0, 0x39	; 57
    1fde:	0f 92       	push	r0
    1fe0:	19 be       	out	0x39, r1	; 57
    1fe2:	0b b6       	in	r0, 0x3b	; 59
    1fe4:	0f 92       	push	r0
    1fe6:	1b be       	out	0x3b, r1	; 59
    1fe8:	2f 93       	push	r18
    1fea:	3f 93       	push	r19
    1fec:	4f 93       	push	r20
    1fee:	5f 93       	push	r21
    1ff0:	6f 93       	push	r22
    1ff2:	7f 93       	push	r23
    1ff4:	8f 93       	push	r24
    1ff6:	9f 93       	push	r25
    1ff8:	af 93       	push	r26
    1ffa:	bf 93       	push	r27
    1ffc:	ef 93       	push	r30
    1ffe:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    2000:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <__data_end>
    2004:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <__data_end+0x1>
    2008:	30 97       	sbiw	r30, 0x00	; 0
    200a:	09 f0       	breq	.+2      	; 0x200e <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    200c:	19 95       	eicall
	}
}
    200e:	ff 91       	pop	r31
    2010:	ef 91       	pop	r30
    2012:	bf 91       	pop	r27
    2014:	af 91       	pop	r26
    2016:	9f 91       	pop	r25
    2018:	8f 91       	pop	r24
    201a:	7f 91       	pop	r23
    201c:	6f 91       	pop	r22
    201e:	5f 91       	pop	r21
    2020:	4f 91       	pop	r20
    2022:	3f 91       	pop	r19
    2024:	2f 91       	pop	r18
    2026:	0f 90       	pop	r0
    2028:	0b be       	out	0x3b, r0	; 59
    202a:	0f 90       	pop	r0
    202c:	09 be       	out	0x39, r0	; 57
    202e:	0f 90       	pop	r0
    2030:	08 be       	out	0x38, r0	; 56
    2032:	0f 90       	pop	r0
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	0f 90       	pop	r0
    2038:	1f 90       	pop	r1
    203a:	18 95       	reti

0000203c <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    203c:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    203e:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    2040:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    2042:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    2044:	60 83       	st	Z, r22
	ret                             // Return to caller
    2046:	08 95       	ret

00002048 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2048:	cf 93       	push	r28
    204a:	df 93       	push	r29
    204c:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    2052:	c6 2f       	mov	r28, r22
    2054:	d0 e0       	ldi	r29, 0x00	; 0
    2056:	de 01       	movw	r26, r28
    2058:	02 2e       	mov	r0, r18
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <ioport_configure_port_pin+0x18>
    205c:	b5 95       	asr	r27
    205e:	a7 95       	ror	r26
    2060:	0a 94       	dec	r0
    2062:	e2 f7       	brpl	.-8      	; 0x205c <ioport_configure_port_pin+0x14>
    2064:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2066:	50 8b       	std	Z+16, r21	; 0x10
    2068:	2f 5f       	subi	r18, 0xFF	; 255
    206a:	3f 4f       	sbci	r19, 0xFF	; 255
    206c:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    206e:	28 30       	cpi	r18, 0x08	; 8
    2070:	31 05       	cpc	r19, r1
    2072:	89 f7       	brne	.-30     	; 0x2056 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    2074:	40 ff       	sbrs	r20, 0
    2076:	0a c0       	rjmp	.+20     	; 0x208c <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    2078:	41 ff       	sbrs	r20, 1
    207a:	03 c0       	rjmp	.+6      	; 0x2082 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    207c:	fc 01       	movw	r30, r24
    207e:	65 83       	std	Z+5, r22	; 0x05
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    2082:	fc 01       	movw	r30, r24
    2084:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    2086:	fc 01       	movw	r30, r24
    2088:	61 83       	std	Z+1, r22	; 0x01
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    208c:	fc 01       	movw	r30, r24
    208e:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	08 95       	ret

00002096 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2096:	43 e0       	ldi	r20, 0x03	; 3
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	61 e0       	ldi	r22, 0x01	; 1
    209c:	80 e8       	ldi	r24, 0x80	; 128
    209e:	96 e0       	ldi	r25, 0x06	; 6
    20a0:	d3 df       	rcall	.-90     	; 0x2048 <ioport_configure_port_pin>
    20a2:	43 e0       	ldi	r20, 0x03	; 3
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	62 e0       	ldi	r22, 0x02	; 2
    20a8:	80 e8       	ldi	r24, 0x80	; 128
    20aa:	96 e0       	ldi	r25, 0x06	; 6
    20ac:	cd df       	rcall	.-102    	; 0x2048 <ioport_configure_port_pin>
    20ae:	43 e0       	ldi	r20, 0x03	; 3
    20b0:	50 e0       	ldi	r21, 0x00	; 0
    20b2:	64 e0       	ldi	r22, 0x04	; 4
    20b4:	80 e8       	ldi	r24, 0x80	; 128
    20b6:	96 e0       	ldi	r25, 0x06	; 6
    20b8:	c7 df       	rcall	.-114    	; 0x2048 <ioport_configure_port_pin>
    20ba:	43 e0       	ldi	r20, 0x03	; 3
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	68 e0       	ldi	r22, 0x08	; 8
    20c0:	80 e8       	ldi	r24, 0x80	; 128
    20c2:	96 e0       	ldi	r25, 0x06	; 6
    20c4:	c1 df       	rcall	.-126    	; 0x2048 <ioport_configure_port_pin>
    20c6:	43 e0       	ldi	r20, 0x03	; 3
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	60 e1       	ldi	r22, 0x10	; 16
    20cc:	80 e8       	ldi	r24, 0x80	; 128
    20ce:	96 e0       	ldi	r25, 0x06	; 6
    20d0:	bb df       	rcall	.-138    	; 0x2048 <ioport_configure_port_pin>
    20d2:	43 e0       	ldi	r20, 0x03	; 3
    20d4:	50 e0       	ldi	r21, 0x00	; 0
    20d6:	60 e2       	ldi	r22, 0x20	; 32
    20d8:	80 e8       	ldi	r24, 0x80	; 128
    20da:	96 e0       	ldi	r25, 0x06	; 6
    20dc:	b5 df       	rcall	.-150    	; 0x2048 <ioport_configure_port_pin>
    20de:	43 e0       	ldi	r20, 0x03	; 3
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	60 e4       	ldi	r22, 0x40	; 64
    20e4:	80 e8       	ldi	r24, 0x80	; 128
    20e6:	96 e0       	ldi	r25, 0x06	; 6
    20e8:	af df       	rcall	.-162    	; 0x2048 <ioport_configure_port_pin>
    20ea:	43 e0       	ldi	r20, 0x03	; 3
    20ec:	50 e0       	ldi	r21, 0x00	; 0
    20ee:	60 e8       	ldi	r22, 0x80	; 128
    20f0:	80 e8       	ldi	r24, 0x80	; 128
    20f2:	96 e0       	ldi	r25, 0x06	; 6
    20f4:	a9 df       	rcall	.-174    	; 0x2048 <ioport_configure_port_pin>
    20f6:	40 e0       	ldi	r20, 0x00	; 0
    20f8:	58 e1       	ldi	r21, 0x18	; 24
    20fa:	61 e0       	ldi	r22, 0x01	; 1
    20fc:	80 e6       	ldi	r24, 0x60	; 96
    20fe:	96 e0       	ldi	r25, 0x06	; 6
    2100:	a3 df       	rcall	.-186    	; 0x2048 <ioport_configure_port_pin>
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	58 e1       	ldi	r21, 0x18	; 24
    2106:	62 e0       	ldi	r22, 0x02	; 2
    2108:	80 e6       	ldi	r24, 0x60	; 96
    210a:	96 e0       	ldi	r25, 0x06	; 6
    210c:	9d df       	rcall	.-198    	; 0x2048 <ioport_configure_port_pin>
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	58 e1       	ldi	r21, 0x18	; 24
    2112:	64 e0       	ldi	r22, 0x04	; 4
    2114:	80 e6       	ldi	r24, 0x60	; 96
    2116:	96 e0       	ldi	r25, 0x06	; 6
    2118:	97 df       	rcall	.-210    	; 0x2048 <ioport_configure_port_pin>
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	58 e1       	ldi	r21, 0x18	; 24
    211e:	68 e0       	ldi	r22, 0x08	; 8
    2120:	80 e6       	ldi	r24, 0x60	; 96
    2122:	96 e0       	ldi	r25, 0x06	; 6
    2124:	91 df       	rcall	.-222    	; 0x2048 <ioport_configure_port_pin>
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	58 e1       	ldi	r21, 0x18	; 24
    212a:	60 e1       	ldi	r22, 0x10	; 16
    212c:	80 e6       	ldi	r24, 0x60	; 96
    212e:	96 e0       	ldi	r25, 0x06	; 6
    2130:	8b df       	rcall	.-234    	; 0x2048 <ioport_configure_port_pin>
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	58 e1       	ldi	r21, 0x18	; 24
    2136:	60 e2       	ldi	r22, 0x20	; 32
    2138:	80 e6       	ldi	r24, 0x60	; 96
    213a:	96 e0       	ldi	r25, 0x06	; 6
    213c:	85 df       	rcall	.-246    	; 0x2048 <ioport_configure_port_pin>
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	58 e1       	ldi	r21, 0x18	; 24
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	80 ee       	ldi	r24, 0xE0	; 224
    2146:	97 e0       	ldi	r25, 0x07	; 7
    2148:	7f df       	rcall	.-258    	; 0x2048 <ioport_configure_port_pin>
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	58 e1       	ldi	r21, 0x18	; 24
    214e:	62 e0       	ldi	r22, 0x02	; 2
    2150:	80 ee       	ldi	r24, 0xE0	; 224
    2152:	97 e0       	ldi	r25, 0x07	; 7
    2154:	79 df       	rcall	.-270    	; 0x2048 <ioport_configure_port_pin>
    2156:	43 e0       	ldi	r20, 0x03	; 3
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	60 e8       	ldi	r22, 0x80	; 128
    215c:	80 e4       	ldi	r24, 0x40	; 64
    215e:	96 e0       	ldi	r25, 0x06	; 6
    2160:	73 df       	rcall	.-282    	; 0x2048 <ioport_configure_port_pin>
    2162:	43 e0       	ldi	r20, 0x03	; 3
    2164:	50 e0       	ldi	r21, 0x00	; 0
    2166:	60 e2       	ldi	r22, 0x20	; 32
    2168:	80 e4       	ldi	r24, 0x40	; 64
    216a:	96 e0       	ldi	r25, 0x06	; 6
    216c:	6d df       	rcall	.-294    	; 0x2048 <ioport_configure_port_pin>
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	60 e4       	ldi	r22, 0x40	; 64
    2174:	80 e4       	ldi	r24, 0x40	; 64
    2176:	96 e0       	ldi	r25, 0x06	; 6
    2178:	67 df       	rcall	.-306    	; 0x2048 <ioport_configure_port_pin>
    217a:	43 e0       	ldi	r20, 0x03	; 3
    217c:	50 e0       	ldi	r21, 0x00	; 0
    217e:	68 e0       	ldi	r22, 0x08	; 8
    2180:	80 ec       	ldi	r24, 0xC0	; 192
    2182:	97 e0       	ldi	r25, 0x07	; 7
    2184:	61 df       	rcall	.-318    	; 0x2048 <ioport_configure_port_pin>
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	50 e0       	ldi	r21, 0x00	; 0
    218a:	61 e0       	ldi	r22, 0x01	; 1
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	96 e0       	ldi	r25, 0x06	; 6
    2190:	5b df       	rcall	.-330    	; 0x2048 <ioport_configure_port_pin>
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	64 e0       	ldi	r22, 0x04	; 4
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	96 e0       	ldi	r25, 0x06	; 6
    219c:	55 df       	rcall	.-342    	; 0x2048 <ioport_configure_port_pin>
    219e:	40 e0       	ldi	r20, 0x00	; 0
    21a0:	50 e0       	ldi	r21, 0x00	; 0
    21a2:	62 e0       	ldi	r22, 0x02	; 2
    21a4:	80 e2       	ldi	r24, 0x20	; 32
    21a6:	96 e0       	ldi	r25, 0x06	; 6
    21a8:	4f df       	rcall	.-354    	; 0x2048 <ioport_configure_port_pin>
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	57 e0       	ldi	r21, 0x07	; 7
    21ae:	62 e0       	ldi	r22, 0x02	; 2
    21b0:	80 e2       	ldi	r24, 0x20	; 32
    21b2:	96 e0       	ldi	r25, 0x06	; 6
    21b4:	49 df       	rcall	.-366    	; 0x2048 <ioport_configure_port_pin>
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	57 e0       	ldi	r21, 0x07	; 7
    21ba:	61 e0       	ldi	r22, 0x01	; 1
    21bc:	80 e2       	ldi	r24, 0x20	; 32
    21be:	96 e0       	ldi	r25, 0x06	; 6
    21c0:	43 df       	rcall	.-378    	; 0x2048 <ioport_configure_port_pin>
    21c2:	41 e0       	ldi	r20, 0x01	; 1
    21c4:	50 e0       	ldi	r21, 0x00	; 0
    21c6:	68 e0       	ldi	r22, 0x08	; 8
    21c8:	80 e2       	ldi	r24, 0x20	; 32
    21ca:	96 e0       	ldi	r25, 0x06	; 6
    21cc:	3d df       	rcall	.-390    	; 0x2048 <ioport_configure_port_pin>
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	57 e0       	ldi	r21, 0x07	; 7
    21d2:	64 e0       	ldi	r22, 0x04	; 4
    21d4:	80 e2       	ldi	r24, 0x20	; 32
    21d6:	96 e0       	ldi	r25, 0x06	; 6
    21d8:	37 df       	rcall	.-402    	; 0x2048 <ioport_configure_port_pin>
    21da:	43 e0       	ldi	r20, 0x03	; 3
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	68 e0       	ldi	r22, 0x08	; 8
    21e0:	80 ec       	ldi	r24, 0xC0	; 192
    21e2:	97 e0       	ldi	r25, 0x07	; 7
    21e4:	31 df       	rcall	.-414    	; 0x2048 <ioport_configure_port_pin>
    21e6:	43 e0       	ldi	r20, 0x03	; 3
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	68 e0       	ldi	r22, 0x08	; 8
    21ec:	80 e4       	ldi	r24, 0x40	; 64
    21ee:	96 e0       	ldi	r25, 0x06	; 6
    21f0:	2b df       	rcall	.-426    	; 0x2048 <ioport_configure_port_pin>
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	50 e0       	ldi	r21, 0x00	; 0
    21f6:	64 e0       	ldi	r22, 0x04	; 4
    21f8:	80 e4       	ldi	r24, 0x40	; 64
    21fa:	96 e0       	ldi	r25, 0x06	; 6
    21fc:	25 df       	rcall	.-438    	; 0x2048 <ioport_configure_port_pin>
    21fe:	43 e0       	ldi	r20, 0x03	; 3
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	68 e0       	ldi	r22, 0x08	; 8
    2204:	80 e6       	ldi	r24, 0x60	; 96
    2206:	96 e0       	ldi	r25, 0x06	; 6
    2208:	1f df       	rcall	.-450    	; 0x2048 <ioport_configure_port_pin>
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	50 e0       	ldi	r21, 0x00	; 0
    220e:	64 e0       	ldi	r22, 0x04	; 4
    2210:	80 e6       	ldi	r24, 0x60	; 96
    2212:	96 e0       	ldi	r25, 0x06	; 6
    2214:	19 cf       	rjmp	.-462    	; 0x2048 <ioport_configure_port_pin>
    2216:	08 95       	ret

00002218 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    221e:	0e 94 42 01 	call	0x284	; 0x284 <usart_getchar>
    2222:	88 83       	st	Y, r24
}
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	08 95       	ret

0000222a <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    222a:	0c 94 3a 01 	jmp	0x274	; 0x274 <usart_putchar>
}
    222e:	08 95       	ret

00002230 <init_USART>:
 */ 

#include "USART.h"

void init_USART(void)
{
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	27 97       	sbiw	r28, 0x07	; 7
    223a:	cd bf       	out	0x3d, r28	; 61
    223c:	de bf       	out	0x3e, r29	; 62
		.baudrate = 9600,
		.charlength = USART_CHSIZE_8BIT_gc,
		.paritytype = USART_PMODE_DISABLED_gc,
		.stopbits = true
	};
	PORTC.DIRSET = 0b00001000;
    223e:	e0 e4       	ldi	r30, 0x40	; 64
    2240:	f6 e0       	ldi	r31, 0x06	; 6
    2242:	88 e0       	ldi	r24, 0x08	; 8
    2244:	81 83       	std	Z+1, r24	; 0x01
	PORTC.OUTSET = 0b00001000;
    2246:	85 83       	std	Z+5, r24	; 0x05
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    2248:	80 ea       	ldi	r24, 0xA0	; 160
    224a:	98 e0       	ldi	r25, 0x08	; 8
    224c:	80 93 7e 20 	sts	0x207E, r24	; 0x80207e <stdio_base>
    2250:	90 93 7f 20 	sts	0x207F, r25	; 0x80207f <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2254:	85 e1       	ldi	r24, 0x15	; 21
    2256:	91 e1       	ldi	r25, 0x11	; 17
    2258:	80 93 7c 20 	sts	0x207C, r24	; 0x80207c <ptr_put>
    225c:	90 93 7d 20 	sts	0x207D, r25	; 0x80207d <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    2260:	8c e0       	ldi	r24, 0x0C	; 12
    2262:	91 e1       	ldi	r25, 0x11	; 17
    2264:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <ptr_get>
    2268:	90 93 77 20 	sts	0x2077, r25	; 0x802077 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    226c:	e6 e0       	ldi	r30, 0x06	; 6
    226e:	f0 e2       	ldi	r31, 0x20	; 32
    2270:	84 81       	ldd	r24, Z+4	; 0x04
    2272:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    2274:	85 81       	ldd	r24, Z+5	; 0x05
    2276:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    2278:	86 81       	ldd	r24, Z+6	; 0x06
    227a:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    227c:	80 81       	ld	r24, Z
    227e:	91 81       	ldd	r25, Z+1	; 0x01
    2280:	a2 81       	ldd	r26, Z+2	; 0x02
    2282:	b3 81       	ldd	r27, Z+3	; 0x03
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	ab 83       	std	Y+3, r26	; 0x03
    228a:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    228c:	60 e1       	ldi	r22, 0x10	; 16
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	0e 94 ab 06 	call	0xd56	; 0xd56 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    2294:	be 01       	movw	r22, r28
    2296:	6f 5f       	subi	r22, 0xFF	; 255
    2298:	7f 4f       	sbci	r23, 0xFF	; 255
    229a:	80 ea       	ldi	r24, 0xA0	; 160
    229c:	98 e0       	ldi	r25, 0x08	; 8
    229e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    22a2:	61 e2       	ldi	r22, 0x21	; 33
    22a4:	71 e0       	ldi	r23, 0x01	; 1
    22a6:	81 e7       	ldi	r24, 0x71	; 113
    22a8:	96 e0       	ldi	r25, 0x06	; 6
    22aa:	48 d2       	rcall	.+1168   	; 0x273c <fdevopen>
	stdio_serial_init(&USARTC0, &usart_options);
    22ac:	27 96       	adiw	r28, 0x07	; 7
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    22b6:	08 95       	ret

000022b8 <__portable_avr_delay_cycles>:
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    22b8:	61 50       	subi	r22, 0x01	; 1
    22ba:	71 09       	sbc	r23, r1
    22bc:	81 09       	sbc	r24, r1
    22be:	91 09       	sbc	r25, r1
    22c0:	d9 f7       	brne	.-10     	; 0x22b8 <__portable_avr_delay_cycles>
}
    22c2:	08 95       	ret

000022c4 <main>:
#define DEBUG_LED
//#define DEBUG_USART

int main (void)
{
	sysclk_init();
    22c4:	0e 94 83 06 	call	0xd06	; 0xd06 <sysclk_init>
	board_init();
	
	initLED();
    22c8:	e6 de       	rcall	.-564    	; 0x2096 <board_init>

	init_USART();
    22ca:	0e 94 bc 03 	call	0x778	; 0x778 <initLED>
	#ifdef DEBUG_LED
	while (1)
	{
		for(int i=0;i<4;i++)
		{
			PORTE.OUT = ~i<<4;
    22ce:	b0 df       	rcall	.-160    	; 0x2230 <init_USART>
    22d0:	00 e8       	ldi	r16, 0x80	; 128
#define LED_ON PORTE.OUT = 0b00000000;
#define DEBUG_LED
//#define DEBUG_USART

int main (void)
{
    22d2:	16 e0       	ldi	r17, 0x06	; 6
    22d4:	ff 24       	eor	r15, r15
	

	#ifdef DEBUG_LED
	while (1)
	{
		for(int i=0;i<4;i++)
    22d6:	fa 94       	dec	r15
    22d8:	c1 2c       	mov	r12, r1
		{
			PORTE.OUT = ~i<<4;
    22da:	d1 2c       	mov	r13, r1
    22dc:	8f 2d       	mov	r24, r15
    22de:	82 95       	swap	r24
    22e0:	80 7f       	andi	r24, 0xF0	; 240
    22e2:	f8 01       	movw	r30, r16
			flashLED(i);
    22e4:	84 83       	std	Z+4, r24	; 0x04
    22e6:	c6 01       	movw	r24, r12
    22e8:	0e 94 cc 03 	call	0x798	; 0x798 <flashLED>
    22ec:	ca e0       	ldi	r28, 0x0A	; 10
			for(int j=0;j<10;j++)
			{
				PORTE.OUT ^= 1<<7;
    22ee:	d0 e0       	ldi	r29, 0x00	; 0
    22f0:	f8 01       	movw	r30, r16
    22f2:	84 81       	ldd	r24, Z+4	; 0x04
    22f4:	80 58       	subi	r24, 0x80	; 128
				delay_s(1);
    22f6:	84 83       	std	Z+4, r24	; 0x04
    22f8:	65 e5       	ldi	r22, 0x55	; 85
    22fa:	71 e6       	ldi	r23, 0x61	; 97
    22fc:	81 e5       	ldi	r24, 0x51	; 81
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	db df       	rcall	.-74     	; 0x22b8 <__portable_avr_delay_cycles>
	{
		for(int i=0;i<4;i++)
		{
			PORTE.OUT = ~i<<4;
			flashLED(i);
			for(int j=0;j<10;j++)
    2302:	21 97       	sbiw	r28, 0x01	; 1
	

	#ifdef DEBUG_LED
	while (1)
	{
		for(int i=0;i<4;i++)
    2304:	a9 f7       	brne	.-22     	; 0x22f0 <main+0x2c>
    2306:	ff ef       	ldi	r31, 0xFF	; 255
    2308:	cf 1a       	sub	r12, r31
    230a:	df 0a       	sbc	r13, r31
    230c:	fa 94       	dec	r15
    230e:	8b ef       	ldi	r24, 0xFB	; 251
    2310:	f8 12       	cpse	r15, r24
			{
				PORTE.OUT ^= 1<<7;
				delay_s(1);
			}
		}
		offLED();
    2312:	e4 cf       	rjmp	.-56     	; 0x22dc <main+0x18>
    2314:	0e 94 83 04 	call	0x906	; 0x906 <offLED>
		delay_s(5);
    2318:	6a ea       	ldi	r22, 0xAA	; 170
    231a:	76 ee       	ldi	r23, 0xE6	; 230
    231c:	86 e9       	ldi	r24, 0x96	; 150
    231e:	91 e0       	ldi	r25, 0x01	; 1
	}
    2320:	cb df       	rcall	.-106    	; 0x22b8 <__portable_avr_delay_cycles>
    2322:	d8 cf       	rjmp	.-80     	; 0x22d4 <main+0x10>

00002324 <__subsf3>:
    2324:	50 58       	subi	r21, 0x80	; 128

00002326 <__addsf3>:
    2326:	bb 27       	eor	r27, r27
    2328:	aa 27       	eor	r26, r26
    232a:	0e d0       	rcall	.+28     	; 0x2348 <__addsf3x>
    232c:	48 c1       	rjmp	.+656    	; 0x25be <__fp_round>
    232e:	39 d1       	rcall	.+626    	; 0x25a2 <__fp_pscA>
    2330:	30 f0       	brcs	.+12     	; 0x233e <__addsf3+0x18>
    2332:	3e d1       	rcall	.+636    	; 0x25b0 <__fp_pscB>
    2334:	20 f0       	brcs	.+8      	; 0x233e <__addsf3+0x18>
    2336:	31 f4       	brne	.+12     	; 0x2344 <__addsf3+0x1e>
    2338:	9f 3f       	cpi	r25, 0xFF	; 255
    233a:	11 f4       	brne	.+4      	; 0x2340 <__addsf3+0x1a>
    233c:	1e f4       	brtc	.+6      	; 0x2344 <__addsf3+0x1e>
    233e:	2e c1       	rjmp	.+604    	; 0x259c <__fp_nan>
    2340:	0e f4       	brtc	.+2      	; 0x2344 <__addsf3+0x1e>
    2342:	e0 95       	com	r30
    2344:	e7 fb       	bst	r30, 7
    2346:	24 c1       	rjmp	.+584    	; 0x2590 <__fp_inf>

00002348 <__addsf3x>:
    2348:	e9 2f       	mov	r30, r25
    234a:	4a d1       	rcall	.+660    	; 0x25e0 <__fp_split3>
    234c:	80 f3       	brcs	.-32     	; 0x232e <__addsf3+0x8>
    234e:	ba 17       	cp	r27, r26
    2350:	62 07       	cpc	r22, r18
    2352:	73 07       	cpc	r23, r19
    2354:	84 07       	cpc	r24, r20
    2356:	95 07       	cpc	r25, r21
    2358:	18 f0       	brcs	.+6      	; 0x2360 <__addsf3x+0x18>
    235a:	71 f4       	brne	.+28     	; 0x2378 <__addsf3x+0x30>
    235c:	9e f5       	brtc	.+102    	; 0x23c4 <__addsf3x+0x7c>
    235e:	62 c1       	rjmp	.+708    	; 0x2624 <__fp_zero>
    2360:	0e f4       	brtc	.+2      	; 0x2364 <__addsf3x+0x1c>
    2362:	e0 95       	com	r30
    2364:	0b 2e       	mov	r0, r27
    2366:	ba 2f       	mov	r27, r26
    2368:	a0 2d       	mov	r26, r0
    236a:	0b 01       	movw	r0, r22
    236c:	b9 01       	movw	r22, r18
    236e:	90 01       	movw	r18, r0
    2370:	0c 01       	movw	r0, r24
    2372:	ca 01       	movw	r24, r20
    2374:	a0 01       	movw	r20, r0
    2376:	11 24       	eor	r1, r1
    2378:	ff 27       	eor	r31, r31
    237a:	59 1b       	sub	r21, r25
    237c:	99 f0       	breq	.+38     	; 0x23a4 <__addsf3x+0x5c>
    237e:	59 3f       	cpi	r21, 0xF9	; 249
    2380:	50 f4       	brcc	.+20     	; 0x2396 <__addsf3x+0x4e>
    2382:	50 3e       	cpi	r21, 0xE0	; 224
    2384:	68 f1       	brcs	.+90     	; 0x23e0 <__addsf3x+0x98>
    2386:	1a 16       	cp	r1, r26
    2388:	f0 40       	sbci	r31, 0x00	; 0
    238a:	a2 2f       	mov	r26, r18
    238c:	23 2f       	mov	r18, r19
    238e:	34 2f       	mov	r19, r20
    2390:	44 27       	eor	r20, r20
    2392:	58 5f       	subi	r21, 0xF8	; 248
    2394:	f3 cf       	rjmp	.-26     	; 0x237c <__addsf3x+0x34>
    2396:	46 95       	lsr	r20
    2398:	37 95       	ror	r19
    239a:	27 95       	ror	r18
    239c:	a7 95       	ror	r26
    239e:	f0 40       	sbci	r31, 0x00	; 0
    23a0:	53 95       	inc	r21
    23a2:	c9 f7       	brne	.-14     	; 0x2396 <__addsf3x+0x4e>
    23a4:	7e f4       	brtc	.+30     	; 0x23c4 <__addsf3x+0x7c>
    23a6:	1f 16       	cp	r1, r31
    23a8:	ba 0b       	sbc	r27, r26
    23aa:	62 0b       	sbc	r22, r18
    23ac:	73 0b       	sbc	r23, r19
    23ae:	84 0b       	sbc	r24, r20
    23b0:	ba f0       	brmi	.+46     	; 0x23e0 <__addsf3x+0x98>
    23b2:	91 50       	subi	r25, 0x01	; 1
    23b4:	a1 f0       	breq	.+40     	; 0x23de <__addsf3x+0x96>
    23b6:	ff 0f       	add	r31, r31
    23b8:	bb 1f       	adc	r27, r27
    23ba:	66 1f       	adc	r22, r22
    23bc:	77 1f       	adc	r23, r23
    23be:	88 1f       	adc	r24, r24
    23c0:	c2 f7       	brpl	.-16     	; 0x23b2 <__addsf3x+0x6a>
    23c2:	0e c0       	rjmp	.+28     	; 0x23e0 <__addsf3x+0x98>
    23c4:	ba 0f       	add	r27, r26
    23c6:	62 1f       	adc	r22, r18
    23c8:	73 1f       	adc	r23, r19
    23ca:	84 1f       	adc	r24, r20
    23cc:	48 f4       	brcc	.+18     	; 0x23e0 <__addsf3x+0x98>
    23ce:	87 95       	ror	r24
    23d0:	77 95       	ror	r23
    23d2:	67 95       	ror	r22
    23d4:	b7 95       	ror	r27
    23d6:	f7 95       	ror	r31
    23d8:	9e 3f       	cpi	r25, 0xFE	; 254
    23da:	08 f0       	brcs	.+2      	; 0x23de <__addsf3x+0x96>
    23dc:	b3 cf       	rjmp	.-154    	; 0x2344 <__addsf3+0x1e>
    23de:	93 95       	inc	r25
    23e0:	88 0f       	add	r24, r24
    23e2:	08 f0       	brcs	.+2      	; 0x23e6 <__addsf3x+0x9e>
    23e4:	99 27       	eor	r25, r25
    23e6:	ee 0f       	add	r30, r30
    23e8:	97 95       	ror	r25
    23ea:	87 95       	ror	r24
    23ec:	08 95       	ret

000023ee <__divsf3>:
    23ee:	0c d0       	rcall	.+24     	; 0x2408 <__divsf3x>
    23f0:	e6 c0       	rjmp	.+460    	; 0x25be <__fp_round>
    23f2:	de d0       	rcall	.+444    	; 0x25b0 <__fp_pscB>
    23f4:	40 f0       	brcs	.+16     	; 0x2406 <__divsf3+0x18>
    23f6:	d5 d0       	rcall	.+426    	; 0x25a2 <__fp_pscA>
    23f8:	30 f0       	brcs	.+12     	; 0x2406 <__divsf3+0x18>
    23fa:	21 f4       	brne	.+8      	; 0x2404 <__divsf3+0x16>
    23fc:	5f 3f       	cpi	r21, 0xFF	; 255
    23fe:	19 f0       	breq	.+6      	; 0x2406 <__divsf3+0x18>
    2400:	c7 c0       	rjmp	.+398    	; 0x2590 <__fp_inf>
    2402:	51 11       	cpse	r21, r1
    2404:	10 c1       	rjmp	.+544    	; 0x2626 <__fp_szero>
    2406:	ca c0       	rjmp	.+404    	; 0x259c <__fp_nan>

00002408 <__divsf3x>:
    2408:	eb d0       	rcall	.+470    	; 0x25e0 <__fp_split3>
    240a:	98 f3       	brcs	.-26     	; 0x23f2 <__divsf3+0x4>

0000240c <__divsf3_pse>:
    240c:	99 23       	and	r25, r25
    240e:	c9 f3       	breq	.-14     	; 0x2402 <__divsf3+0x14>
    2410:	55 23       	and	r21, r21
    2412:	b1 f3       	breq	.-20     	; 0x2400 <__divsf3+0x12>
    2414:	95 1b       	sub	r25, r21
    2416:	55 0b       	sbc	r21, r21
    2418:	bb 27       	eor	r27, r27
    241a:	aa 27       	eor	r26, r26
    241c:	62 17       	cp	r22, r18
    241e:	73 07       	cpc	r23, r19
    2420:	84 07       	cpc	r24, r20
    2422:	38 f0       	brcs	.+14     	; 0x2432 <__divsf3_pse+0x26>
    2424:	9f 5f       	subi	r25, 0xFF	; 255
    2426:	5f 4f       	sbci	r21, 0xFF	; 255
    2428:	22 0f       	add	r18, r18
    242a:	33 1f       	adc	r19, r19
    242c:	44 1f       	adc	r20, r20
    242e:	aa 1f       	adc	r26, r26
    2430:	a9 f3       	breq	.-22     	; 0x241c <__divsf3_pse+0x10>
    2432:	33 d0       	rcall	.+102    	; 0x249a <__divsf3_pse+0x8e>
    2434:	0e 2e       	mov	r0, r30
    2436:	3a f0       	brmi	.+14     	; 0x2446 <__divsf3_pse+0x3a>
    2438:	e0 e8       	ldi	r30, 0x80	; 128
    243a:	30 d0       	rcall	.+96     	; 0x249c <__divsf3_pse+0x90>
    243c:	91 50       	subi	r25, 0x01	; 1
    243e:	50 40       	sbci	r21, 0x00	; 0
    2440:	e6 95       	lsr	r30
    2442:	00 1c       	adc	r0, r0
    2444:	ca f7       	brpl	.-14     	; 0x2438 <__divsf3_pse+0x2c>
    2446:	29 d0       	rcall	.+82     	; 0x249a <__divsf3_pse+0x8e>
    2448:	fe 2f       	mov	r31, r30
    244a:	27 d0       	rcall	.+78     	; 0x249a <__divsf3_pse+0x8e>
    244c:	66 0f       	add	r22, r22
    244e:	77 1f       	adc	r23, r23
    2450:	88 1f       	adc	r24, r24
    2452:	bb 1f       	adc	r27, r27
    2454:	26 17       	cp	r18, r22
    2456:	37 07       	cpc	r19, r23
    2458:	48 07       	cpc	r20, r24
    245a:	ab 07       	cpc	r26, r27
    245c:	b0 e8       	ldi	r27, 0x80	; 128
    245e:	09 f0       	breq	.+2      	; 0x2462 <__divsf3_pse+0x56>
    2460:	bb 0b       	sbc	r27, r27
    2462:	80 2d       	mov	r24, r0
    2464:	bf 01       	movw	r22, r30
    2466:	ff 27       	eor	r31, r31
    2468:	93 58       	subi	r25, 0x83	; 131
    246a:	5f 4f       	sbci	r21, 0xFF	; 255
    246c:	2a f0       	brmi	.+10     	; 0x2478 <__divsf3_pse+0x6c>
    246e:	9e 3f       	cpi	r25, 0xFE	; 254
    2470:	51 05       	cpc	r21, r1
    2472:	68 f0       	brcs	.+26     	; 0x248e <__divsf3_pse+0x82>
    2474:	8d c0       	rjmp	.+282    	; 0x2590 <__fp_inf>
    2476:	d7 c0       	rjmp	.+430    	; 0x2626 <__fp_szero>
    2478:	5f 3f       	cpi	r21, 0xFF	; 255
    247a:	ec f3       	brlt	.-6      	; 0x2476 <__divsf3_pse+0x6a>
    247c:	98 3e       	cpi	r25, 0xE8	; 232
    247e:	dc f3       	brlt	.-10     	; 0x2476 <__divsf3_pse+0x6a>
    2480:	86 95       	lsr	r24
    2482:	77 95       	ror	r23
    2484:	67 95       	ror	r22
    2486:	b7 95       	ror	r27
    2488:	f7 95       	ror	r31
    248a:	9f 5f       	subi	r25, 0xFF	; 255
    248c:	c9 f7       	brne	.-14     	; 0x2480 <__divsf3_pse+0x74>
    248e:	88 0f       	add	r24, r24
    2490:	91 1d       	adc	r25, r1
    2492:	96 95       	lsr	r25
    2494:	87 95       	ror	r24
    2496:	97 f9       	bld	r25, 7
    2498:	08 95       	ret
    249a:	e1 e0       	ldi	r30, 0x01	; 1
    249c:	66 0f       	add	r22, r22
    249e:	77 1f       	adc	r23, r23
    24a0:	88 1f       	adc	r24, r24
    24a2:	bb 1f       	adc	r27, r27
    24a4:	62 17       	cp	r22, r18
    24a6:	73 07       	cpc	r23, r19
    24a8:	84 07       	cpc	r24, r20
    24aa:	ba 07       	cpc	r27, r26
    24ac:	20 f0       	brcs	.+8      	; 0x24b6 <__divsf3_pse+0xaa>
    24ae:	62 1b       	sub	r22, r18
    24b0:	73 0b       	sbc	r23, r19
    24b2:	84 0b       	sbc	r24, r20
    24b4:	ba 0b       	sbc	r27, r26
    24b6:	ee 1f       	adc	r30, r30
    24b8:	88 f7       	brcc	.-30     	; 0x249c <__divsf3_pse+0x90>
    24ba:	e0 95       	com	r30
    24bc:	08 95       	ret

000024be <__fixunssfsi>:
    24be:	98 d0       	rcall	.+304    	; 0x25f0 <__fp_splitA>
    24c0:	88 f0       	brcs	.+34     	; 0x24e4 <__fixunssfsi+0x26>
    24c2:	9f 57       	subi	r25, 0x7F	; 127
    24c4:	90 f0       	brcs	.+36     	; 0x24ea <__fixunssfsi+0x2c>
    24c6:	b9 2f       	mov	r27, r25
    24c8:	99 27       	eor	r25, r25
    24ca:	b7 51       	subi	r27, 0x17	; 23
    24cc:	a0 f0       	brcs	.+40     	; 0x24f6 <__fixunssfsi+0x38>
    24ce:	d1 f0       	breq	.+52     	; 0x2504 <__fixunssfsi+0x46>
    24d0:	66 0f       	add	r22, r22
    24d2:	77 1f       	adc	r23, r23
    24d4:	88 1f       	adc	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	1a f0       	brmi	.+6      	; 0x24e0 <__fixunssfsi+0x22>
    24da:	ba 95       	dec	r27
    24dc:	c9 f7       	brne	.-14     	; 0x24d0 <__fixunssfsi+0x12>
    24de:	12 c0       	rjmp	.+36     	; 0x2504 <__fixunssfsi+0x46>
    24e0:	b1 30       	cpi	r27, 0x01	; 1
    24e2:	81 f0       	breq	.+32     	; 0x2504 <__fixunssfsi+0x46>
    24e4:	9f d0       	rcall	.+318    	; 0x2624 <__fp_zero>
    24e6:	b1 e0       	ldi	r27, 0x01	; 1
    24e8:	08 95       	ret
    24ea:	9c c0       	rjmp	.+312    	; 0x2624 <__fp_zero>
    24ec:	67 2f       	mov	r22, r23
    24ee:	78 2f       	mov	r23, r24
    24f0:	88 27       	eor	r24, r24
    24f2:	b8 5f       	subi	r27, 0xF8	; 248
    24f4:	39 f0       	breq	.+14     	; 0x2504 <__fixunssfsi+0x46>
    24f6:	b9 3f       	cpi	r27, 0xF9	; 249
    24f8:	cc f3       	brlt	.-14     	; 0x24ec <__fixunssfsi+0x2e>
    24fa:	86 95       	lsr	r24
    24fc:	77 95       	ror	r23
    24fe:	67 95       	ror	r22
    2500:	b3 95       	inc	r27
    2502:	d9 f7       	brne	.-10     	; 0x24fa <__fixunssfsi+0x3c>
    2504:	3e f4       	brtc	.+14     	; 0x2514 <__fixunssfsi+0x56>
    2506:	90 95       	com	r25
    2508:	80 95       	com	r24
    250a:	70 95       	com	r23
    250c:	61 95       	neg	r22
    250e:	7f 4f       	sbci	r23, 0xFF	; 255
    2510:	8f 4f       	sbci	r24, 0xFF	; 255
    2512:	9f 4f       	sbci	r25, 0xFF	; 255
    2514:	08 95       	ret

00002516 <__floatunsisf>:
    2516:	e8 94       	clt
    2518:	09 c0       	rjmp	.+18     	; 0x252c <__floatsisf+0x12>

0000251a <__floatsisf>:
    251a:	97 fb       	bst	r25, 7
    251c:	3e f4       	brtc	.+14     	; 0x252c <__floatsisf+0x12>
    251e:	90 95       	com	r25
    2520:	80 95       	com	r24
    2522:	70 95       	com	r23
    2524:	61 95       	neg	r22
    2526:	7f 4f       	sbci	r23, 0xFF	; 255
    2528:	8f 4f       	sbci	r24, 0xFF	; 255
    252a:	9f 4f       	sbci	r25, 0xFF	; 255
    252c:	99 23       	and	r25, r25
    252e:	a9 f0       	breq	.+42     	; 0x255a <__floatsisf+0x40>
    2530:	f9 2f       	mov	r31, r25
    2532:	96 e9       	ldi	r25, 0x96	; 150
    2534:	bb 27       	eor	r27, r27
    2536:	93 95       	inc	r25
    2538:	f6 95       	lsr	r31
    253a:	87 95       	ror	r24
    253c:	77 95       	ror	r23
    253e:	67 95       	ror	r22
    2540:	b7 95       	ror	r27
    2542:	f1 11       	cpse	r31, r1
    2544:	f8 cf       	rjmp	.-16     	; 0x2536 <__floatsisf+0x1c>
    2546:	fa f4       	brpl	.+62     	; 0x2586 <__floatsisf+0x6c>
    2548:	bb 0f       	add	r27, r27
    254a:	11 f4       	brne	.+4      	; 0x2550 <__floatsisf+0x36>
    254c:	60 ff       	sbrs	r22, 0
    254e:	1b c0       	rjmp	.+54     	; 0x2586 <__floatsisf+0x6c>
    2550:	6f 5f       	subi	r22, 0xFF	; 255
    2552:	7f 4f       	sbci	r23, 0xFF	; 255
    2554:	8f 4f       	sbci	r24, 0xFF	; 255
    2556:	9f 4f       	sbci	r25, 0xFF	; 255
    2558:	16 c0       	rjmp	.+44     	; 0x2586 <__floatsisf+0x6c>
    255a:	88 23       	and	r24, r24
    255c:	11 f0       	breq	.+4      	; 0x2562 <__floatsisf+0x48>
    255e:	96 e9       	ldi	r25, 0x96	; 150
    2560:	11 c0       	rjmp	.+34     	; 0x2584 <__floatsisf+0x6a>
    2562:	77 23       	and	r23, r23
    2564:	21 f0       	breq	.+8      	; 0x256e <__floatsisf+0x54>
    2566:	9e e8       	ldi	r25, 0x8E	; 142
    2568:	87 2f       	mov	r24, r23
    256a:	76 2f       	mov	r23, r22
    256c:	05 c0       	rjmp	.+10     	; 0x2578 <__floatsisf+0x5e>
    256e:	66 23       	and	r22, r22
    2570:	71 f0       	breq	.+28     	; 0x258e <__floatsisf+0x74>
    2572:	96 e8       	ldi	r25, 0x86	; 134
    2574:	86 2f       	mov	r24, r22
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	60 e0       	ldi	r22, 0x00	; 0
    257a:	2a f0       	brmi	.+10     	; 0x2586 <__floatsisf+0x6c>
    257c:	9a 95       	dec	r25
    257e:	66 0f       	add	r22, r22
    2580:	77 1f       	adc	r23, r23
    2582:	88 1f       	adc	r24, r24
    2584:	da f7       	brpl	.-10     	; 0x257c <__floatsisf+0x62>
    2586:	88 0f       	add	r24, r24
    2588:	96 95       	lsr	r25
    258a:	87 95       	ror	r24
    258c:	97 f9       	bld	r25, 7
    258e:	08 95       	ret

00002590 <__fp_inf>:
    2590:	97 f9       	bld	r25, 7
    2592:	9f 67       	ori	r25, 0x7F	; 127
    2594:	80 e8       	ldi	r24, 0x80	; 128
    2596:	70 e0       	ldi	r23, 0x00	; 0
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	08 95       	ret

0000259c <__fp_nan>:
    259c:	9f ef       	ldi	r25, 0xFF	; 255
    259e:	80 ec       	ldi	r24, 0xC0	; 192
    25a0:	08 95       	ret

000025a2 <__fp_pscA>:
    25a2:	00 24       	eor	r0, r0
    25a4:	0a 94       	dec	r0
    25a6:	16 16       	cp	r1, r22
    25a8:	17 06       	cpc	r1, r23
    25aa:	18 06       	cpc	r1, r24
    25ac:	09 06       	cpc	r0, r25
    25ae:	08 95       	ret

000025b0 <__fp_pscB>:
    25b0:	00 24       	eor	r0, r0
    25b2:	0a 94       	dec	r0
    25b4:	12 16       	cp	r1, r18
    25b6:	13 06       	cpc	r1, r19
    25b8:	14 06       	cpc	r1, r20
    25ba:	05 06       	cpc	r0, r21
    25bc:	08 95       	ret

000025be <__fp_round>:
    25be:	09 2e       	mov	r0, r25
    25c0:	03 94       	inc	r0
    25c2:	00 0c       	add	r0, r0
    25c4:	11 f4       	brne	.+4      	; 0x25ca <__fp_round+0xc>
    25c6:	88 23       	and	r24, r24
    25c8:	52 f0       	brmi	.+20     	; 0x25de <__fp_round+0x20>
    25ca:	bb 0f       	add	r27, r27
    25cc:	40 f4       	brcc	.+16     	; 0x25de <__fp_round+0x20>
    25ce:	bf 2b       	or	r27, r31
    25d0:	11 f4       	brne	.+4      	; 0x25d6 <__fp_round+0x18>
    25d2:	60 ff       	sbrs	r22, 0
    25d4:	04 c0       	rjmp	.+8      	; 0x25de <__fp_round+0x20>
    25d6:	6f 5f       	subi	r22, 0xFF	; 255
    25d8:	7f 4f       	sbci	r23, 0xFF	; 255
    25da:	8f 4f       	sbci	r24, 0xFF	; 255
    25dc:	9f 4f       	sbci	r25, 0xFF	; 255
    25de:	08 95       	ret

000025e0 <__fp_split3>:
    25e0:	57 fd       	sbrc	r21, 7
    25e2:	90 58       	subi	r25, 0x80	; 128
    25e4:	44 0f       	add	r20, r20
    25e6:	55 1f       	adc	r21, r21
    25e8:	59 f0       	breq	.+22     	; 0x2600 <__fp_splitA+0x10>
    25ea:	5f 3f       	cpi	r21, 0xFF	; 255
    25ec:	71 f0       	breq	.+28     	; 0x260a <__fp_splitA+0x1a>
    25ee:	47 95       	ror	r20

000025f0 <__fp_splitA>:
    25f0:	88 0f       	add	r24, r24
    25f2:	97 fb       	bst	r25, 7
    25f4:	99 1f       	adc	r25, r25
    25f6:	61 f0       	breq	.+24     	; 0x2610 <__fp_splitA+0x20>
    25f8:	9f 3f       	cpi	r25, 0xFF	; 255
    25fa:	79 f0       	breq	.+30     	; 0x261a <__fp_splitA+0x2a>
    25fc:	87 95       	ror	r24
    25fe:	08 95       	ret
    2600:	12 16       	cp	r1, r18
    2602:	13 06       	cpc	r1, r19
    2604:	14 06       	cpc	r1, r20
    2606:	55 1f       	adc	r21, r21
    2608:	f2 cf       	rjmp	.-28     	; 0x25ee <__fp_split3+0xe>
    260a:	46 95       	lsr	r20
    260c:	f1 df       	rcall	.-30     	; 0x25f0 <__fp_splitA>
    260e:	08 c0       	rjmp	.+16     	; 0x2620 <__fp_splitA+0x30>
    2610:	16 16       	cp	r1, r22
    2612:	17 06       	cpc	r1, r23
    2614:	18 06       	cpc	r1, r24
    2616:	99 1f       	adc	r25, r25
    2618:	f1 cf       	rjmp	.-30     	; 0x25fc <__fp_splitA+0xc>
    261a:	86 95       	lsr	r24
    261c:	71 05       	cpc	r23, r1
    261e:	61 05       	cpc	r22, r1
    2620:	08 94       	sec
    2622:	08 95       	ret

00002624 <__fp_zero>:
    2624:	e8 94       	clt

00002626 <__fp_szero>:
    2626:	bb 27       	eor	r27, r27
    2628:	66 27       	eor	r22, r22
    262a:	77 27       	eor	r23, r23
    262c:	cb 01       	movw	r24, r22
    262e:	97 f9       	bld	r25, 7
    2630:	08 95       	ret

00002632 <__mulsf3>:
    2632:	0b d0       	rcall	.+22     	; 0x264a <__mulsf3x>
    2634:	c4 cf       	rjmp	.-120    	; 0x25be <__fp_round>
    2636:	b5 df       	rcall	.-150    	; 0x25a2 <__fp_pscA>
    2638:	28 f0       	brcs	.+10     	; 0x2644 <__mulsf3+0x12>
    263a:	ba df       	rcall	.-140    	; 0x25b0 <__fp_pscB>
    263c:	18 f0       	brcs	.+6      	; 0x2644 <__mulsf3+0x12>
    263e:	95 23       	and	r25, r21
    2640:	09 f0       	breq	.+2      	; 0x2644 <__mulsf3+0x12>
    2642:	a6 cf       	rjmp	.-180    	; 0x2590 <__fp_inf>
    2644:	ab cf       	rjmp	.-170    	; 0x259c <__fp_nan>
    2646:	11 24       	eor	r1, r1
    2648:	ee cf       	rjmp	.-36     	; 0x2626 <__fp_szero>

0000264a <__mulsf3x>:
    264a:	ca df       	rcall	.-108    	; 0x25e0 <__fp_split3>
    264c:	a0 f3       	brcs	.-24     	; 0x2636 <__mulsf3+0x4>

0000264e <__mulsf3_pse>:
    264e:	95 9f       	mul	r25, r21
    2650:	d1 f3       	breq	.-12     	; 0x2646 <__mulsf3+0x14>
    2652:	95 0f       	add	r25, r21
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	55 1f       	adc	r21, r21
    2658:	62 9f       	mul	r22, r18
    265a:	f0 01       	movw	r30, r0
    265c:	72 9f       	mul	r23, r18
    265e:	bb 27       	eor	r27, r27
    2660:	f0 0d       	add	r31, r0
    2662:	b1 1d       	adc	r27, r1
    2664:	63 9f       	mul	r22, r19
    2666:	aa 27       	eor	r26, r26
    2668:	f0 0d       	add	r31, r0
    266a:	b1 1d       	adc	r27, r1
    266c:	aa 1f       	adc	r26, r26
    266e:	64 9f       	mul	r22, r20
    2670:	66 27       	eor	r22, r22
    2672:	b0 0d       	add	r27, r0
    2674:	a1 1d       	adc	r26, r1
    2676:	66 1f       	adc	r22, r22
    2678:	82 9f       	mul	r24, r18
    267a:	22 27       	eor	r18, r18
    267c:	b0 0d       	add	r27, r0
    267e:	a1 1d       	adc	r26, r1
    2680:	62 1f       	adc	r22, r18
    2682:	73 9f       	mul	r23, r19
    2684:	b0 0d       	add	r27, r0
    2686:	a1 1d       	adc	r26, r1
    2688:	62 1f       	adc	r22, r18
    268a:	83 9f       	mul	r24, r19
    268c:	a0 0d       	add	r26, r0
    268e:	61 1d       	adc	r22, r1
    2690:	22 1f       	adc	r18, r18
    2692:	74 9f       	mul	r23, r20
    2694:	33 27       	eor	r19, r19
    2696:	a0 0d       	add	r26, r0
    2698:	61 1d       	adc	r22, r1
    269a:	23 1f       	adc	r18, r19
    269c:	84 9f       	mul	r24, r20
    269e:	60 0d       	add	r22, r0
    26a0:	21 1d       	adc	r18, r1
    26a2:	82 2f       	mov	r24, r18
    26a4:	76 2f       	mov	r23, r22
    26a6:	6a 2f       	mov	r22, r26
    26a8:	11 24       	eor	r1, r1
    26aa:	9f 57       	subi	r25, 0x7F	; 127
    26ac:	50 40       	sbci	r21, 0x00	; 0
    26ae:	8a f0       	brmi	.+34     	; 0x26d2 <__mulsf3_pse+0x84>
    26b0:	e1 f0       	breq	.+56     	; 0x26ea <__mulsf3_pse+0x9c>
    26b2:	88 23       	and	r24, r24
    26b4:	4a f0       	brmi	.+18     	; 0x26c8 <__mulsf3_pse+0x7a>
    26b6:	ee 0f       	add	r30, r30
    26b8:	ff 1f       	adc	r31, r31
    26ba:	bb 1f       	adc	r27, r27
    26bc:	66 1f       	adc	r22, r22
    26be:	77 1f       	adc	r23, r23
    26c0:	88 1f       	adc	r24, r24
    26c2:	91 50       	subi	r25, 0x01	; 1
    26c4:	50 40       	sbci	r21, 0x00	; 0
    26c6:	a9 f7       	brne	.-22     	; 0x26b2 <__mulsf3_pse+0x64>
    26c8:	9e 3f       	cpi	r25, 0xFE	; 254
    26ca:	51 05       	cpc	r21, r1
    26cc:	70 f0       	brcs	.+28     	; 0x26ea <__mulsf3_pse+0x9c>
    26ce:	60 cf       	rjmp	.-320    	; 0x2590 <__fp_inf>
    26d0:	aa cf       	rjmp	.-172    	; 0x2626 <__fp_szero>
    26d2:	5f 3f       	cpi	r21, 0xFF	; 255
    26d4:	ec f3       	brlt	.-6      	; 0x26d0 <__mulsf3_pse+0x82>
    26d6:	98 3e       	cpi	r25, 0xE8	; 232
    26d8:	dc f3       	brlt	.-10     	; 0x26d0 <__mulsf3_pse+0x82>
    26da:	86 95       	lsr	r24
    26dc:	77 95       	ror	r23
    26de:	67 95       	ror	r22
    26e0:	b7 95       	ror	r27
    26e2:	f7 95       	ror	r31
    26e4:	e7 95       	ror	r30
    26e6:	9f 5f       	subi	r25, 0xFF	; 255
    26e8:	c1 f7       	brne	.-16     	; 0x26da <__mulsf3_pse+0x8c>
    26ea:	fe 2b       	or	r31, r30
    26ec:	88 0f       	add	r24, r24
    26ee:	91 1d       	adc	r25, r1
    26f0:	96 95       	lsr	r25
    26f2:	87 95       	ror	r24
    26f4:	97 f9       	bld	r25, 7
    26f6:	08 95       	ret

000026f8 <__udivmodsi4>:
    26f8:	a1 e2       	ldi	r26, 0x21	; 33
    26fa:	1a 2e       	mov	r1, r26
    26fc:	aa 1b       	sub	r26, r26
    26fe:	bb 1b       	sub	r27, r27
    2700:	fd 01       	movw	r30, r26
    2702:	0d c0       	rjmp	.+26     	; 0x271e <__udivmodsi4_ep>

00002704 <__udivmodsi4_loop>:
    2704:	aa 1f       	adc	r26, r26
    2706:	bb 1f       	adc	r27, r27
    2708:	ee 1f       	adc	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	a2 17       	cp	r26, r18
    270e:	b3 07       	cpc	r27, r19
    2710:	e4 07       	cpc	r30, r20
    2712:	f5 07       	cpc	r31, r21
    2714:	20 f0       	brcs	.+8      	; 0x271e <__udivmodsi4_ep>
    2716:	a2 1b       	sub	r26, r18
    2718:	b3 0b       	sbc	r27, r19
    271a:	e4 0b       	sbc	r30, r20
    271c:	f5 0b       	sbc	r31, r21

0000271e <__udivmodsi4_ep>:
    271e:	66 1f       	adc	r22, r22
    2720:	77 1f       	adc	r23, r23
    2722:	88 1f       	adc	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	1a 94       	dec	r1
    2728:	69 f7       	brne	.-38     	; 0x2704 <__udivmodsi4_loop>
    272a:	60 95       	com	r22
    272c:	70 95       	com	r23
    272e:	80 95       	com	r24
    2730:	90 95       	com	r25
    2732:	9b 01       	movw	r18, r22
    2734:	ac 01       	movw	r20, r24
    2736:	bd 01       	movw	r22, r26
    2738:	cf 01       	movw	r24, r30
    273a:	08 95       	ret

0000273c <fdevopen>:
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	31 f4       	brne	.+12     	; 0x2754 <fdevopen+0x18>
    2748:	61 15       	cp	r22, r1
    274a:	71 05       	cpc	r23, r1
    274c:	19 f4       	brne	.+6      	; 0x2754 <fdevopen+0x18>
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	39 c0       	rjmp	.+114    	; 0x27c6 <fdevopen+0x8a>
    2754:	8b 01       	movw	r16, r22
    2756:	ec 01       	movw	r28, r24
    2758:	6e e0       	ldi	r22, 0x0E	; 14
    275a:	70 e0       	ldi	r23, 0x00	; 0
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	37 d0       	rcall	.+110    	; 0x27d0 <calloc>
    2762:	fc 01       	movw	r30, r24
    2764:	89 2b       	or	r24, r25
    2766:	99 f3       	breq	.-26     	; 0x274e <fdevopen+0x12>
    2768:	80 e8       	ldi	r24, 0x80	; 128
    276a:	83 83       	std	Z+3, r24	; 0x03
    276c:	01 15       	cp	r16, r1
    276e:	11 05       	cpc	r17, r1
    2770:	71 f0       	breq	.+28     	; 0x278e <fdevopen+0x52>
    2772:	02 87       	std	Z+10, r16	; 0x0a
    2774:	13 87       	std	Z+11, r17	; 0x0b
    2776:	81 e8       	ldi	r24, 0x81	; 129
    2778:	83 83       	std	Z+3, r24	; 0x03
    277a:	80 91 88 20 	lds	r24, 0x2088	; 0x802088 <__iob>
    277e:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <__iob+0x1>
    2782:	89 2b       	or	r24, r25
    2784:	21 f4       	brne	.+8      	; 0x278e <fdevopen+0x52>
    2786:	e0 93 88 20 	sts	0x2088, r30	; 0x802088 <__iob>
    278a:	f0 93 89 20 	sts	0x2089, r31	; 0x802089 <__iob+0x1>
    278e:	20 97       	sbiw	r28, 0x00	; 0
    2790:	c9 f0       	breq	.+50     	; 0x27c4 <fdevopen+0x88>
    2792:	c0 87       	std	Z+8, r28	; 0x08
    2794:	d1 87       	std	Z+9, r29	; 0x09
    2796:	83 81       	ldd	r24, Z+3	; 0x03
    2798:	82 60       	ori	r24, 0x02	; 2
    279a:	83 83       	std	Z+3, r24	; 0x03
    279c:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <__iob+0x2>
    27a0:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <__iob+0x3>
    27a4:	89 2b       	or	r24, r25
    27a6:	71 f4       	brne	.+28     	; 0x27c4 <fdevopen+0x88>
    27a8:	e0 93 8a 20 	sts	0x208A, r30	; 0x80208a <__iob+0x2>
    27ac:	f0 93 8b 20 	sts	0x208B, r31	; 0x80208b <__iob+0x3>
    27b0:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <__iob+0x4>
    27b4:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <__iob+0x5>
    27b8:	89 2b       	or	r24, r25
    27ba:	21 f4       	brne	.+8      	; 0x27c4 <fdevopen+0x88>
    27bc:	e0 93 8c 20 	sts	0x208C, r30	; 0x80208c <__iob+0x4>
    27c0:	f0 93 8d 20 	sts	0x208D, r31	; 0x80208d <__iob+0x5>
    27c4:	cf 01       	movw	r24, r30
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	08 95       	ret

000027d0 <calloc>:
    27d0:	0f 93       	push	r16
    27d2:	1f 93       	push	r17
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	86 9f       	mul	r24, r22
    27da:	80 01       	movw	r16, r0
    27dc:	87 9f       	mul	r24, r23
    27de:	10 0d       	add	r17, r0
    27e0:	96 9f       	mul	r25, r22
    27e2:	10 0d       	add	r17, r0
    27e4:	11 24       	eor	r1, r1
    27e6:	c8 01       	movw	r24, r16
    27e8:	0d d0       	rcall	.+26     	; 0x2804 <malloc>
    27ea:	ec 01       	movw	r28, r24
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	21 f0       	breq	.+8      	; 0x27f8 <calloc+0x28>
    27f0:	a8 01       	movw	r20, r16
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	70 e0       	ldi	r23, 0x00	; 0
    27f6:	27 d1       	rcall	.+590    	; 0x2a46 <memset>
    27f8:	ce 01       	movw	r24, r28
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	08 95       	ret

00002804 <malloc>:
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	82 30       	cpi	r24, 0x02	; 2
    280e:	91 05       	cpc	r25, r1
    2810:	10 f4       	brcc	.+4      	; 0x2816 <malloc+0x12>
    2812:	82 e0       	ldi	r24, 0x02	; 2
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	e0 91 90 20 	lds	r30, 0x2090	; 0x802090 <__flp>
    281a:	f0 91 91 20 	lds	r31, 0x2091	; 0x802091 <__flp+0x1>
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	a0 e0       	ldi	r26, 0x00	; 0
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	30 97       	sbiw	r30, 0x00	; 0
    2828:	19 f1       	breq	.+70     	; 0x2870 <malloc+0x6c>
    282a:	40 81       	ld	r20, Z
    282c:	51 81       	ldd	r21, Z+1	; 0x01
    282e:	02 81       	ldd	r16, Z+2	; 0x02
    2830:	13 81       	ldd	r17, Z+3	; 0x03
    2832:	48 17       	cp	r20, r24
    2834:	59 07       	cpc	r21, r25
    2836:	c8 f0       	brcs	.+50     	; 0x286a <malloc+0x66>
    2838:	84 17       	cp	r24, r20
    283a:	95 07       	cpc	r25, r21
    283c:	69 f4       	brne	.+26     	; 0x2858 <malloc+0x54>
    283e:	10 97       	sbiw	r26, 0x00	; 0
    2840:	31 f0       	breq	.+12     	; 0x284e <malloc+0x4a>
    2842:	12 96       	adiw	r26, 0x02	; 2
    2844:	0c 93       	st	X, r16
    2846:	12 97       	sbiw	r26, 0x02	; 2
    2848:	13 96       	adiw	r26, 0x03	; 3
    284a:	1c 93       	st	X, r17
    284c:	27 c0       	rjmp	.+78     	; 0x289c <malloc+0x98>
    284e:	00 93 90 20 	sts	0x2090, r16	; 0x802090 <__flp>
    2852:	10 93 91 20 	sts	0x2091, r17	; 0x802091 <__flp+0x1>
    2856:	22 c0       	rjmp	.+68     	; 0x289c <malloc+0x98>
    2858:	21 15       	cp	r18, r1
    285a:	31 05       	cpc	r19, r1
    285c:	19 f0       	breq	.+6      	; 0x2864 <malloc+0x60>
    285e:	42 17       	cp	r20, r18
    2860:	53 07       	cpc	r21, r19
    2862:	18 f4       	brcc	.+6      	; 0x286a <malloc+0x66>
    2864:	9a 01       	movw	r18, r20
    2866:	bd 01       	movw	r22, r26
    2868:	ef 01       	movw	r28, r30
    286a:	df 01       	movw	r26, r30
    286c:	f8 01       	movw	r30, r16
    286e:	db cf       	rjmp	.-74     	; 0x2826 <malloc+0x22>
    2870:	21 15       	cp	r18, r1
    2872:	31 05       	cpc	r19, r1
    2874:	f9 f0       	breq	.+62     	; 0x28b4 <malloc+0xb0>
    2876:	28 1b       	sub	r18, r24
    2878:	39 0b       	sbc	r19, r25
    287a:	24 30       	cpi	r18, 0x04	; 4
    287c:	31 05       	cpc	r19, r1
    287e:	80 f4       	brcc	.+32     	; 0x28a0 <malloc+0x9c>
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	9b 81       	ldd	r25, Y+3	; 0x03
    2884:	61 15       	cp	r22, r1
    2886:	71 05       	cpc	r23, r1
    2888:	21 f0       	breq	.+8      	; 0x2892 <malloc+0x8e>
    288a:	fb 01       	movw	r30, r22
    288c:	82 83       	std	Z+2, r24	; 0x02
    288e:	93 83       	std	Z+3, r25	; 0x03
    2890:	04 c0       	rjmp	.+8      	; 0x289a <malloc+0x96>
    2892:	80 93 90 20 	sts	0x2090, r24	; 0x802090 <__flp>
    2896:	90 93 91 20 	sts	0x2091, r25	; 0x802091 <__flp+0x1>
    289a:	fe 01       	movw	r30, r28
    289c:	32 96       	adiw	r30, 0x02	; 2
    289e:	44 c0       	rjmp	.+136    	; 0x2928 <malloc+0x124>
    28a0:	fe 01       	movw	r30, r28
    28a2:	e2 0f       	add	r30, r18
    28a4:	f3 1f       	adc	r31, r19
    28a6:	81 93       	st	Z+, r24
    28a8:	91 93       	st	Z+, r25
    28aa:	22 50       	subi	r18, 0x02	; 2
    28ac:	31 09       	sbc	r19, r1
    28ae:	28 83       	st	Y, r18
    28b0:	39 83       	std	Y+1, r19	; 0x01
    28b2:	3a c0       	rjmp	.+116    	; 0x2928 <malloc+0x124>
    28b4:	20 91 8e 20 	lds	r18, 0x208E	; 0x80208e <__brkval>
    28b8:	30 91 8f 20 	lds	r19, 0x208F	; 0x80208f <__brkval+0x1>
    28bc:	23 2b       	or	r18, r19
    28be:	41 f4       	brne	.+16     	; 0x28d0 <malloc+0xcc>
    28c0:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    28c4:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    28c8:	20 93 8e 20 	sts	0x208E, r18	; 0x80208e <__brkval>
    28cc:	30 93 8f 20 	sts	0x208F, r19	; 0x80208f <__brkval+0x1>
    28d0:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    28d4:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    28d8:	21 15       	cp	r18, r1
    28da:	31 05       	cpc	r19, r1
    28dc:	41 f4       	brne	.+16     	; 0x28ee <malloc+0xea>
    28de:	2d b7       	in	r18, 0x3d	; 61
    28e0:	3e b7       	in	r19, 0x3e	; 62
    28e2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    28e6:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    28ea:	24 1b       	sub	r18, r20
    28ec:	35 0b       	sbc	r19, r21
    28ee:	e0 91 8e 20 	lds	r30, 0x208E	; 0x80208e <__brkval>
    28f2:	f0 91 8f 20 	lds	r31, 0x208F	; 0x80208f <__brkval+0x1>
    28f6:	e2 17       	cp	r30, r18
    28f8:	f3 07       	cpc	r31, r19
    28fa:	a0 f4       	brcc	.+40     	; 0x2924 <malloc+0x120>
    28fc:	2e 1b       	sub	r18, r30
    28fe:	3f 0b       	sbc	r19, r31
    2900:	28 17       	cp	r18, r24
    2902:	39 07       	cpc	r19, r25
    2904:	78 f0       	brcs	.+30     	; 0x2924 <malloc+0x120>
    2906:	ac 01       	movw	r20, r24
    2908:	4e 5f       	subi	r20, 0xFE	; 254
    290a:	5f 4f       	sbci	r21, 0xFF	; 255
    290c:	24 17       	cp	r18, r20
    290e:	35 07       	cpc	r19, r21
    2910:	48 f0       	brcs	.+18     	; 0x2924 <malloc+0x120>
    2912:	4e 0f       	add	r20, r30
    2914:	5f 1f       	adc	r21, r31
    2916:	40 93 8e 20 	sts	0x208E, r20	; 0x80208e <__brkval>
    291a:	50 93 8f 20 	sts	0x208F, r21	; 0x80208f <__brkval+0x1>
    291e:	81 93       	st	Z+, r24
    2920:	91 93       	st	Z+, r25
    2922:	02 c0       	rjmp	.+4      	; 0x2928 <malloc+0x124>
    2924:	e0 e0       	ldi	r30, 0x00	; 0
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	cf 01       	movw	r24, r30
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	1f 91       	pop	r17
    2930:	0f 91       	pop	r16
    2932:	08 95       	ret

00002934 <free>:
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	09 f4       	brne	.+2      	; 0x293e <free+0xa>
    293c:	81 c0       	rjmp	.+258    	; 0x2a40 <free+0x10c>
    293e:	fc 01       	movw	r30, r24
    2940:	32 97       	sbiw	r30, 0x02	; 2
    2942:	12 82       	std	Z+2, r1	; 0x02
    2944:	13 82       	std	Z+3, r1	; 0x03
    2946:	a0 91 90 20 	lds	r26, 0x2090	; 0x802090 <__flp>
    294a:	b0 91 91 20 	lds	r27, 0x2091	; 0x802091 <__flp+0x1>
    294e:	10 97       	sbiw	r26, 0x00	; 0
    2950:	81 f4       	brne	.+32     	; 0x2972 <free+0x3e>
    2952:	20 81       	ld	r18, Z
    2954:	31 81       	ldd	r19, Z+1	; 0x01
    2956:	82 0f       	add	r24, r18
    2958:	93 1f       	adc	r25, r19
    295a:	20 91 8e 20 	lds	r18, 0x208E	; 0x80208e <__brkval>
    295e:	30 91 8f 20 	lds	r19, 0x208F	; 0x80208f <__brkval+0x1>
    2962:	28 17       	cp	r18, r24
    2964:	39 07       	cpc	r19, r25
    2966:	51 f5       	brne	.+84     	; 0x29bc <free+0x88>
    2968:	e0 93 8e 20 	sts	0x208E, r30	; 0x80208e <__brkval>
    296c:	f0 93 8f 20 	sts	0x208F, r31	; 0x80208f <__brkval+0x1>
    2970:	67 c0       	rjmp	.+206    	; 0x2a40 <free+0x10c>
    2972:	ed 01       	movw	r28, r26
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	ce 17       	cp	r28, r30
    297a:	df 07       	cpc	r29, r31
    297c:	40 f4       	brcc	.+16     	; 0x298e <free+0x5a>
    297e:	4a 81       	ldd	r20, Y+2	; 0x02
    2980:	5b 81       	ldd	r21, Y+3	; 0x03
    2982:	9e 01       	movw	r18, r28
    2984:	41 15       	cp	r20, r1
    2986:	51 05       	cpc	r21, r1
    2988:	f1 f0       	breq	.+60     	; 0x29c6 <free+0x92>
    298a:	ea 01       	movw	r28, r20
    298c:	f5 cf       	rjmp	.-22     	; 0x2978 <free+0x44>
    298e:	c2 83       	std	Z+2, r28	; 0x02
    2990:	d3 83       	std	Z+3, r29	; 0x03
    2992:	40 81       	ld	r20, Z
    2994:	51 81       	ldd	r21, Z+1	; 0x01
    2996:	84 0f       	add	r24, r20
    2998:	95 1f       	adc	r25, r21
    299a:	c8 17       	cp	r28, r24
    299c:	d9 07       	cpc	r29, r25
    299e:	59 f4       	brne	.+22     	; 0x29b6 <free+0x82>
    29a0:	88 81       	ld	r24, Y
    29a2:	99 81       	ldd	r25, Y+1	; 0x01
    29a4:	84 0f       	add	r24, r20
    29a6:	95 1f       	adc	r25, r21
    29a8:	02 96       	adiw	r24, 0x02	; 2
    29aa:	80 83       	st	Z, r24
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	9b 81       	ldd	r25, Y+3	; 0x03
    29b2:	82 83       	std	Z+2, r24	; 0x02
    29b4:	93 83       	std	Z+3, r25	; 0x03
    29b6:	21 15       	cp	r18, r1
    29b8:	31 05       	cpc	r19, r1
    29ba:	29 f4       	brne	.+10     	; 0x29c6 <free+0x92>
    29bc:	e0 93 90 20 	sts	0x2090, r30	; 0x802090 <__flp>
    29c0:	f0 93 91 20 	sts	0x2091, r31	; 0x802091 <__flp+0x1>
    29c4:	3d c0       	rjmp	.+122    	; 0x2a40 <free+0x10c>
    29c6:	e9 01       	movw	r28, r18
    29c8:	ea 83       	std	Y+2, r30	; 0x02
    29ca:	fb 83       	std	Y+3, r31	; 0x03
    29cc:	49 91       	ld	r20, Y+
    29ce:	59 91       	ld	r21, Y+
    29d0:	c4 0f       	add	r28, r20
    29d2:	d5 1f       	adc	r29, r21
    29d4:	ec 17       	cp	r30, r28
    29d6:	fd 07       	cpc	r31, r29
    29d8:	61 f4       	brne	.+24     	; 0x29f2 <free+0xbe>
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
    29de:	84 0f       	add	r24, r20
    29e0:	95 1f       	adc	r25, r21
    29e2:	02 96       	adiw	r24, 0x02	; 2
    29e4:	e9 01       	movw	r28, r18
    29e6:	88 83       	st	Y, r24
    29e8:	99 83       	std	Y+1, r25	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	8a 83       	std	Y+2, r24	; 0x02
    29f0:	9b 83       	std	Y+3, r25	; 0x03
    29f2:	e0 e0       	ldi	r30, 0x00	; 0
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	12 96       	adiw	r26, 0x02	; 2
    29f8:	8d 91       	ld	r24, X+
    29fa:	9c 91       	ld	r25, X
    29fc:	13 97       	sbiw	r26, 0x03	; 3
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	19 f0       	breq	.+6      	; 0x2a08 <free+0xd4>
    2a02:	fd 01       	movw	r30, r26
    2a04:	dc 01       	movw	r26, r24
    2a06:	f7 cf       	rjmp	.-18     	; 0x29f6 <free+0xc2>
    2a08:	8d 91       	ld	r24, X+
    2a0a:	9c 91       	ld	r25, X
    2a0c:	11 97       	sbiw	r26, 0x01	; 1
    2a0e:	9d 01       	movw	r18, r26
    2a10:	2e 5f       	subi	r18, 0xFE	; 254
    2a12:	3f 4f       	sbci	r19, 0xFF	; 255
    2a14:	82 0f       	add	r24, r18
    2a16:	93 1f       	adc	r25, r19
    2a18:	20 91 8e 20 	lds	r18, 0x208E	; 0x80208e <__brkval>
    2a1c:	30 91 8f 20 	lds	r19, 0x208F	; 0x80208f <__brkval+0x1>
    2a20:	28 17       	cp	r18, r24
    2a22:	39 07       	cpc	r19, r25
    2a24:	69 f4       	brne	.+26     	; 0x2a40 <free+0x10c>
    2a26:	30 97       	sbiw	r30, 0x00	; 0
    2a28:	29 f4       	brne	.+10     	; 0x2a34 <free+0x100>
    2a2a:	10 92 90 20 	sts	0x2090, r1	; 0x802090 <__flp>
    2a2e:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <__flp+0x1>
    2a32:	02 c0       	rjmp	.+4      	; 0x2a38 <free+0x104>
    2a34:	12 82       	std	Z+2, r1	; 0x02
    2a36:	13 82       	std	Z+3, r1	; 0x03
    2a38:	a0 93 8e 20 	sts	0x208E, r26	; 0x80208e <__brkval>
    2a3c:	b0 93 8f 20 	sts	0x208F, r27	; 0x80208f <__brkval+0x1>
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	08 95       	ret

00002a46 <memset>:
    2a46:	dc 01       	movw	r26, r24
    2a48:	01 c0       	rjmp	.+2      	; 0x2a4c <memset+0x6>
    2a4a:	6d 93       	st	X+, r22
    2a4c:	41 50       	subi	r20, 0x01	; 1
    2a4e:	50 40       	sbci	r21, 0x00	; 0
    2a50:	e0 f7       	brcc	.-8      	; 0x2a4a <memset+0x4>
    2a52:	08 95       	ret

00002a54 <_exit>:
    2a54:	f8 94       	cli

00002a56 <__stop_program>:
    2a56:	ff cf       	rjmp	.-2      	; 0x2a56 <__stop_program>
